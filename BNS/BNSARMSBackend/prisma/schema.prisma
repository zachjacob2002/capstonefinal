generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  user_id   Int    @id @default(autoincrement()) @map("user_id")
  username  String @unique
  password  String
  firstName String @map("first_name")
  lastName  String @map("last_name")
  role      String
  sex       String @default("Male")
  barangay  String @default("Default Barangay")
  isArchived Boolean @default(false) // Add this line

  activitiesCreated Activity[] @relation("CreatedBy")
  reports           Report[]   @relation("Reports")
  feedbacks         Feedback[] @relation("UserFeedback") 
  notifications     Notification[]
  events            Event[]    @relation("CreatedEvents")
  submissions       Submission[] @relation("UserSubmissions")

  @@map("users")
}

model Beneficiary {
  beneficiaryId  Int      @id @default(autoincrement()) @map("beneficiary_id")
  firstName      String   @map("first_name")
  middleName     String?
  lastName       String   @map("last_name")
  suffix         String?
  birthdate      DateTime
  age            String?
  sex            String
  job            String?
  barangay       String
  healthStation  String
  ageGroup       String   // Add this field to store a single age group
  subType        String?  // Add this field to store a single subtype, optional
  civilStatus    String
  contactNumber  String?
  isArchived     Boolean  @default(false) // Add this line

  activityParticipation ActivityParticipation[] @relation("BeneficiaryToParticipant")
  beneficiaryTypes      BeneficiaryTypes[]      @relation("BeneficiaryToTypes")

  @@map("beneficiaries")
}


model Type {
  typeId          Int       @id @default(autoincrement()) @map("type_id")
  typeName        String
  ageGroups       String[]  // Array of age groups this type applies to
  sex             String[]   // "Male", "Female", or null if applicable to both
  subTypes        String[]  // Array of subtypes for this type
  isArchived      Boolean   @default(false) // Add this line

  beneficiaryTypes BeneficiaryTypes[] @relation("TypeToBeneficiaries")

  @@map("types")
}


model BeneficiaryTypes {
  beneficiaryId Int @map("beneficiary_id")
  typeId        Int @map("type_id")

  beneficiary Beneficiary @relation("BeneficiaryToTypes", fields: [beneficiaryId], references: [beneficiaryId])
  type        Type        @relation("TypeToBeneficiaries", fields: [typeId], references: [typeId])

  @@id([beneficiaryId, typeId])
  @@map("beneficiary_types")
}

model Activity {
  activityId   Int      @id @default(autoincrement()) @map("activity_id")
  title        String
  description  String?
  activityDate DateTime @map("activity_date")
  createdBy    Int      @map("created_by")
  createdAt    DateTime @default(now())
  isArchived   Boolean  @default(false)
  filename     String?
  filepath     String?

  creator      User                    @relation("CreatedBy", fields: [createdBy], references: [user_id])
  participants ActivityParticipation[] @relation("ActivityToParticipant")
  documentations ActivityDocumentation[] @relation("ActivityDocumentations") // Add this line

  @@map("activities")
}

model ActivityDocumentation {
  documentationId Int    @id @default(autoincrement()) @map("documentation_id")
  activityId      Int    @map("activity_id")
  filename        String
  filepath        String
  uploadedAt      DateTime @default(now())

  activity Activity @relation("ActivityDocumentations", fields: [activityId], references: [activityId])

  @@map("activity_documentations")
}

model ActivityParticipation {
  activityId    Int     @map("activity_id")
  beneficiaryId Int     @map("beneficiary_id")
  attended      Boolean @default(false)
  beneficiaryFirstName  String  @map("beneficiary_first_name")
  beneficiaryMiddleName String?
  beneficiaryLastName   String  @map("beneficiary_last_name")
  beneficiarySuffix     String?
  beneficiaryBirthdate  DateTime @map("beneficiary_birthdate")
  beneficiarySex        String  @map("beneficiary_sex")
  beneficiaryJob        String? @map("beneficiary_job")
  beneficiaryBarangay   String  @map("beneficiary_barangay")
  beneficiaryHealthStation String @map("beneficiary_health_station")
  beneficiaryPrimaryType String @map("beneficiary_primary_type")
  beneficiaryCivilStatus String @map("beneficiary_civil_status")
  beneficiaryContactNumber String? @map("beneficiary_contact_number")
  beneficiaryTypes String @map("beneficiary_types")
  isArchived     Boolean @default(false) // Add this line

  activity    Activity    @relation("ActivityToParticipant", fields: [activityId], references: [activityId])
  beneficiary Beneficiary @relation("BeneficiaryToParticipant", fields: [beneficiaryId], references: [beneficiaryId])

  @@id([activityId, beneficiaryId])
  @@map("activity_participation")
}

model Report {
  reportId       Int        @id @default(autoincrement()) @map("report_id")
  type           String     
  month          String
  year           Int
  userId         Int        @map("user_id")
  dueDate        DateTime   @map("due_date") // Add this line
  files          FileAttachment[] @relation("ReportFiles")
  feedbacks      Feedback[] @relation("ReportFeedback")
  submissions    Submission[]    @relation("ReportSubmissions") // Relation to submissions
  isArchived     Boolean @default(false) // Add this line

  user User @relation("Reports", fields: [userId], references: [user_id])

  @@map("reports")
}

model FileAttachment {
  fileId      Int    @id @default(autoincrement()) @map("file_id")
  reportId    Int    @map("report_id")
  submissionId Int   @map("submission_id") // Add this line
  filePath    String
  fileType    String
  fileName    String // Add this line

  report     Report     @relation("ReportFiles", fields: [reportId], references: [reportId])
  submission Submission @relation("SubmissionFiles", fields: [submissionId], references: [submissionId]) // Add this line

  @@map("file_attachments")
}

model Feedback {
  feedbackId     Int      @id @default(autoincrement())
  reportId       Int      @map("report_id")
  createdBy      Int      @map("user_id")
  content        String
  createdAt      DateTime @default(now())
  submissionId   Int?     @map("submission_id") // Add this line

  report Report @relation("ReportFeedback", fields: [reportId], references: [reportId])
  user   User   @relation("UserFeedback", fields: [createdBy], references: [user_id])
  submission Submission? @relation("SubmissionFeedback", fields: [submissionId], references: [submissionId]) // Add this line

  @@map("feedbacks")
}

model Submission {
  submissionId Int        @id @default(autoincrement()) @map("submission_id")
  reportId     Int        @map("report_id")
  userId       Int        @map("user_id")
  status       String     @default("Pending")
  submissionDate DateTime @default(now()) // Moved from Report to here
  files        FileAttachment[] @relation("SubmissionFiles")
  feedbacks    Feedback[] @relation("SubmissionFeedback")

  report Report @relation("ReportSubmissions", fields: [reportId], references: [reportId])
  user   User   @relation("UserSubmissions", fields: [userId], references: [user_id])

  @@map("submissions")
}

model Notification {
  id          Int      @id @default(autoincrement())
  userId      Int
  title       String
  message     String
  createdAt   DateTime @default(now())
  read        Boolean  @default(false)
  type        String

  user        User     @relation(fields: [userId], references: [user_id])

  @@map("notifications")
}

model Event {
  eventId     Int      @id @default(autoincrement()) @map("event_id")
  title       String
  start       DateTime
  end         DateTime
  allDay      Boolean
  createdBy   Int      @map("created_by")
  createdAt   DateTime @default(now())
  isArchived  Boolean  @default(false) // Add this line

  user        User     @relation("CreatedEvents", fields: [createdBy], references: [user_id])

  @@map("events")
}
