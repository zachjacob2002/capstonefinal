
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Beneficiary
 * 
 */
export type Beneficiary = $Result.DefaultSelection<Prisma.$BeneficiaryPayload>
/**
 * Model Type
 * 
 */
export type Type = $Result.DefaultSelection<Prisma.$TypePayload>
/**
 * Model BeneficiaryTypes
 * 
 */
export type BeneficiaryTypes = $Result.DefaultSelection<Prisma.$BeneficiaryTypesPayload>
/**
 * Model Activity
 * 
 */
export type Activity = $Result.DefaultSelection<Prisma.$ActivityPayload>
/**
 * Model ActivityDocumentation
 * 
 */
export type ActivityDocumentation = $Result.DefaultSelection<Prisma.$ActivityDocumentationPayload>
/**
 * Model ActivityParticipation
 * 
 */
export type ActivityParticipation = $Result.DefaultSelection<Prisma.$ActivityParticipationPayload>
/**
 * Model Report
 * 
 */
export type Report = $Result.DefaultSelection<Prisma.$ReportPayload>
/**
 * Model FileAttachment
 * 
 */
export type FileAttachment = $Result.DefaultSelection<Prisma.$FileAttachmentPayload>
/**
 * Model Feedback
 * 
 */
export type Feedback = $Result.DefaultSelection<Prisma.$FeedbackPayload>
/**
 * Model Submission
 * 
 */
export type Submission = $Result.DefaultSelection<Prisma.$SubmissionPayload>
/**
 * Model Notification
 * 
 */
export type Notification = $Result.DefaultSelection<Prisma.$NotificationPayload>
/**
 * Model Event
 * 
 */
export type Event = $Result.DefaultSelection<Prisma.$EventPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.beneficiary`: Exposes CRUD operations for the **Beneficiary** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Beneficiaries
    * const beneficiaries = await prisma.beneficiary.findMany()
    * ```
    */
  get beneficiary(): Prisma.BeneficiaryDelegate<ExtArgs>;

  /**
   * `prisma.type`: Exposes CRUD operations for the **Type** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Types
    * const types = await prisma.type.findMany()
    * ```
    */
  get type(): Prisma.TypeDelegate<ExtArgs>;

  /**
   * `prisma.beneficiaryTypes`: Exposes CRUD operations for the **BeneficiaryTypes** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BeneficiaryTypes
    * const beneficiaryTypes = await prisma.beneficiaryTypes.findMany()
    * ```
    */
  get beneficiaryTypes(): Prisma.BeneficiaryTypesDelegate<ExtArgs>;

  /**
   * `prisma.activity`: Exposes CRUD operations for the **Activity** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Activities
    * const activities = await prisma.activity.findMany()
    * ```
    */
  get activity(): Prisma.ActivityDelegate<ExtArgs>;

  /**
   * `prisma.activityDocumentation`: Exposes CRUD operations for the **ActivityDocumentation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ActivityDocumentations
    * const activityDocumentations = await prisma.activityDocumentation.findMany()
    * ```
    */
  get activityDocumentation(): Prisma.ActivityDocumentationDelegate<ExtArgs>;

  /**
   * `prisma.activityParticipation`: Exposes CRUD operations for the **ActivityParticipation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ActivityParticipations
    * const activityParticipations = await prisma.activityParticipation.findMany()
    * ```
    */
  get activityParticipation(): Prisma.ActivityParticipationDelegate<ExtArgs>;

  /**
   * `prisma.report`: Exposes CRUD operations for the **Report** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Reports
    * const reports = await prisma.report.findMany()
    * ```
    */
  get report(): Prisma.ReportDelegate<ExtArgs>;

  /**
   * `prisma.fileAttachment`: Exposes CRUD operations for the **FileAttachment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FileAttachments
    * const fileAttachments = await prisma.fileAttachment.findMany()
    * ```
    */
  get fileAttachment(): Prisma.FileAttachmentDelegate<ExtArgs>;

  /**
   * `prisma.feedback`: Exposes CRUD operations for the **Feedback** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Feedbacks
    * const feedbacks = await prisma.feedback.findMany()
    * ```
    */
  get feedback(): Prisma.FeedbackDelegate<ExtArgs>;

  /**
   * `prisma.submission`: Exposes CRUD operations for the **Submission** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Submissions
    * const submissions = await prisma.submission.findMany()
    * ```
    */
  get submission(): Prisma.SubmissionDelegate<ExtArgs>;

  /**
   * `prisma.notification`: Exposes CRUD operations for the **Notification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notifications
    * const notifications = await prisma.notification.findMany()
    * ```
    */
  get notification(): Prisma.NotificationDelegate<ExtArgs>;

  /**
   * `prisma.event`: Exposes CRUD operations for the **Event** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Events
    * const events = await prisma.event.findMany()
    * ```
    */
  get event(): Prisma.EventDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.12.1
   * Query Engine version: 473ed3124229e22d881cb7addf559799debae1ab
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Beneficiary: 'Beneficiary',
    Type: 'Type',
    BeneficiaryTypes: 'BeneficiaryTypes',
    Activity: 'Activity',
    ActivityDocumentation: 'ActivityDocumentation',
    ActivityParticipation: 'ActivityParticipation',
    Report: 'Report',
    FileAttachment: 'FileAttachment',
    Feedback: 'Feedback',
    Submission: 'Submission',
    Notification: 'Notification',
    Event: 'Event'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'user' | 'beneficiary' | 'type' | 'beneficiaryTypes' | 'activity' | 'activityDocumentation' | 'activityParticipation' | 'report' | 'fileAttachment' | 'feedback' | 'submission' | 'notification' | 'event'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Beneficiary: {
        payload: Prisma.$BeneficiaryPayload<ExtArgs>
        fields: Prisma.BeneficiaryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BeneficiaryFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BeneficiaryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BeneficiaryFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BeneficiaryPayload>
          }
          findFirst: {
            args: Prisma.BeneficiaryFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BeneficiaryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BeneficiaryFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BeneficiaryPayload>
          }
          findMany: {
            args: Prisma.BeneficiaryFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BeneficiaryPayload>[]
          }
          create: {
            args: Prisma.BeneficiaryCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BeneficiaryPayload>
          }
          createMany: {
            args: Prisma.BeneficiaryCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.BeneficiaryDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BeneficiaryPayload>
          }
          update: {
            args: Prisma.BeneficiaryUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BeneficiaryPayload>
          }
          deleteMany: {
            args: Prisma.BeneficiaryDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.BeneficiaryUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.BeneficiaryUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BeneficiaryPayload>
          }
          aggregate: {
            args: Prisma.BeneficiaryAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateBeneficiary>
          }
          groupBy: {
            args: Prisma.BeneficiaryGroupByArgs<ExtArgs>,
            result: $Utils.Optional<BeneficiaryGroupByOutputType>[]
          }
          count: {
            args: Prisma.BeneficiaryCountArgs<ExtArgs>,
            result: $Utils.Optional<BeneficiaryCountAggregateOutputType> | number
          }
        }
      }
      Type: {
        payload: Prisma.$TypePayload<ExtArgs>
        fields: Prisma.TypeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TypeFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TypePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TypeFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TypePayload>
          }
          findFirst: {
            args: Prisma.TypeFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TypePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TypeFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TypePayload>
          }
          findMany: {
            args: Prisma.TypeFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TypePayload>[]
          }
          create: {
            args: Prisma.TypeCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TypePayload>
          }
          createMany: {
            args: Prisma.TypeCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.TypeDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TypePayload>
          }
          update: {
            args: Prisma.TypeUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TypePayload>
          }
          deleteMany: {
            args: Prisma.TypeDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.TypeUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.TypeUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TypePayload>
          }
          aggregate: {
            args: Prisma.TypeAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateType>
          }
          groupBy: {
            args: Prisma.TypeGroupByArgs<ExtArgs>,
            result: $Utils.Optional<TypeGroupByOutputType>[]
          }
          count: {
            args: Prisma.TypeCountArgs<ExtArgs>,
            result: $Utils.Optional<TypeCountAggregateOutputType> | number
          }
        }
      }
      BeneficiaryTypes: {
        payload: Prisma.$BeneficiaryTypesPayload<ExtArgs>
        fields: Prisma.BeneficiaryTypesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BeneficiaryTypesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BeneficiaryTypesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BeneficiaryTypesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BeneficiaryTypesPayload>
          }
          findFirst: {
            args: Prisma.BeneficiaryTypesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BeneficiaryTypesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BeneficiaryTypesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BeneficiaryTypesPayload>
          }
          findMany: {
            args: Prisma.BeneficiaryTypesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BeneficiaryTypesPayload>[]
          }
          create: {
            args: Prisma.BeneficiaryTypesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BeneficiaryTypesPayload>
          }
          createMany: {
            args: Prisma.BeneficiaryTypesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.BeneficiaryTypesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BeneficiaryTypesPayload>
          }
          update: {
            args: Prisma.BeneficiaryTypesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BeneficiaryTypesPayload>
          }
          deleteMany: {
            args: Prisma.BeneficiaryTypesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.BeneficiaryTypesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.BeneficiaryTypesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BeneficiaryTypesPayload>
          }
          aggregate: {
            args: Prisma.BeneficiaryTypesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateBeneficiaryTypes>
          }
          groupBy: {
            args: Prisma.BeneficiaryTypesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<BeneficiaryTypesGroupByOutputType>[]
          }
          count: {
            args: Prisma.BeneficiaryTypesCountArgs<ExtArgs>,
            result: $Utils.Optional<BeneficiaryTypesCountAggregateOutputType> | number
          }
        }
      }
      Activity: {
        payload: Prisma.$ActivityPayload<ExtArgs>
        fields: Prisma.ActivityFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ActivityFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ActivityPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ActivityFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ActivityPayload>
          }
          findFirst: {
            args: Prisma.ActivityFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ActivityPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ActivityFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ActivityPayload>
          }
          findMany: {
            args: Prisma.ActivityFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ActivityPayload>[]
          }
          create: {
            args: Prisma.ActivityCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ActivityPayload>
          }
          createMany: {
            args: Prisma.ActivityCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ActivityDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ActivityPayload>
          }
          update: {
            args: Prisma.ActivityUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ActivityPayload>
          }
          deleteMany: {
            args: Prisma.ActivityDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ActivityUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ActivityUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ActivityPayload>
          }
          aggregate: {
            args: Prisma.ActivityAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateActivity>
          }
          groupBy: {
            args: Prisma.ActivityGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ActivityGroupByOutputType>[]
          }
          count: {
            args: Prisma.ActivityCountArgs<ExtArgs>,
            result: $Utils.Optional<ActivityCountAggregateOutputType> | number
          }
        }
      }
      ActivityDocumentation: {
        payload: Prisma.$ActivityDocumentationPayload<ExtArgs>
        fields: Prisma.ActivityDocumentationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ActivityDocumentationFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ActivityDocumentationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ActivityDocumentationFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ActivityDocumentationPayload>
          }
          findFirst: {
            args: Prisma.ActivityDocumentationFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ActivityDocumentationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ActivityDocumentationFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ActivityDocumentationPayload>
          }
          findMany: {
            args: Prisma.ActivityDocumentationFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ActivityDocumentationPayload>[]
          }
          create: {
            args: Prisma.ActivityDocumentationCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ActivityDocumentationPayload>
          }
          createMany: {
            args: Prisma.ActivityDocumentationCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ActivityDocumentationDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ActivityDocumentationPayload>
          }
          update: {
            args: Prisma.ActivityDocumentationUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ActivityDocumentationPayload>
          }
          deleteMany: {
            args: Prisma.ActivityDocumentationDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ActivityDocumentationUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ActivityDocumentationUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ActivityDocumentationPayload>
          }
          aggregate: {
            args: Prisma.ActivityDocumentationAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateActivityDocumentation>
          }
          groupBy: {
            args: Prisma.ActivityDocumentationGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ActivityDocumentationGroupByOutputType>[]
          }
          count: {
            args: Prisma.ActivityDocumentationCountArgs<ExtArgs>,
            result: $Utils.Optional<ActivityDocumentationCountAggregateOutputType> | number
          }
        }
      }
      ActivityParticipation: {
        payload: Prisma.$ActivityParticipationPayload<ExtArgs>
        fields: Prisma.ActivityParticipationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ActivityParticipationFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ActivityParticipationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ActivityParticipationFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ActivityParticipationPayload>
          }
          findFirst: {
            args: Prisma.ActivityParticipationFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ActivityParticipationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ActivityParticipationFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ActivityParticipationPayload>
          }
          findMany: {
            args: Prisma.ActivityParticipationFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ActivityParticipationPayload>[]
          }
          create: {
            args: Prisma.ActivityParticipationCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ActivityParticipationPayload>
          }
          createMany: {
            args: Prisma.ActivityParticipationCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ActivityParticipationDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ActivityParticipationPayload>
          }
          update: {
            args: Prisma.ActivityParticipationUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ActivityParticipationPayload>
          }
          deleteMany: {
            args: Prisma.ActivityParticipationDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ActivityParticipationUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ActivityParticipationUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ActivityParticipationPayload>
          }
          aggregate: {
            args: Prisma.ActivityParticipationAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateActivityParticipation>
          }
          groupBy: {
            args: Prisma.ActivityParticipationGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ActivityParticipationGroupByOutputType>[]
          }
          count: {
            args: Prisma.ActivityParticipationCountArgs<ExtArgs>,
            result: $Utils.Optional<ActivityParticipationCountAggregateOutputType> | number
          }
        }
      }
      Report: {
        payload: Prisma.$ReportPayload<ExtArgs>
        fields: Prisma.ReportFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReportFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReportPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReportFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>
          }
          findFirst: {
            args: Prisma.ReportFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReportPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReportFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>
          }
          findMany: {
            args: Prisma.ReportFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>[]
          }
          create: {
            args: Prisma.ReportCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>
          }
          createMany: {
            args: Prisma.ReportCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ReportDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>
          }
          update: {
            args: Prisma.ReportUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>
          }
          deleteMany: {
            args: Prisma.ReportDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ReportUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ReportUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>
          }
          aggregate: {
            args: Prisma.ReportAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateReport>
          }
          groupBy: {
            args: Prisma.ReportGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ReportGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReportCountArgs<ExtArgs>,
            result: $Utils.Optional<ReportCountAggregateOutputType> | number
          }
        }
      }
      FileAttachment: {
        payload: Prisma.$FileAttachmentPayload<ExtArgs>
        fields: Prisma.FileAttachmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FileAttachmentFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FileAttachmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FileAttachmentFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FileAttachmentPayload>
          }
          findFirst: {
            args: Prisma.FileAttachmentFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FileAttachmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FileAttachmentFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FileAttachmentPayload>
          }
          findMany: {
            args: Prisma.FileAttachmentFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FileAttachmentPayload>[]
          }
          create: {
            args: Prisma.FileAttachmentCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FileAttachmentPayload>
          }
          createMany: {
            args: Prisma.FileAttachmentCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.FileAttachmentDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FileAttachmentPayload>
          }
          update: {
            args: Prisma.FileAttachmentUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FileAttachmentPayload>
          }
          deleteMany: {
            args: Prisma.FileAttachmentDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.FileAttachmentUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.FileAttachmentUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FileAttachmentPayload>
          }
          aggregate: {
            args: Prisma.FileAttachmentAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateFileAttachment>
          }
          groupBy: {
            args: Prisma.FileAttachmentGroupByArgs<ExtArgs>,
            result: $Utils.Optional<FileAttachmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.FileAttachmentCountArgs<ExtArgs>,
            result: $Utils.Optional<FileAttachmentCountAggregateOutputType> | number
          }
        }
      }
      Feedback: {
        payload: Prisma.$FeedbackPayload<ExtArgs>
        fields: Prisma.FeedbackFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FeedbackFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FeedbackFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          findFirst: {
            args: Prisma.FeedbackFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FeedbackFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          findMany: {
            args: Prisma.FeedbackFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>[]
          }
          create: {
            args: Prisma.FeedbackCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          createMany: {
            args: Prisma.FeedbackCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.FeedbackDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          update: {
            args: Prisma.FeedbackUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          deleteMany: {
            args: Prisma.FeedbackDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.FeedbackUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.FeedbackUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FeedbackPayload>
          }
          aggregate: {
            args: Prisma.FeedbackAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateFeedback>
          }
          groupBy: {
            args: Prisma.FeedbackGroupByArgs<ExtArgs>,
            result: $Utils.Optional<FeedbackGroupByOutputType>[]
          }
          count: {
            args: Prisma.FeedbackCountArgs<ExtArgs>,
            result: $Utils.Optional<FeedbackCountAggregateOutputType> | number
          }
        }
      }
      Submission: {
        payload: Prisma.$SubmissionPayload<ExtArgs>
        fields: Prisma.SubmissionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SubmissionFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubmissionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SubmissionFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubmissionPayload>
          }
          findFirst: {
            args: Prisma.SubmissionFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubmissionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SubmissionFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubmissionPayload>
          }
          findMany: {
            args: Prisma.SubmissionFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubmissionPayload>[]
          }
          create: {
            args: Prisma.SubmissionCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubmissionPayload>
          }
          createMany: {
            args: Prisma.SubmissionCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.SubmissionDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubmissionPayload>
          }
          update: {
            args: Prisma.SubmissionUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubmissionPayload>
          }
          deleteMany: {
            args: Prisma.SubmissionDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.SubmissionUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.SubmissionUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SubmissionPayload>
          }
          aggregate: {
            args: Prisma.SubmissionAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSubmission>
          }
          groupBy: {
            args: Prisma.SubmissionGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SubmissionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SubmissionCountArgs<ExtArgs>,
            result: $Utils.Optional<SubmissionCountAggregateOutputType> | number
          }
        }
      }
      Notification: {
        payload: Prisma.$NotificationPayload<ExtArgs>
        fields: Prisma.NotificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotificationFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotificationFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findFirst: {
            args: Prisma.NotificationFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotificationFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findMany: {
            args: Prisma.NotificationFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          create: {
            args: Prisma.NotificationCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          createMany: {
            args: Prisma.NotificationCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.NotificationDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          update: {
            args: Prisma.NotificationUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          deleteMany: {
            args: Prisma.NotificationDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.NotificationUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.NotificationUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          aggregate: {
            args: Prisma.NotificationAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateNotification>
          }
          groupBy: {
            args: Prisma.NotificationGroupByArgs<ExtArgs>,
            result: $Utils.Optional<NotificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.NotificationCountArgs<ExtArgs>,
            result: $Utils.Optional<NotificationCountAggregateOutputType> | number
          }
        }
      }
      Event: {
        payload: Prisma.$EventPayload<ExtArgs>
        fields: Prisma.EventFieldRefs
        operations: {
          findUnique: {
            args: Prisma.EventFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EventPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.EventFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          findFirst: {
            args: Prisma.EventFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EventPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.EventFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          findMany: {
            args: Prisma.EventFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EventPayload>[]
          }
          create: {
            args: Prisma.EventCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          createMany: {
            args: Prisma.EventCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.EventDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          update: {
            args: Prisma.EventUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          deleteMany: {
            args: Prisma.EventDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.EventUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.EventUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$EventPayload>
          }
          aggregate: {
            args: Prisma.EventAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateEvent>
          }
          groupBy: {
            args: Prisma.EventGroupByArgs<ExtArgs>,
            result: $Utils.Optional<EventGroupByOutputType>[]
          }
          count: {
            args: Prisma.EventCountArgs<ExtArgs>,
            result: $Utils.Optional<EventCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    activitiesCreated: number
    reports: number
    feedbacks: number
    notifications: number
    events: number
    submissions: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    activitiesCreated?: boolean | UserCountOutputTypeCountActivitiesCreatedArgs
    reports?: boolean | UserCountOutputTypeCountReportsArgs
    feedbacks?: boolean | UserCountOutputTypeCountFeedbacksArgs
    notifications?: boolean | UserCountOutputTypeCountNotificationsArgs
    events?: boolean | UserCountOutputTypeCountEventsArgs
    submissions?: boolean | UserCountOutputTypeCountSubmissionsArgs
  }

  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountActivitiesCreatedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ActivityWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountReportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReportWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFeedbacksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeedbackWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSubmissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubmissionWhereInput
  }



  /**
   * Count Type BeneficiaryCountOutputType
   */

  export type BeneficiaryCountOutputType = {
    activityParticipation: number
    beneficiaryTypes: number
  }

  export type BeneficiaryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    activityParticipation?: boolean | BeneficiaryCountOutputTypeCountActivityParticipationArgs
    beneficiaryTypes?: boolean | BeneficiaryCountOutputTypeCountBeneficiaryTypesArgs
  }

  // Custom InputTypes

  /**
   * BeneficiaryCountOutputType without action
   */
  export type BeneficiaryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BeneficiaryCountOutputType
     */
    select?: BeneficiaryCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * BeneficiaryCountOutputType without action
   */
  export type BeneficiaryCountOutputTypeCountActivityParticipationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ActivityParticipationWhereInput
  }


  /**
   * BeneficiaryCountOutputType without action
   */
  export type BeneficiaryCountOutputTypeCountBeneficiaryTypesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BeneficiaryTypesWhereInput
  }



  /**
   * Count Type TypeCountOutputType
   */

  export type TypeCountOutputType = {
    beneficiaryTypes: number
  }

  export type TypeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    beneficiaryTypes?: boolean | TypeCountOutputTypeCountBeneficiaryTypesArgs
  }

  // Custom InputTypes

  /**
   * TypeCountOutputType without action
   */
  export type TypeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TypeCountOutputType
     */
    select?: TypeCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * TypeCountOutputType without action
   */
  export type TypeCountOutputTypeCountBeneficiaryTypesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BeneficiaryTypesWhereInput
  }



  /**
   * Count Type ActivityCountOutputType
   */

  export type ActivityCountOutputType = {
    participants: number
    documentations: number
  }

  export type ActivityCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    participants?: boolean | ActivityCountOutputTypeCountParticipantsArgs
    documentations?: boolean | ActivityCountOutputTypeCountDocumentationsArgs
  }

  // Custom InputTypes

  /**
   * ActivityCountOutputType without action
   */
  export type ActivityCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityCountOutputType
     */
    select?: ActivityCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ActivityCountOutputType without action
   */
  export type ActivityCountOutputTypeCountParticipantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ActivityParticipationWhereInput
  }


  /**
   * ActivityCountOutputType without action
   */
  export type ActivityCountOutputTypeCountDocumentationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ActivityDocumentationWhereInput
  }



  /**
   * Count Type ReportCountOutputType
   */

  export type ReportCountOutputType = {
    files: number
    feedbacks: number
    submissions: number
  }

  export type ReportCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    files?: boolean | ReportCountOutputTypeCountFilesArgs
    feedbacks?: boolean | ReportCountOutputTypeCountFeedbacksArgs
    submissions?: boolean | ReportCountOutputTypeCountSubmissionsArgs
  }

  // Custom InputTypes

  /**
   * ReportCountOutputType without action
   */
  export type ReportCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportCountOutputType
     */
    select?: ReportCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ReportCountOutputType without action
   */
  export type ReportCountOutputTypeCountFilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FileAttachmentWhereInput
  }


  /**
   * ReportCountOutputType without action
   */
  export type ReportCountOutputTypeCountFeedbacksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeedbackWhereInput
  }


  /**
   * ReportCountOutputType without action
   */
  export type ReportCountOutputTypeCountSubmissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubmissionWhereInput
  }



  /**
   * Count Type SubmissionCountOutputType
   */

  export type SubmissionCountOutputType = {
    files: number
    feedbacks: number
  }

  export type SubmissionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    files?: boolean | SubmissionCountOutputTypeCountFilesArgs
    feedbacks?: boolean | SubmissionCountOutputTypeCountFeedbacksArgs
  }

  // Custom InputTypes

  /**
   * SubmissionCountOutputType without action
   */
  export type SubmissionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SubmissionCountOutputType
     */
    select?: SubmissionCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * SubmissionCountOutputType without action
   */
  export type SubmissionCountOutputTypeCountFilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FileAttachmentWhereInput
  }


  /**
   * SubmissionCountOutputType without action
   */
  export type SubmissionCountOutputTypeCountFeedbacksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeedbackWhereInput
  }



  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    user_id: number | null
  }

  export type UserSumAggregateOutputType = {
    user_id: number | null
  }

  export type UserMinAggregateOutputType = {
    user_id: number | null
    username: string | null
    password: string | null
    firstName: string | null
    lastName: string | null
    role: string | null
    sex: string | null
    barangay: string | null
    isArchived: boolean | null
  }

  export type UserMaxAggregateOutputType = {
    user_id: number | null
    username: string | null
    password: string | null
    firstName: string | null
    lastName: string | null
    role: string | null
    sex: string | null
    barangay: string | null
    isArchived: boolean | null
  }

  export type UserCountAggregateOutputType = {
    user_id: number
    username: number
    password: number
    firstName: number
    lastName: number
    role: number
    sex: number
    barangay: number
    isArchived: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    user_id?: true
  }

  export type UserSumAggregateInputType = {
    user_id?: true
  }

  export type UserMinAggregateInputType = {
    user_id?: true
    username?: true
    password?: true
    firstName?: true
    lastName?: true
    role?: true
    sex?: true
    barangay?: true
    isArchived?: true
  }

  export type UserMaxAggregateInputType = {
    user_id?: true
    username?: true
    password?: true
    firstName?: true
    lastName?: true
    role?: true
    sex?: true
    barangay?: true
    isArchived?: true
  }

  export type UserCountAggregateInputType = {
    user_id?: true
    username?: true
    password?: true
    firstName?: true
    lastName?: true
    role?: true
    sex?: true
    barangay?: true
    isArchived?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    user_id: number
    username: string
    password: string
    firstName: string
    lastName: string
    role: string
    sex: string
    barangay: string
    isArchived: boolean
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    user_id?: boolean
    username?: boolean
    password?: boolean
    firstName?: boolean
    lastName?: boolean
    role?: boolean
    sex?: boolean
    barangay?: boolean
    isArchived?: boolean
    activitiesCreated?: boolean | User$activitiesCreatedArgs<ExtArgs>
    reports?: boolean | User$reportsArgs<ExtArgs>
    feedbacks?: boolean | User$feedbacksArgs<ExtArgs>
    notifications?: boolean | User$notificationsArgs<ExtArgs>
    events?: boolean | User$eventsArgs<ExtArgs>
    submissions?: boolean | User$submissionsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    user_id?: boolean
    username?: boolean
    password?: boolean
    firstName?: boolean
    lastName?: boolean
    role?: boolean
    sex?: boolean
    barangay?: boolean
    isArchived?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    activitiesCreated?: boolean | User$activitiesCreatedArgs<ExtArgs>
    reports?: boolean | User$reportsArgs<ExtArgs>
    feedbacks?: boolean | User$feedbacksArgs<ExtArgs>
    notifications?: boolean | User$notificationsArgs<ExtArgs>
    events?: boolean | User$eventsArgs<ExtArgs>
    submissions?: boolean | User$submissionsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      activitiesCreated: Prisma.$ActivityPayload<ExtArgs>[]
      reports: Prisma.$ReportPayload<ExtArgs>[]
      feedbacks: Prisma.$FeedbackPayload<ExtArgs>[]
      notifications: Prisma.$NotificationPayload<ExtArgs>[]
      events: Prisma.$EventPayload<ExtArgs>[]
      submissions: Prisma.$SubmissionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      user_id: number
      username: string
      password: string
      firstName: string
      lastName: string
      role: string
      sex: string
      barangay: string
      isArchived: boolean
    }, ExtArgs["result"]["user"]>
    composites: {}
  }


  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `user_id`
     * const userWithUser_idOnly = await prisma.user.findMany({ select: { user_id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCreateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeleteArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpsertArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    activitiesCreated<T extends User$activitiesCreatedArgs<ExtArgs> = {}>(args?: Subset<T, User$activitiesCreatedArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, 'findMany'> | Null>;

    reports<T extends User$reportsArgs<ExtArgs> = {}>(args?: Subset<T, User$reportsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, 'findMany'> | Null>;

    feedbacks<T extends User$feedbacksArgs<ExtArgs> = {}>(args?: Subset<T, User$feedbacksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, 'findMany'> | Null>;

    notifications<T extends User$notificationsArgs<ExtArgs> = {}>(args?: Subset<T, User$notificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, 'findMany'> | Null>;

    events<T extends User$eventsArgs<ExtArgs> = {}>(args?: Subset<T, User$eventsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, 'findMany'> | Null>;

    submissions<T extends User$submissionsArgs<ExtArgs> = {}>(args?: Subset<T, User$submissionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly user_id: FieldRef<"User", 'Int'>
    readonly username: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly firstName: FieldRef<"User", 'String'>
    readonly lastName: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'String'>
    readonly sex: FieldRef<"User", 'String'>
    readonly barangay: FieldRef<"User", 'String'>
    readonly isArchived: FieldRef<"User", 'Boolean'>
  }
    

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.activitiesCreated
   */
  export type User$activitiesCreatedArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ActivityInclude<ExtArgs> | null
    where?: ActivityWhereInput
    orderBy?: ActivityOrderByWithRelationInput | ActivityOrderByWithRelationInput[]
    cursor?: ActivityWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ActivityScalarFieldEnum | ActivityScalarFieldEnum[]
  }


  /**
   * User.reports
   */
  export type User$reportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReportInclude<ExtArgs> | null
    where?: ReportWhereInput
    orderBy?: ReportOrderByWithRelationInput | ReportOrderByWithRelationInput[]
    cursor?: ReportWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReportScalarFieldEnum | ReportScalarFieldEnum[]
  }


  /**
   * User.feedbacks
   */
  export type User$feedbacksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeedbackInclude<ExtArgs> | null
    where?: FeedbackWhereInput
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    cursor?: FeedbackWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FeedbackScalarFieldEnum | FeedbackScalarFieldEnum[]
  }


  /**
   * User.notifications
   */
  export type User$notificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude<ExtArgs> | null
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    cursor?: NotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }


  /**
   * User.events
   */
  export type User$eventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EventInclude<ExtArgs> | null
    where?: EventWhereInput
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    cursor?: EventWhereUniqueInput
    take?: number
    skip?: number
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }


  /**
   * User.submissions
   */
  export type User$submissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubmissionInclude<ExtArgs> | null
    where?: SubmissionWhereInput
    orderBy?: SubmissionOrderByWithRelationInput | SubmissionOrderByWithRelationInput[]
    cursor?: SubmissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubmissionScalarFieldEnum | SubmissionScalarFieldEnum[]
  }


  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
  }



  /**
   * Model Beneficiary
   */

  export type AggregateBeneficiary = {
    _count: BeneficiaryCountAggregateOutputType | null
    _avg: BeneficiaryAvgAggregateOutputType | null
    _sum: BeneficiarySumAggregateOutputType | null
    _min: BeneficiaryMinAggregateOutputType | null
    _max: BeneficiaryMaxAggregateOutputType | null
  }

  export type BeneficiaryAvgAggregateOutputType = {
    beneficiaryId: number | null
  }

  export type BeneficiarySumAggregateOutputType = {
    beneficiaryId: number | null
  }

  export type BeneficiaryMinAggregateOutputType = {
    beneficiaryId: number | null
    firstName: string | null
    middleName: string | null
    lastName: string | null
    suffix: string | null
    birthdate: Date | null
    age: string | null
    sex: string | null
    job: string | null
    barangay: string | null
    healthStation: string | null
    ageGroup: string | null
    subType: string | null
    civilStatus: string | null
    contactNumber: string | null
    isArchived: boolean | null
  }

  export type BeneficiaryMaxAggregateOutputType = {
    beneficiaryId: number | null
    firstName: string | null
    middleName: string | null
    lastName: string | null
    suffix: string | null
    birthdate: Date | null
    age: string | null
    sex: string | null
    job: string | null
    barangay: string | null
    healthStation: string | null
    ageGroup: string | null
    subType: string | null
    civilStatus: string | null
    contactNumber: string | null
    isArchived: boolean | null
  }

  export type BeneficiaryCountAggregateOutputType = {
    beneficiaryId: number
    firstName: number
    middleName: number
    lastName: number
    suffix: number
    birthdate: number
    age: number
    sex: number
    job: number
    barangay: number
    healthStation: number
    ageGroup: number
    subType: number
    civilStatus: number
    contactNumber: number
    isArchived: number
    _all: number
  }


  export type BeneficiaryAvgAggregateInputType = {
    beneficiaryId?: true
  }

  export type BeneficiarySumAggregateInputType = {
    beneficiaryId?: true
  }

  export type BeneficiaryMinAggregateInputType = {
    beneficiaryId?: true
    firstName?: true
    middleName?: true
    lastName?: true
    suffix?: true
    birthdate?: true
    age?: true
    sex?: true
    job?: true
    barangay?: true
    healthStation?: true
    ageGroup?: true
    subType?: true
    civilStatus?: true
    contactNumber?: true
    isArchived?: true
  }

  export type BeneficiaryMaxAggregateInputType = {
    beneficiaryId?: true
    firstName?: true
    middleName?: true
    lastName?: true
    suffix?: true
    birthdate?: true
    age?: true
    sex?: true
    job?: true
    barangay?: true
    healthStation?: true
    ageGroup?: true
    subType?: true
    civilStatus?: true
    contactNumber?: true
    isArchived?: true
  }

  export type BeneficiaryCountAggregateInputType = {
    beneficiaryId?: true
    firstName?: true
    middleName?: true
    lastName?: true
    suffix?: true
    birthdate?: true
    age?: true
    sex?: true
    job?: true
    barangay?: true
    healthStation?: true
    ageGroup?: true
    subType?: true
    civilStatus?: true
    contactNumber?: true
    isArchived?: true
    _all?: true
  }

  export type BeneficiaryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Beneficiary to aggregate.
     */
    where?: BeneficiaryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Beneficiaries to fetch.
     */
    orderBy?: BeneficiaryOrderByWithRelationInput | BeneficiaryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BeneficiaryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Beneficiaries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Beneficiaries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Beneficiaries
    **/
    _count?: true | BeneficiaryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BeneficiaryAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BeneficiarySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BeneficiaryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BeneficiaryMaxAggregateInputType
  }

  export type GetBeneficiaryAggregateType<T extends BeneficiaryAggregateArgs> = {
        [P in keyof T & keyof AggregateBeneficiary]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBeneficiary[P]>
      : GetScalarType<T[P], AggregateBeneficiary[P]>
  }




  export type BeneficiaryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BeneficiaryWhereInput
    orderBy?: BeneficiaryOrderByWithAggregationInput | BeneficiaryOrderByWithAggregationInput[]
    by: BeneficiaryScalarFieldEnum[] | BeneficiaryScalarFieldEnum
    having?: BeneficiaryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BeneficiaryCountAggregateInputType | true
    _avg?: BeneficiaryAvgAggregateInputType
    _sum?: BeneficiarySumAggregateInputType
    _min?: BeneficiaryMinAggregateInputType
    _max?: BeneficiaryMaxAggregateInputType
  }

  export type BeneficiaryGroupByOutputType = {
    beneficiaryId: number
    firstName: string
    middleName: string | null
    lastName: string
    suffix: string | null
    birthdate: Date
    age: string | null
    sex: string
    job: string | null
    barangay: string
    healthStation: string
    ageGroup: string
    subType: string | null
    civilStatus: string
    contactNumber: string | null
    isArchived: boolean
    _count: BeneficiaryCountAggregateOutputType | null
    _avg: BeneficiaryAvgAggregateOutputType | null
    _sum: BeneficiarySumAggregateOutputType | null
    _min: BeneficiaryMinAggregateOutputType | null
    _max: BeneficiaryMaxAggregateOutputType | null
  }

  type GetBeneficiaryGroupByPayload<T extends BeneficiaryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BeneficiaryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BeneficiaryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BeneficiaryGroupByOutputType[P]>
            : GetScalarType<T[P], BeneficiaryGroupByOutputType[P]>
        }
      >
    >


  export type BeneficiarySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    beneficiaryId?: boolean
    firstName?: boolean
    middleName?: boolean
    lastName?: boolean
    suffix?: boolean
    birthdate?: boolean
    age?: boolean
    sex?: boolean
    job?: boolean
    barangay?: boolean
    healthStation?: boolean
    ageGroup?: boolean
    subType?: boolean
    civilStatus?: boolean
    contactNumber?: boolean
    isArchived?: boolean
    activityParticipation?: boolean | Beneficiary$activityParticipationArgs<ExtArgs>
    beneficiaryTypes?: boolean | Beneficiary$beneficiaryTypesArgs<ExtArgs>
    _count?: boolean | BeneficiaryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["beneficiary"]>

  export type BeneficiarySelectScalar = {
    beneficiaryId?: boolean
    firstName?: boolean
    middleName?: boolean
    lastName?: boolean
    suffix?: boolean
    birthdate?: boolean
    age?: boolean
    sex?: boolean
    job?: boolean
    barangay?: boolean
    healthStation?: boolean
    ageGroup?: boolean
    subType?: boolean
    civilStatus?: boolean
    contactNumber?: boolean
    isArchived?: boolean
  }

  export type BeneficiaryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    activityParticipation?: boolean | Beneficiary$activityParticipationArgs<ExtArgs>
    beneficiaryTypes?: boolean | Beneficiary$beneficiaryTypesArgs<ExtArgs>
    _count?: boolean | BeneficiaryCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $BeneficiaryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Beneficiary"
    objects: {
      activityParticipation: Prisma.$ActivityParticipationPayload<ExtArgs>[]
      beneficiaryTypes: Prisma.$BeneficiaryTypesPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      beneficiaryId: number
      firstName: string
      middleName: string | null
      lastName: string
      suffix: string | null
      birthdate: Date
      age: string | null
      sex: string
      job: string | null
      barangay: string
      healthStation: string
      ageGroup: string
      subType: string | null
      civilStatus: string
      contactNumber: string | null
      isArchived: boolean
    }, ExtArgs["result"]["beneficiary"]>
    composites: {}
  }


  type BeneficiaryGetPayload<S extends boolean | null | undefined | BeneficiaryDefaultArgs> = $Result.GetResult<Prisma.$BeneficiaryPayload, S>

  type BeneficiaryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BeneficiaryFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: BeneficiaryCountAggregateInputType | true
    }

  export interface BeneficiaryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Beneficiary'], meta: { name: 'Beneficiary' } }
    /**
     * Find zero or one Beneficiary that matches the filter.
     * @param {BeneficiaryFindUniqueArgs} args - Arguments to find a Beneficiary
     * @example
     * // Get one Beneficiary
     * const beneficiary = await prisma.beneficiary.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends BeneficiaryFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, BeneficiaryFindUniqueArgs<ExtArgs>>
    ): Prisma__BeneficiaryClient<$Result.GetResult<Prisma.$BeneficiaryPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Beneficiary that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {BeneficiaryFindUniqueOrThrowArgs} args - Arguments to find a Beneficiary
     * @example
     * // Get one Beneficiary
     * const beneficiary = await prisma.beneficiary.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends BeneficiaryFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, BeneficiaryFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__BeneficiaryClient<$Result.GetResult<Prisma.$BeneficiaryPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Beneficiary that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BeneficiaryFindFirstArgs} args - Arguments to find a Beneficiary
     * @example
     * // Get one Beneficiary
     * const beneficiary = await prisma.beneficiary.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends BeneficiaryFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, BeneficiaryFindFirstArgs<ExtArgs>>
    ): Prisma__BeneficiaryClient<$Result.GetResult<Prisma.$BeneficiaryPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Beneficiary that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BeneficiaryFindFirstOrThrowArgs} args - Arguments to find a Beneficiary
     * @example
     * // Get one Beneficiary
     * const beneficiary = await prisma.beneficiary.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends BeneficiaryFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, BeneficiaryFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__BeneficiaryClient<$Result.GetResult<Prisma.$BeneficiaryPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Beneficiaries that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BeneficiaryFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Beneficiaries
     * const beneficiaries = await prisma.beneficiary.findMany()
     * 
     * // Get first 10 Beneficiaries
     * const beneficiaries = await prisma.beneficiary.findMany({ take: 10 })
     * 
     * // Only select the `beneficiaryId`
     * const beneficiaryWithBeneficiaryIdOnly = await prisma.beneficiary.findMany({ select: { beneficiaryId: true } })
     * 
    **/
    findMany<T extends BeneficiaryFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BeneficiaryFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BeneficiaryPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Beneficiary.
     * @param {BeneficiaryCreateArgs} args - Arguments to create a Beneficiary.
     * @example
     * // Create one Beneficiary
     * const Beneficiary = await prisma.beneficiary.create({
     *   data: {
     *     // ... data to create a Beneficiary
     *   }
     * })
     * 
    **/
    create<T extends BeneficiaryCreateArgs<ExtArgs>>(
      args: SelectSubset<T, BeneficiaryCreateArgs<ExtArgs>>
    ): Prisma__BeneficiaryClient<$Result.GetResult<Prisma.$BeneficiaryPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Beneficiaries.
     *     @param {BeneficiaryCreateManyArgs} args - Arguments to create many Beneficiaries.
     *     @example
     *     // Create many Beneficiaries
     *     const beneficiary = await prisma.beneficiary.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends BeneficiaryCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BeneficiaryCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Beneficiary.
     * @param {BeneficiaryDeleteArgs} args - Arguments to delete one Beneficiary.
     * @example
     * // Delete one Beneficiary
     * const Beneficiary = await prisma.beneficiary.delete({
     *   where: {
     *     // ... filter to delete one Beneficiary
     *   }
     * })
     * 
    **/
    delete<T extends BeneficiaryDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, BeneficiaryDeleteArgs<ExtArgs>>
    ): Prisma__BeneficiaryClient<$Result.GetResult<Prisma.$BeneficiaryPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Beneficiary.
     * @param {BeneficiaryUpdateArgs} args - Arguments to update one Beneficiary.
     * @example
     * // Update one Beneficiary
     * const beneficiary = await prisma.beneficiary.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends BeneficiaryUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, BeneficiaryUpdateArgs<ExtArgs>>
    ): Prisma__BeneficiaryClient<$Result.GetResult<Prisma.$BeneficiaryPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Beneficiaries.
     * @param {BeneficiaryDeleteManyArgs} args - Arguments to filter Beneficiaries to delete.
     * @example
     * // Delete a few Beneficiaries
     * const { count } = await prisma.beneficiary.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends BeneficiaryDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BeneficiaryDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Beneficiaries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BeneficiaryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Beneficiaries
     * const beneficiary = await prisma.beneficiary.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends BeneficiaryUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, BeneficiaryUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Beneficiary.
     * @param {BeneficiaryUpsertArgs} args - Arguments to update or create a Beneficiary.
     * @example
     * // Update or create a Beneficiary
     * const beneficiary = await prisma.beneficiary.upsert({
     *   create: {
     *     // ... data to create a Beneficiary
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Beneficiary we want to update
     *   }
     * })
    **/
    upsert<T extends BeneficiaryUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, BeneficiaryUpsertArgs<ExtArgs>>
    ): Prisma__BeneficiaryClient<$Result.GetResult<Prisma.$BeneficiaryPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Beneficiaries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BeneficiaryCountArgs} args - Arguments to filter Beneficiaries to count.
     * @example
     * // Count the number of Beneficiaries
     * const count = await prisma.beneficiary.count({
     *   where: {
     *     // ... the filter for the Beneficiaries we want to count
     *   }
     * })
    **/
    count<T extends BeneficiaryCountArgs>(
      args?: Subset<T, BeneficiaryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BeneficiaryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Beneficiary.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BeneficiaryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BeneficiaryAggregateArgs>(args: Subset<T, BeneficiaryAggregateArgs>): Prisma.PrismaPromise<GetBeneficiaryAggregateType<T>>

    /**
     * Group by Beneficiary.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BeneficiaryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BeneficiaryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BeneficiaryGroupByArgs['orderBy'] }
        : { orderBy?: BeneficiaryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BeneficiaryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBeneficiaryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Beneficiary model
   */
  readonly fields: BeneficiaryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Beneficiary.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BeneficiaryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    activityParticipation<T extends Beneficiary$activityParticipationArgs<ExtArgs> = {}>(args?: Subset<T, Beneficiary$activityParticipationArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivityParticipationPayload<ExtArgs>, T, 'findMany'> | Null>;

    beneficiaryTypes<T extends Beneficiary$beneficiaryTypesArgs<ExtArgs> = {}>(args?: Subset<T, Beneficiary$beneficiaryTypesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BeneficiaryTypesPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Beneficiary model
   */ 
  interface BeneficiaryFieldRefs {
    readonly beneficiaryId: FieldRef<"Beneficiary", 'Int'>
    readonly firstName: FieldRef<"Beneficiary", 'String'>
    readonly middleName: FieldRef<"Beneficiary", 'String'>
    readonly lastName: FieldRef<"Beneficiary", 'String'>
    readonly suffix: FieldRef<"Beneficiary", 'String'>
    readonly birthdate: FieldRef<"Beneficiary", 'DateTime'>
    readonly age: FieldRef<"Beneficiary", 'String'>
    readonly sex: FieldRef<"Beneficiary", 'String'>
    readonly job: FieldRef<"Beneficiary", 'String'>
    readonly barangay: FieldRef<"Beneficiary", 'String'>
    readonly healthStation: FieldRef<"Beneficiary", 'String'>
    readonly ageGroup: FieldRef<"Beneficiary", 'String'>
    readonly subType: FieldRef<"Beneficiary", 'String'>
    readonly civilStatus: FieldRef<"Beneficiary", 'String'>
    readonly contactNumber: FieldRef<"Beneficiary", 'String'>
    readonly isArchived: FieldRef<"Beneficiary", 'Boolean'>
  }
    

  // Custom InputTypes

  /**
   * Beneficiary findUnique
   */
  export type BeneficiaryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Beneficiary
     */
    select?: BeneficiarySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BeneficiaryInclude<ExtArgs> | null
    /**
     * Filter, which Beneficiary to fetch.
     */
    where: BeneficiaryWhereUniqueInput
  }


  /**
   * Beneficiary findUniqueOrThrow
   */
  export type BeneficiaryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Beneficiary
     */
    select?: BeneficiarySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BeneficiaryInclude<ExtArgs> | null
    /**
     * Filter, which Beneficiary to fetch.
     */
    where: BeneficiaryWhereUniqueInput
  }


  /**
   * Beneficiary findFirst
   */
  export type BeneficiaryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Beneficiary
     */
    select?: BeneficiarySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BeneficiaryInclude<ExtArgs> | null
    /**
     * Filter, which Beneficiary to fetch.
     */
    where?: BeneficiaryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Beneficiaries to fetch.
     */
    orderBy?: BeneficiaryOrderByWithRelationInput | BeneficiaryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Beneficiaries.
     */
    cursor?: BeneficiaryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Beneficiaries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Beneficiaries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Beneficiaries.
     */
    distinct?: BeneficiaryScalarFieldEnum | BeneficiaryScalarFieldEnum[]
  }


  /**
   * Beneficiary findFirstOrThrow
   */
  export type BeneficiaryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Beneficiary
     */
    select?: BeneficiarySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BeneficiaryInclude<ExtArgs> | null
    /**
     * Filter, which Beneficiary to fetch.
     */
    where?: BeneficiaryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Beneficiaries to fetch.
     */
    orderBy?: BeneficiaryOrderByWithRelationInput | BeneficiaryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Beneficiaries.
     */
    cursor?: BeneficiaryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Beneficiaries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Beneficiaries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Beneficiaries.
     */
    distinct?: BeneficiaryScalarFieldEnum | BeneficiaryScalarFieldEnum[]
  }


  /**
   * Beneficiary findMany
   */
  export type BeneficiaryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Beneficiary
     */
    select?: BeneficiarySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BeneficiaryInclude<ExtArgs> | null
    /**
     * Filter, which Beneficiaries to fetch.
     */
    where?: BeneficiaryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Beneficiaries to fetch.
     */
    orderBy?: BeneficiaryOrderByWithRelationInput | BeneficiaryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Beneficiaries.
     */
    cursor?: BeneficiaryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Beneficiaries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Beneficiaries.
     */
    skip?: number
    distinct?: BeneficiaryScalarFieldEnum | BeneficiaryScalarFieldEnum[]
  }


  /**
   * Beneficiary create
   */
  export type BeneficiaryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Beneficiary
     */
    select?: BeneficiarySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BeneficiaryInclude<ExtArgs> | null
    /**
     * The data needed to create a Beneficiary.
     */
    data: XOR<BeneficiaryCreateInput, BeneficiaryUncheckedCreateInput>
  }


  /**
   * Beneficiary createMany
   */
  export type BeneficiaryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Beneficiaries.
     */
    data: BeneficiaryCreateManyInput | BeneficiaryCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Beneficiary update
   */
  export type BeneficiaryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Beneficiary
     */
    select?: BeneficiarySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BeneficiaryInclude<ExtArgs> | null
    /**
     * The data needed to update a Beneficiary.
     */
    data: XOR<BeneficiaryUpdateInput, BeneficiaryUncheckedUpdateInput>
    /**
     * Choose, which Beneficiary to update.
     */
    where: BeneficiaryWhereUniqueInput
  }


  /**
   * Beneficiary updateMany
   */
  export type BeneficiaryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Beneficiaries.
     */
    data: XOR<BeneficiaryUpdateManyMutationInput, BeneficiaryUncheckedUpdateManyInput>
    /**
     * Filter which Beneficiaries to update
     */
    where?: BeneficiaryWhereInput
  }


  /**
   * Beneficiary upsert
   */
  export type BeneficiaryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Beneficiary
     */
    select?: BeneficiarySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BeneficiaryInclude<ExtArgs> | null
    /**
     * The filter to search for the Beneficiary to update in case it exists.
     */
    where: BeneficiaryWhereUniqueInput
    /**
     * In case the Beneficiary found by the `where` argument doesn't exist, create a new Beneficiary with this data.
     */
    create: XOR<BeneficiaryCreateInput, BeneficiaryUncheckedCreateInput>
    /**
     * In case the Beneficiary was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BeneficiaryUpdateInput, BeneficiaryUncheckedUpdateInput>
  }


  /**
   * Beneficiary delete
   */
  export type BeneficiaryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Beneficiary
     */
    select?: BeneficiarySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BeneficiaryInclude<ExtArgs> | null
    /**
     * Filter which Beneficiary to delete.
     */
    where: BeneficiaryWhereUniqueInput
  }


  /**
   * Beneficiary deleteMany
   */
  export type BeneficiaryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Beneficiaries to delete
     */
    where?: BeneficiaryWhereInput
  }


  /**
   * Beneficiary.activityParticipation
   */
  export type Beneficiary$activityParticipationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityParticipation
     */
    select?: ActivityParticipationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ActivityParticipationInclude<ExtArgs> | null
    where?: ActivityParticipationWhereInput
    orderBy?: ActivityParticipationOrderByWithRelationInput | ActivityParticipationOrderByWithRelationInput[]
    cursor?: ActivityParticipationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ActivityParticipationScalarFieldEnum | ActivityParticipationScalarFieldEnum[]
  }


  /**
   * Beneficiary.beneficiaryTypes
   */
  export type Beneficiary$beneficiaryTypesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BeneficiaryTypes
     */
    select?: BeneficiaryTypesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BeneficiaryTypesInclude<ExtArgs> | null
    where?: BeneficiaryTypesWhereInput
    orderBy?: BeneficiaryTypesOrderByWithRelationInput | BeneficiaryTypesOrderByWithRelationInput[]
    cursor?: BeneficiaryTypesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BeneficiaryTypesScalarFieldEnum | BeneficiaryTypesScalarFieldEnum[]
  }


  /**
   * Beneficiary without action
   */
  export type BeneficiaryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Beneficiary
     */
    select?: BeneficiarySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BeneficiaryInclude<ExtArgs> | null
  }



  /**
   * Model Type
   */

  export type AggregateType = {
    _count: TypeCountAggregateOutputType | null
    _avg: TypeAvgAggregateOutputType | null
    _sum: TypeSumAggregateOutputType | null
    _min: TypeMinAggregateOutputType | null
    _max: TypeMaxAggregateOutputType | null
  }

  export type TypeAvgAggregateOutputType = {
    typeId: number | null
  }

  export type TypeSumAggregateOutputType = {
    typeId: number | null
  }

  export type TypeMinAggregateOutputType = {
    typeId: number | null
    typeName: string | null
    sex: string | null
    isArchived: boolean | null
  }

  export type TypeMaxAggregateOutputType = {
    typeId: number | null
    typeName: string | null
    sex: string | null
    isArchived: boolean | null
  }

  export type TypeCountAggregateOutputType = {
    typeId: number
    typeName: number
    ageGroups: number
    sex: number
    subTypes: number
    isArchived: number
    _all: number
  }


  export type TypeAvgAggregateInputType = {
    typeId?: true
  }

  export type TypeSumAggregateInputType = {
    typeId?: true
  }

  export type TypeMinAggregateInputType = {
    typeId?: true
    typeName?: true
    sex?: true
    isArchived?: true
  }

  export type TypeMaxAggregateInputType = {
    typeId?: true
    typeName?: true
    sex?: true
    isArchived?: true
  }

  export type TypeCountAggregateInputType = {
    typeId?: true
    typeName?: true
    ageGroups?: true
    sex?: true
    subTypes?: true
    isArchived?: true
    _all?: true
  }

  export type TypeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Type to aggregate.
     */
    where?: TypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Types to fetch.
     */
    orderBy?: TypeOrderByWithRelationInput | TypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Types from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Types.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Types
    **/
    _count?: true | TypeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TypeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TypeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TypeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TypeMaxAggregateInputType
  }

  export type GetTypeAggregateType<T extends TypeAggregateArgs> = {
        [P in keyof T & keyof AggregateType]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateType[P]>
      : GetScalarType<T[P], AggregateType[P]>
  }




  export type TypeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TypeWhereInput
    orderBy?: TypeOrderByWithAggregationInput | TypeOrderByWithAggregationInput[]
    by: TypeScalarFieldEnum[] | TypeScalarFieldEnum
    having?: TypeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TypeCountAggregateInputType | true
    _avg?: TypeAvgAggregateInputType
    _sum?: TypeSumAggregateInputType
    _min?: TypeMinAggregateInputType
    _max?: TypeMaxAggregateInputType
  }

  export type TypeGroupByOutputType = {
    typeId: number
    typeName: string
    ageGroups: string[]
    sex: string | null
    subTypes: string[]
    isArchived: boolean
    _count: TypeCountAggregateOutputType | null
    _avg: TypeAvgAggregateOutputType | null
    _sum: TypeSumAggregateOutputType | null
    _min: TypeMinAggregateOutputType | null
    _max: TypeMaxAggregateOutputType | null
  }

  type GetTypeGroupByPayload<T extends TypeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TypeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TypeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TypeGroupByOutputType[P]>
            : GetScalarType<T[P], TypeGroupByOutputType[P]>
        }
      >
    >


  export type TypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    typeId?: boolean
    typeName?: boolean
    ageGroups?: boolean
    sex?: boolean
    subTypes?: boolean
    isArchived?: boolean
    beneficiaryTypes?: boolean | Type$beneficiaryTypesArgs<ExtArgs>
    _count?: boolean | TypeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["type"]>

  export type TypeSelectScalar = {
    typeId?: boolean
    typeName?: boolean
    ageGroups?: boolean
    sex?: boolean
    subTypes?: boolean
    isArchived?: boolean
  }

  export type TypeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    beneficiaryTypes?: boolean | Type$beneficiaryTypesArgs<ExtArgs>
    _count?: boolean | TypeCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $TypePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Type"
    objects: {
      beneficiaryTypes: Prisma.$BeneficiaryTypesPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      typeId: number
      typeName: string
      ageGroups: string[]
      sex: string | null
      subTypes: string[]
      isArchived: boolean
    }, ExtArgs["result"]["type"]>
    composites: {}
  }


  type TypeGetPayload<S extends boolean | null | undefined | TypeDefaultArgs> = $Result.GetResult<Prisma.$TypePayload, S>

  type TypeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TypeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TypeCountAggregateInputType | true
    }

  export interface TypeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Type'], meta: { name: 'Type' } }
    /**
     * Find zero or one Type that matches the filter.
     * @param {TypeFindUniqueArgs} args - Arguments to find a Type
     * @example
     * // Get one Type
     * const type = await prisma.type.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TypeFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, TypeFindUniqueArgs<ExtArgs>>
    ): Prisma__TypeClient<$Result.GetResult<Prisma.$TypePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Type that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {TypeFindUniqueOrThrowArgs} args - Arguments to find a Type
     * @example
     * // Get one Type
     * const type = await prisma.type.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TypeFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TypeFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__TypeClient<$Result.GetResult<Prisma.$TypePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Type that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TypeFindFirstArgs} args - Arguments to find a Type
     * @example
     * // Get one Type
     * const type = await prisma.type.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TypeFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, TypeFindFirstArgs<ExtArgs>>
    ): Prisma__TypeClient<$Result.GetResult<Prisma.$TypePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Type that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TypeFindFirstOrThrowArgs} args - Arguments to find a Type
     * @example
     * // Get one Type
     * const type = await prisma.type.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TypeFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TypeFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__TypeClient<$Result.GetResult<Prisma.$TypePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Types that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TypeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Types
     * const types = await prisma.type.findMany()
     * 
     * // Get first 10 Types
     * const types = await prisma.type.findMany({ take: 10 })
     * 
     * // Only select the `typeId`
     * const typeWithTypeIdOnly = await prisma.type.findMany({ select: { typeId: true } })
     * 
    **/
    findMany<T extends TypeFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TypeFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TypePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Type.
     * @param {TypeCreateArgs} args - Arguments to create a Type.
     * @example
     * // Create one Type
     * const Type = await prisma.type.create({
     *   data: {
     *     // ... data to create a Type
     *   }
     * })
     * 
    **/
    create<T extends TypeCreateArgs<ExtArgs>>(
      args: SelectSubset<T, TypeCreateArgs<ExtArgs>>
    ): Prisma__TypeClient<$Result.GetResult<Prisma.$TypePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Types.
     *     @param {TypeCreateManyArgs} args - Arguments to create many Types.
     *     @example
     *     // Create many Types
     *     const type = await prisma.type.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TypeCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TypeCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Type.
     * @param {TypeDeleteArgs} args - Arguments to delete one Type.
     * @example
     * // Delete one Type
     * const Type = await prisma.type.delete({
     *   where: {
     *     // ... filter to delete one Type
     *   }
     * })
     * 
    **/
    delete<T extends TypeDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, TypeDeleteArgs<ExtArgs>>
    ): Prisma__TypeClient<$Result.GetResult<Prisma.$TypePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Type.
     * @param {TypeUpdateArgs} args - Arguments to update one Type.
     * @example
     * // Update one Type
     * const type = await prisma.type.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TypeUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, TypeUpdateArgs<ExtArgs>>
    ): Prisma__TypeClient<$Result.GetResult<Prisma.$TypePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Types.
     * @param {TypeDeleteManyArgs} args - Arguments to filter Types to delete.
     * @example
     * // Delete a few Types
     * const { count } = await prisma.type.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TypeDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TypeDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Types.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TypeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Types
     * const type = await prisma.type.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TypeUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, TypeUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Type.
     * @param {TypeUpsertArgs} args - Arguments to update or create a Type.
     * @example
     * // Update or create a Type
     * const type = await prisma.type.upsert({
     *   create: {
     *     // ... data to create a Type
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Type we want to update
     *   }
     * })
    **/
    upsert<T extends TypeUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, TypeUpsertArgs<ExtArgs>>
    ): Prisma__TypeClient<$Result.GetResult<Prisma.$TypePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Types.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TypeCountArgs} args - Arguments to filter Types to count.
     * @example
     * // Count the number of Types
     * const count = await prisma.type.count({
     *   where: {
     *     // ... the filter for the Types we want to count
     *   }
     * })
    **/
    count<T extends TypeCountArgs>(
      args?: Subset<T, TypeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TypeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Type.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TypeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TypeAggregateArgs>(args: Subset<T, TypeAggregateArgs>): Prisma.PrismaPromise<GetTypeAggregateType<T>>

    /**
     * Group by Type.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TypeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TypeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TypeGroupByArgs['orderBy'] }
        : { orderBy?: TypeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TypeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTypeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Type model
   */
  readonly fields: TypeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Type.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TypeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    beneficiaryTypes<T extends Type$beneficiaryTypesArgs<ExtArgs> = {}>(args?: Subset<T, Type$beneficiaryTypesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BeneficiaryTypesPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Type model
   */ 
  interface TypeFieldRefs {
    readonly typeId: FieldRef<"Type", 'Int'>
    readonly typeName: FieldRef<"Type", 'String'>
    readonly ageGroups: FieldRef<"Type", 'String[]'>
    readonly sex: FieldRef<"Type", 'String'>
    readonly subTypes: FieldRef<"Type", 'String[]'>
    readonly isArchived: FieldRef<"Type", 'Boolean'>
  }
    

  // Custom InputTypes

  /**
   * Type findUnique
   */
  export type TypeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Type
     */
    select?: TypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TypeInclude<ExtArgs> | null
    /**
     * Filter, which Type to fetch.
     */
    where: TypeWhereUniqueInput
  }


  /**
   * Type findUniqueOrThrow
   */
  export type TypeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Type
     */
    select?: TypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TypeInclude<ExtArgs> | null
    /**
     * Filter, which Type to fetch.
     */
    where: TypeWhereUniqueInput
  }


  /**
   * Type findFirst
   */
  export type TypeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Type
     */
    select?: TypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TypeInclude<ExtArgs> | null
    /**
     * Filter, which Type to fetch.
     */
    where?: TypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Types to fetch.
     */
    orderBy?: TypeOrderByWithRelationInput | TypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Types.
     */
    cursor?: TypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Types from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Types.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Types.
     */
    distinct?: TypeScalarFieldEnum | TypeScalarFieldEnum[]
  }


  /**
   * Type findFirstOrThrow
   */
  export type TypeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Type
     */
    select?: TypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TypeInclude<ExtArgs> | null
    /**
     * Filter, which Type to fetch.
     */
    where?: TypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Types to fetch.
     */
    orderBy?: TypeOrderByWithRelationInput | TypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Types.
     */
    cursor?: TypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Types from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Types.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Types.
     */
    distinct?: TypeScalarFieldEnum | TypeScalarFieldEnum[]
  }


  /**
   * Type findMany
   */
  export type TypeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Type
     */
    select?: TypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TypeInclude<ExtArgs> | null
    /**
     * Filter, which Types to fetch.
     */
    where?: TypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Types to fetch.
     */
    orderBy?: TypeOrderByWithRelationInput | TypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Types.
     */
    cursor?: TypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Types from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Types.
     */
    skip?: number
    distinct?: TypeScalarFieldEnum | TypeScalarFieldEnum[]
  }


  /**
   * Type create
   */
  export type TypeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Type
     */
    select?: TypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TypeInclude<ExtArgs> | null
    /**
     * The data needed to create a Type.
     */
    data: XOR<TypeCreateInput, TypeUncheckedCreateInput>
  }


  /**
   * Type createMany
   */
  export type TypeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Types.
     */
    data: TypeCreateManyInput | TypeCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Type update
   */
  export type TypeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Type
     */
    select?: TypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TypeInclude<ExtArgs> | null
    /**
     * The data needed to update a Type.
     */
    data: XOR<TypeUpdateInput, TypeUncheckedUpdateInput>
    /**
     * Choose, which Type to update.
     */
    where: TypeWhereUniqueInput
  }


  /**
   * Type updateMany
   */
  export type TypeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Types.
     */
    data: XOR<TypeUpdateManyMutationInput, TypeUncheckedUpdateManyInput>
    /**
     * Filter which Types to update
     */
    where?: TypeWhereInput
  }


  /**
   * Type upsert
   */
  export type TypeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Type
     */
    select?: TypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TypeInclude<ExtArgs> | null
    /**
     * The filter to search for the Type to update in case it exists.
     */
    where: TypeWhereUniqueInput
    /**
     * In case the Type found by the `where` argument doesn't exist, create a new Type with this data.
     */
    create: XOR<TypeCreateInput, TypeUncheckedCreateInput>
    /**
     * In case the Type was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TypeUpdateInput, TypeUncheckedUpdateInput>
  }


  /**
   * Type delete
   */
  export type TypeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Type
     */
    select?: TypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TypeInclude<ExtArgs> | null
    /**
     * Filter which Type to delete.
     */
    where: TypeWhereUniqueInput
  }


  /**
   * Type deleteMany
   */
  export type TypeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Types to delete
     */
    where?: TypeWhereInput
  }


  /**
   * Type.beneficiaryTypes
   */
  export type Type$beneficiaryTypesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BeneficiaryTypes
     */
    select?: BeneficiaryTypesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BeneficiaryTypesInclude<ExtArgs> | null
    where?: BeneficiaryTypesWhereInput
    orderBy?: BeneficiaryTypesOrderByWithRelationInput | BeneficiaryTypesOrderByWithRelationInput[]
    cursor?: BeneficiaryTypesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BeneficiaryTypesScalarFieldEnum | BeneficiaryTypesScalarFieldEnum[]
  }


  /**
   * Type without action
   */
  export type TypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Type
     */
    select?: TypeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TypeInclude<ExtArgs> | null
  }



  /**
   * Model BeneficiaryTypes
   */

  export type AggregateBeneficiaryTypes = {
    _count: BeneficiaryTypesCountAggregateOutputType | null
    _avg: BeneficiaryTypesAvgAggregateOutputType | null
    _sum: BeneficiaryTypesSumAggregateOutputType | null
    _min: BeneficiaryTypesMinAggregateOutputType | null
    _max: BeneficiaryTypesMaxAggregateOutputType | null
  }

  export type BeneficiaryTypesAvgAggregateOutputType = {
    beneficiaryId: number | null
    typeId: number | null
  }

  export type BeneficiaryTypesSumAggregateOutputType = {
    beneficiaryId: number | null
    typeId: number | null
  }

  export type BeneficiaryTypesMinAggregateOutputType = {
    beneficiaryId: number | null
    typeId: number | null
  }

  export type BeneficiaryTypesMaxAggregateOutputType = {
    beneficiaryId: number | null
    typeId: number | null
  }

  export type BeneficiaryTypesCountAggregateOutputType = {
    beneficiaryId: number
    typeId: number
    _all: number
  }


  export type BeneficiaryTypesAvgAggregateInputType = {
    beneficiaryId?: true
    typeId?: true
  }

  export type BeneficiaryTypesSumAggregateInputType = {
    beneficiaryId?: true
    typeId?: true
  }

  export type BeneficiaryTypesMinAggregateInputType = {
    beneficiaryId?: true
    typeId?: true
  }

  export type BeneficiaryTypesMaxAggregateInputType = {
    beneficiaryId?: true
    typeId?: true
  }

  export type BeneficiaryTypesCountAggregateInputType = {
    beneficiaryId?: true
    typeId?: true
    _all?: true
  }

  export type BeneficiaryTypesAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BeneficiaryTypes to aggregate.
     */
    where?: BeneficiaryTypesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BeneficiaryTypes to fetch.
     */
    orderBy?: BeneficiaryTypesOrderByWithRelationInput | BeneficiaryTypesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BeneficiaryTypesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BeneficiaryTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BeneficiaryTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BeneficiaryTypes
    **/
    _count?: true | BeneficiaryTypesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BeneficiaryTypesAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BeneficiaryTypesSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BeneficiaryTypesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BeneficiaryTypesMaxAggregateInputType
  }

  export type GetBeneficiaryTypesAggregateType<T extends BeneficiaryTypesAggregateArgs> = {
        [P in keyof T & keyof AggregateBeneficiaryTypes]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBeneficiaryTypes[P]>
      : GetScalarType<T[P], AggregateBeneficiaryTypes[P]>
  }




  export type BeneficiaryTypesGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BeneficiaryTypesWhereInput
    orderBy?: BeneficiaryTypesOrderByWithAggregationInput | BeneficiaryTypesOrderByWithAggregationInput[]
    by: BeneficiaryTypesScalarFieldEnum[] | BeneficiaryTypesScalarFieldEnum
    having?: BeneficiaryTypesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BeneficiaryTypesCountAggregateInputType | true
    _avg?: BeneficiaryTypesAvgAggregateInputType
    _sum?: BeneficiaryTypesSumAggregateInputType
    _min?: BeneficiaryTypesMinAggregateInputType
    _max?: BeneficiaryTypesMaxAggregateInputType
  }

  export type BeneficiaryTypesGroupByOutputType = {
    beneficiaryId: number
    typeId: number
    _count: BeneficiaryTypesCountAggregateOutputType | null
    _avg: BeneficiaryTypesAvgAggregateOutputType | null
    _sum: BeneficiaryTypesSumAggregateOutputType | null
    _min: BeneficiaryTypesMinAggregateOutputType | null
    _max: BeneficiaryTypesMaxAggregateOutputType | null
  }

  type GetBeneficiaryTypesGroupByPayload<T extends BeneficiaryTypesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BeneficiaryTypesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BeneficiaryTypesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BeneficiaryTypesGroupByOutputType[P]>
            : GetScalarType<T[P], BeneficiaryTypesGroupByOutputType[P]>
        }
      >
    >


  export type BeneficiaryTypesSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    beneficiaryId?: boolean
    typeId?: boolean
    beneficiary?: boolean | BeneficiaryDefaultArgs<ExtArgs>
    type?: boolean | TypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["beneficiaryTypes"]>

  export type BeneficiaryTypesSelectScalar = {
    beneficiaryId?: boolean
    typeId?: boolean
  }

  export type BeneficiaryTypesInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    beneficiary?: boolean | BeneficiaryDefaultArgs<ExtArgs>
    type?: boolean | TypeDefaultArgs<ExtArgs>
  }


  export type $BeneficiaryTypesPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BeneficiaryTypes"
    objects: {
      beneficiary: Prisma.$BeneficiaryPayload<ExtArgs>
      type: Prisma.$TypePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      beneficiaryId: number
      typeId: number
    }, ExtArgs["result"]["beneficiaryTypes"]>
    composites: {}
  }


  type BeneficiaryTypesGetPayload<S extends boolean | null | undefined | BeneficiaryTypesDefaultArgs> = $Result.GetResult<Prisma.$BeneficiaryTypesPayload, S>

  type BeneficiaryTypesCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BeneficiaryTypesFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: BeneficiaryTypesCountAggregateInputType | true
    }

  export interface BeneficiaryTypesDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BeneficiaryTypes'], meta: { name: 'BeneficiaryTypes' } }
    /**
     * Find zero or one BeneficiaryTypes that matches the filter.
     * @param {BeneficiaryTypesFindUniqueArgs} args - Arguments to find a BeneficiaryTypes
     * @example
     * // Get one BeneficiaryTypes
     * const beneficiaryTypes = await prisma.beneficiaryTypes.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends BeneficiaryTypesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, BeneficiaryTypesFindUniqueArgs<ExtArgs>>
    ): Prisma__BeneficiaryTypesClient<$Result.GetResult<Prisma.$BeneficiaryTypesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one BeneficiaryTypes that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {BeneficiaryTypesFindUniqueOrThrowArgs} args - Arguments to find a BeneficiaryTypes
     * @example
     * // Get one BeneficiaryTypes
     * const beneficiaryTypes = await prisma.beneficiaryTypes.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends BeneficiaryTypesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, BeneficiaryTypesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__BeneficiaryTypesClient<$Result.GetResult<Prisma.$BeneficiaryTypesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first BeneficiaryTypes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BeneficiaryTypesFindFirstArgs} args - Arguments to find a BeneficiaryTypes
     * @example
     * // Get one BeneficiaryTypes
     * const beneficiaryTypes = await prisma.beneficiaryTypes.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends BeneficiaryTypesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, BeneficiaryTypesFindFirstArgs<ExtArgs>>
    ): Prisma__BeneficiaryTypesClient<$Result.GetResult<Prisma.$BeneficiaryTypesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first BeneficiaryTypes that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BeneficiaryTypesFindFirstOrThrowArgs} args - Arguments to find a BeneficiaryTypes
     * @example
     * // Get one BeneficiaryTypes
     * const beneficiaryTypes = await prisma.beneficiaryTypes.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends BeneficiaryTypesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, BeneficiaryTypesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__BeneficiaryTypesClient<$Result.GetResult<Prisma.$BeneficiaryTypesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more BeneficiaryTypes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BeneficiaryTypesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BeneficiaryTypes
     * const beneficiaryTypes = await prisma.beneficiaryTypes.findMany()
     * 
     * // Get first 10 BeneficiaryTypes
     * const beneficiaryTypes = await prisma.beneficiaryTypes.findMany({ take: 10 })
     * 
     * // Only select the `beneficiaryId`
     * const beneficiaryTypesWithBeneficiaryIdOnly = await prisma.beneficiaryTypes.findMany({ select: { beneficiaryId: true } })
     * 
    **/
    findMany<T extends BeneficiaryTypesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BeneficiaryTypesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BeneficiaryTypesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a BeneficiaryTypes.
     * @param {BeneficiaryTypesCreateArgs} args - Arguments to create a BeneficiaryTypes.
     * @example
     * // Create one BeneficiaryTypes
     * const BeneficiaryTypes = await prisma.beneficiaryTypes.create({
     *   data: {
     *     // ... data to create a BeneficiaryTypes
     *   }
     * })
     * 
    **/
    create<T extends BeneficiaryTypesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, BeneficiaryTypesCreateArgs<ExtArgs>>
    ): Prisma__BeneficiaryTypesClient<$Result.GetResult<Prisma.$BeneficiaryTypesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many BeneficiaryTypes.
     *     @param {BeneficiaryTypesCreateManyArgs} args - Arguments to create many BeneficiaryTypes.
     *     @example
     *     // Create many BeneficiaryTypes
     *     const beneficiaryTypes = await prisma.beneficiaryTypes.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends BeneficiaryTypesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BeneficiaryTypesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a BeneficiaryTypes.
     * @param {BeneficiaryTypesDeleteArgs} args - Arguments to delete one BeneficiaryTypes.
     * @example
     * // Delete one BeneficiaryTypes
     * const BeneficiaryTypes = await prisma.beneficiaryTypes.delete({
     *   where: {
     *     // ... filter to delete one BeneficiaryTypes
     *   }
     * })
     * 
    **/
    delete<T extends BeneficiaryTypesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, BeneficiaryTypesDeleteArgs<ExtArgs>>
    ): Prisma__BeneficiaryTypesClient<$Result.GetResult<Prisma.$BeneficiaryTypesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one BeneficiaryTypes.
     * @param {BeneficiaryTypesUpdateArgs} args - Arguments to update one BeneficiaryTypes.
     * @example
     * // Update one BeneficiaryTypes
     * const beneficiaryTypes = await prisma.beneficiaryTypes.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends BeneficiaryTypesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, BeneficiaryTypesUpdateArgs<ExtArgs>>
    ): Prisma__BeneficiaryTypesClient<$Result.GetResult<Prisma.$BeneficiaryTypesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more BeneficiaryTypes.
     * @param {BeneficiaryTypesDeleteManyArgs} args - Arguments to filter BeneficiaryTypes to delete.
     * @example
     * // Delete a few BeneficiaryTypes
     * const { count } = await prisma.beneficiaryTypes.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends BeneficiaryTypesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BeneficiaryTypesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BeneficiaryTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BeneficiaryTypesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BeneficiaryTypes
     * const beneficiaryTypes = await prisma.beneficiaryTypes.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends BeneficiaryTypesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, BeneficiaryTypesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one BeneficiaryTypes.
     * @param {BeneficiaryTypesUpsertArgs} args - Arguments to update or create a BeneficiaryTypes.
     * @example
     * // Update or create a BeneficiaryTypes
     * const beneficiaryTypes = await prisma.beneficiaryTypes.upsert({
     *   create: {
     *     // ... data to create a BeneficiaryTypes
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BeneficiaryTypes we want to update
     *   }
     * })
    **/
    upsert<T extends BeneficiaryTypesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, BeneficiaryTypesUpsertArgs<ExtArgs>>
    ): Prisma__BeneficiaryTypesClient<$Result.GetResult<Prisma.$BeneficiaryTypesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of BeneficiaryTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BeneficiaryTypesCountArgs} args - Arguments to filter BeneficiaryTypes to count.
     * @example
     * // Count the number of BeneficiaryTypes
     * const count = await prisma.beneficiaryTypes.count({
     *   where: {
     *     // ... the filter for the BeneficiaryTypes we want to count
     *   }
     * })
    **/
    count<T extends BeneficiaryTypesCountArgs>(
      args?: Subset<T, BeneficiaryTypesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BeneficiaryTypesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BeneficiaryTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BeneficiaryTypesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BeneficiaryTypesAggregateArgs>(args: Subset<T, BeneficiaryTypesAggregateArgs>): Prisma.PrismaPromise<GetBeneficiaryTypesAggregateType<T>>

    /**
     * Group by BeneficiaryTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BeneficiaryTypesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BeneficiaryTypesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BeneficiaryTypesGroupByArgs['orderBy'] }
        : { orderBy?: BeneficiaryTypesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BeneficiaryTypesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBeneficiaryTypesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BeneficiaryTypes model
   */
  readonly fields: BeneficiaryTypesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BeneficiaryTypes.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BeneficiaryTypesClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    beneficiary<T extends BeneficiaryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BeneficiaryDefaultArgs<ExtArgs>>): Prisma__BeneficiaryClient<$Result.GetResult<Prisma.$BeneficiaryPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    type<T extends TypeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TypeDefaultArgs<ExtArgs>>): Prisma__TypeClient<$Result.GetResult<Prisma.$TypePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the BeneficiaryTypes model
   */ 
  interface BeneficiaryTypesFieldRefs {
    readonly beneficiaryId: FieldRef<"BeneficiaryTypes", 'Int'>
    readonly typeId: FieldRef<"BeneficiaryTypes", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * BeneficiaryTypes findUnique
   */
  export type BeneficiaryTypesFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BeneficiaryTypes
     */
    select?: BeneficiaryTypesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BeneficiaryTypesInclude<ExtArgs> | null
    /**
     * Filter, which BeneficiaryTypes to fetch.
     */
    where: BeneficiaryTypesWhereUniqueInput
  }


  /**
   * BeneficiaryTypes findUniqueOrThrow
   */
  export type BeneficiaryTypesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BeneficiaryTypes
     */
    select?: BeneficiaryTypesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BeneficiaryTypesInclude<ExtArgs> | null
    /**
     * Filter, which BeneficiaryTypes to fetch.
     */
    where: BeneficiaryTypesWhereUniqueInput
  }


  /**
   * BeneficiaryTypes findFirst
   */
  export type BeneficiaryTypesFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BeneficiaryTypes
     */
    select?: BeneficiaryTypesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BeneficiaryTypesInclude<ExtArgs> | null
    /**
     * Filter, which BeneficiaryTypes to fetch.
     */
    where?: BeneficiaryTypesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BeneficiaryTypes to fetch.
     */
    orderBy?: BeneficiaryTypesOrderByWithRelationInput | BeneficiaryTypesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BeneficiaryTypes.
     */
    cursor?: BeneficiaryTypesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BeneficiaryTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BeneficiaryTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BeneficiaryTypes.
     */
    distinct?: BeneficiaryTypesScalarFieldEnum | BeneficiaryTypesScalarFieldEnum[]
  }


  /**
   * BeneficiaryTypes findFirstOrThrow
   */
  export type BeneficiaryTypesFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BeneficiaryTypes
     */
    select?: BeneficiaryTypesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BeneficiaryTypesInclude<ExtArgs> | null
    /**
     * Filter, which BeneficiaryTypes to fetch.
     */
    where?: BeneficiaryTypesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BeneficiaryTypes to fetch.
     */
    orderBy?: BeneficiaryTypesOrderByWithRelationInput | BeneficiaryTypesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BeneficiaryTypes.
     */
    cursor?: BeneficiaryTypesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BeneficiaryTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BeneficiaryTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BeneficiaryTypes.
     */
    distinct?: BeneficiaryTypesScalarFieldEnum | BeneficiaryTypesScalarFieldEnum[]
  }


  /**
   * BeneficiaryTypes findMany
   */
  export type BeneficiaryTypesFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BeneficiaryTypes
     */
    select?: BeneficiaryTypesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BeneficiaryTypesInclude<ExtArgs> | null
    /**
     * Filter, which BeneficiaryTypes to fetch.
     */
    where?: BeneficiaryTypesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BeneficiaryTypes to fetch.
     */
    orderBy?: BeneficiaryTypesOrderByWithRelationInput | BeneficiaryTypesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BeneficiaryTypes.
     */
    cursor?: BeneficiaryTypesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BeneficiaryTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BeneficiaryTypes.
     */
    skip?: number
    distinct?: BeneficiaryTypesScalarFieldEnum | BeneficiaryTypesScalarFieldEnum[]
  }


  /**
   * BeneficiaryTypes create
   */
  export type BeneficiaryTypesCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BeneficiaryTypes
     */
    select?: BeneficiaryTypesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BeneficiaryTypesInclude<ExtArgs> | null
    /**
     * The data needed to create a BeneficiaryTypes.
     */
    data: XOR<BeneficiaryTypesCreateInput, BeneficiaryTypesUncheckedCreateInput>
  }


  /**
   * BeneficiaryTypes createMany
   */
  export type BeneficiaryTypesCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BeneficiaryTypes.
     */
    data: BeneficiaryTypesCreateManyInput | BeneficiaryTypesCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * BeneficiaryTypes update
   */
  export type BeneficiaryTypesUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BeneficiaryTypes
     */
    select?: BeneficiaryTypesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BeneficiaryTypesInclude<ExtArgs> | null
    /**
     * The data needed to update a BeneficiaryTypes.
     */
    data: XOR<BeneficiaryTypesUpdateInput, BeneficiaryTypesUncheckedUpdateInput>
    /**
     * Choose, which BeneficiaryTypes to update.
     */
    where: BeneficiaryTypesWhereUniqueInput
  }


  /**
   * BeneficiaryTypes updateMany
   */
  export type BeneficiaryTypesUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BeneficiaryTypes.
     */
    data: XOR<BeneficiaryTypesUpdateManyMutationInput, BeneficiaryTypesUncheckedUpdateManyInput>
    /**
     * Filter which BeneficiaryTypes to update
     */
    where?: BeneficiaryTypesWhereInput
  }


  /**
   * BeneficiaryTypes upsert
   */
  export type BeneficiaryTypesUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BeneficiaryTypes
     */
    select?: BeneficiaryTypesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BeneficiaryTypesInclude<ExtArgs> | null
    /**
     * The filter to search for the BeneficiaryTypes to update in case it exists.
     */
    where: BeneficiaryTypesWhereUniqueInput
    /**
     * In case the BeneficiaryTypes found by the `where` argument doesn't exist, create a new BeneficiaryTypes with this data.
     */
    create: XOR<BeneficiaryTypesCreateInput, BeneficiaryTypesUncheckedCreateInput>
    /**
     * In case the BeneficiaryTypes was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BeneficiaryTypesUpdateInput, BeneficiaryTypesUncheckedUpdateInput>
  }


  /**
   * BeneficiaryTypes delete
   */
  export type BeneficiaryTypesDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BeneficiaryTypes
     */
    select?: BeneficiaryTypesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BeneficiaryTypesInclude<ExtArgs> | null
    /**
     * Filter which BeneficiaryTypes to delete.
     */
    where: BeneficiaryTypesWhereUniqueInput
  }


  /**
   * BeneficiaryTypes deleteMany
   */
  export type BeneficiaryTypesDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BeneficiaryTypes to delete
     */
    where?: BeneficiaryTypesWhereInput
  }


  /**
   * BeneficiaryTypes without action
   */
  export type BeneficiaryTypesDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BeneficiaryTypes
     */
    select?: BeneficiaryTypesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BeneficiaryTypesInclude<ExtArgs> | null
  }



  /**
   * Model Activity
   */

  export type AggregateActivity = {
    _count: ActivityCountAggregateOutputType | null
    _avg: ActivityAvgAggregateOutputType | null
    _sum: ActivitySumAggregateOutputType | null
    _min: ActivityMinAggregateOutputType | null
    _max: ActivityMaxAggregateOutputType | null
  }

  export type ActivityAvgAggregateOutputType = {
    activityId: number | null
    createdBy: number | null
  }

  export type ActivitySumAggregateOutputType = {
    activityId: number | null
    createdBy: number | null
  }

  export type ActivityMinAggregateOutputType = {
    activityId: number | null
    title: string | null
    description: string | null
    activityDate: Date | null
    createdBy: number | null
    createdAt: Date | null
    isArchived: boolean | null
    filename: string | null
    filepath: string | null
  }

  export type ActivityMaxAggregateOutputType = {
    activityId: number | null
    title: string | null
    description: string | null
    activityDate: Date | null
    createdBy: number | null
    createdAt: Date | null
    isArchived: boolean | null
    filename: string | null
    filepath: string | null
  }

  export type ActivityCountAggregateOutputType = {
    activityId: number
    title: number
    description: number
    activityDate: number
    createdBy: number
    createdAt: number
    isArchived: number
    filename: number
    filepath: number
    _all: number
  }


  export type ActivityAvgAggregateInputType = {
    activityId?: true
    createdBy?: true
  }

  export type ActivitySumAggregateInputType = {
    activityId?: true
    createdBy?: true
  }

  export type ActivityMinAggregateInputType = {
    activityId?: true
    title?: true
    description?: true
    activityDate?: true
    createdBy?: true
    createdAt?: true
    isArchived?: true
    filename?: true
    filepath?: true
  }

  export type ActivityMaxAggregateInputType = {
    activityId?: true
    title?: true
    description?: true
    activityDate?: true
    createdBy?: true
    createdAt?: true
    isArchived?: true
    filename?: true
    filepath?: true
  }

  export type ActivityCountAggregateInputType = {
    activityId?: true
    title?: true
    description?: true
    activityDate?: true
    createdBy?: true
    createdAt?: true
    isArchived?: true
    filename?: true
    filepath?: true
    _all?: true
  }

  export type ActivityAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Activity to aggregate.
     */
    where?: ActivityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Activities to fetch.
     */
    orderBy?: ActivityOrderByWithRelationInput | ActivityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ActivityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Activities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Activities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Activities
    **/
    _count?: true | ActivityCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ActivityAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ActivitySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ActivityMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ActivityMaxAggregateInputType
  }

  export type GetActivityAggregateType<T extends ActivityAggregateArgs> = {
        [P in keyof T & keyof AggregateActivity]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateActivity[P]>
      : GetScalarType<T[P], AggregateActivity[P]>
  }




  export type ActivityGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ActivityWhereInput
    orderBy?: ActivityOrderByWithAggregationInput | ActivityOrderByWithAggregationInput[]
    by: ActivityScalarFieldEnum[] | ActivityScalarFieldEnum
    having?: ActivityScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ActivityCountAggregateInputType | true
    _avg?: ActivityAvgAggregateInputType
    _sum?: ActivitySumAggregateInputType
    _min?: ActivityMinAggregateInputType
    _max?: ActivityMaxAggregateInputType
  }

  export type ActivityGroupByOutputType = {
    activityId: number
    title: string
    description: string | null
    activityDate: Date
    createdBy: number
    createdAt: Date
    isArchived: boolean
    filename: string | null
    filepath: string | null
    _count: ActivityCountAggregateOutputType | null
    _avg: ActivityAvgAggregateOutputType | null
    _sum: ActivitySumAggregateOutputType | null
    _min: ActivityMinAggregateOutputType | null
    _max: ActivityMaxAggregateOutputType | null
  }

  type GetActivityGroupByPayload<T extends ActivityGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ActivityGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ActivityGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ActivityGroupByOutputType[P]>
            : GetScalarType<T[P], ActivityGroupByOutputType[P]>
        }
      >
    >


  export type ActivitySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    activityId?: boolean
    title?: boolean
    description?: boolean
    activityDate?: boolean
    createdBy?: boolean
    createdAt?: boolean
    isArchived?: boolean
    filename?: boolean
    filepath?: boolean
    creator?: boolean | UserDefaultArgs<ExtArgs>
    participants?: boolean | Activity$participantsArgs<ExtArgs>
    documentations?: boolean | Activity$documentationsArgs<ExtArgs>
    _count?: boolean | ActivityCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["activity"]>

  export type ActivitySelectScalar = {
    activityId?: boolean
    title?: boolean
    description?: boolean
    activityDate?: boolean
    createdBy?: boolean
    createdAt?: boolean
    isArchived?: boolean
    filename?: boolean
    filepath?: boolean
  }

  export type ActivityInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    creator?: boolean | UserDefaultArgs<ExtArgs>
    participants?: boolean | Activity$participantsArgs<ExtArgs>
    documentations?: boolean | Activity$documentationsArgs<ExtArgs>
    _count?: boolean | ActivityCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $ActivityPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Activity"
    objects: {
      creator: Prisma.$UserPayload<ExtArgs>
      participants: Prisma.$ActivityParticipationPayload<ExtArgs>[]
      documentations: Prisma.$ActivityDocumentationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      activityId: number
      title: string
      description: string | null
      activityDate: Date
      createdBy: number
      createdAt: Date
      isArchived: boolean
      filename: string | null
      filepath: string | null
    }, ExtArgs["result"]["activity"]>
    composites: {}
  }


  type ActivityGetPayload<S extends boolean | null | undefined | ActivityDefaultArgs> = $Result.GetResult<Prisma.$ActivityPayload, S>

  type ActivityCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ActivityFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ActivityCountAggregateInputType | true
    }

  export interface ActivityDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Activity'], meta: { name: 'Activity' } }
    /**
     * Find zero or one Activity that matches the filter.
     * @param {ActivityFindUniqueArgs} args - Arguments to find a Activity
     * @example
     * // Get one Activity
     * const activity = await prisma.activity.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ActivityFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ActivityFindUniqueArgs<ExtArgs>>
    ): Prisma__ActivityClient<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Activity that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ActivityFindUniqueOrThrowArgs} args - Arguments to find a Activity
     * @example
     * // Get one Activity
     * const activity = await prisma.activity.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ActivityFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ActivityFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ActivityClient<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Activity that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityFindFirstArgs} args - Arguments to find a Activity
     * @example
     * // Get one Activity
     * const activity = await prisma.activity.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ActivityFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ActivityFindFirstArgs<ExtArgs>>
    ): Prisma__ActivityClient<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Activity that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityFindFirstOrThrowArgs} args - Arguments to find a Activity
     * @example
     * // Get one Activity
     * const activity = await prisma.activity.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ActivityFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ActivityFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ActivityClient<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Activities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Activities
     * const activities = await prisma.activity.findMany()
     * 
     * // Get first 10 Activities
     * const activities = await prisma.activity.findMany({ take: 10 })
     * 
     * // Only select the `activityId`
     * const activityWithActivityIdOnly = await prisma.activity.findMany({ select: { activityId: true } })
     * 
    **/
    findMany<T extends ActivityFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ActivityFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Activity.
     * @param {ActivityCreateArgs} args - Arguments to create a Activity.
     * @example
     * // Create one Activity
     * const Activity = await prisma.activity.create({
     *   data: {
     *     // ... data to create a Activity
     *   }
     * })
     * 
    **/
    create<T extends ActivityCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ActivityCreateArgs<ExtArgs>>
    ): Prisma__ActivityClient<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Activities.
     *     @param {ActivityCreateManyArgs} args - Arguments to create many Activities.
     *     @example
     *     // Create many Activities
     *     const activity = await prisma.activity.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ActivityCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ActivityCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Activity.
     * @param {ActivityDeleteArgs} args - Arguments to delete one Activity.
     * @example
     * // Delete one Activity
     * const Activity = await prisma.activity.delete({
     *   where: {
     *     // ... filter to delete one Activity
     *   }
     * })
     * 
    **/
    delete<T extends ActivityDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ActivityDeleteArgs<ExtArgs>>
    ): Prisma__ActivityClient<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Activity.
     * @param {ActivityUpdateArgs} args - Arguments to update one Activity.
     * @example
     * // Update one Activity
     * const activity = await prisma.activity.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ActivityUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ActivityUpdateArgs<ExtArgs>>
    ): Prisma__ActivityClient<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Activities.
     * @param {ActivityDeleteManyArgs} args - Arguments to filter Activities to delete.
     * @example
     * // Delete a few Activities
     * const { count } = await prisma.activity.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ActivityDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ActivityDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Activities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Activities
     * const activity = await prisma.activity.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ActivityUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ActivityUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Activity.
     * @param {ActivityUpsertArgs} args - Arguments to update or create a Activity.
     * @example
     * // Update or create a Activity
     * const activity = await prisma.activity.upsert({
     *   create: {
     *     // ... data to create a Activity
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Activity we want to update
     *   }
     * })
    **/
    upsert<T extends ActivityUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ActivityUpsertArgs<ExtArgs>>
    ): Prisma__ActivityClient<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Activities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityCountArgs} args - Arguments to filter Activities to count.
     * @example
     * // Count the number of Activities
     * const count = await prisma.activity.count({
     *   where: {
     *     // ... the filter for the Activities we want to count
     *   }
     * })
    **/
    count<T extends ActivityCountArgs>(
      args?: Subset<T, ActivityCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ActivityCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Activity.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ActivityAggregateArgs>(args: Subset<T, ActivityAggregateArgs>): Prisma.PrismaPromise<GetActivityAggregateType<T>>

    /**
     * Group by Activity.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ActivityGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ActivityGroupByArgs['orderBy'] }
        : { orderBy?: ActivityGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ActivityGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetActivityGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Activity model
   */
  readonly fields: ActivityFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Activity.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ActivityClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    creator<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    participants<T extends Activity$participantsArgs<ExtArgs> = {}>(args?: Subset<T, Activity$participantsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivityParticipationPayload<ExtArgs>, T, 'findMany'> | Null>;

    documentations<T extends Activity$documentationsArgs<ExtArgs> = {}>(args?: Subset<T, Activity$documentationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivityDocumentationPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Activity model
   */ 
  interface ActivityFieldRefs {
    readonly activityId: FieldRef<"Activity", 'Int'>
    readonly title: FieldRef<"Activity", 'String'>
    readonly description: FieldRef<"Activity", 'String'>
    readonly activityDate: FieldRef<"Activity", 'DateTime'>
    readonly createdBy: FieldRef<"Activity", 'Int'>
    readonly createdAt: FieldRef<"Activity", 'DateTime'>
    readonly isArchived: FieldRef<"Activity", 'Boolean'>
    readonly filename: FieldRef<"Activity", 'String'>
    readonly filepath: FieldRef<"Activity", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Activity findUnique
   */
  export type ActivityFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ActivityInclude<ExtArgs> | null
    /**
     * Filter, which Activity to fetch.
     */
    where: ActivityWhereUniqueInput
  }


  /**
   * Activity findUniqueOrThrow
   */
  export type ActivityFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ActivityInclude<ExtArgs> | null
    /**
     * Filter, which Activity to fetch.
     */
    where: ActivityWhereUniqueInput
  }


  /**
   * Activity findFirst
   */
  export type ActivityFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ActivityInclude<ExtArgs> | null
    /**
     * Filter, which Activity to fetch.
     */
    where?: ActivityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Activities to fetch.
     */
    orderBy?: ActivityOrderByWithRelationInput | ActivityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Activities.
     */
    cursor?: ActivityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Activities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Activities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Activities.
     */
    distinct?: ActivityScalarFieldEnum | ActivityScalarFieldEnum[]
  }


  /**
   * Activity findFirstOrThrow
   */
  export type ActivityFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ActivityInclude<ExtArgs> | null
    /**
     * Filter, which Activity to fetch.
     */
    where?: ActivityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Activities to fetch.
     */
    orderBy?: ActivityOrderByWithRelationInput | ActivityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Activities.
     */
    cursor?: ActivityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Activities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Activities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Activities.
     */
    distinct?: ActivityScalarFieldEnum | ActivityScalarFieldEnum[]
  }


  /**
   * Activity findMany
   */
  export type ActivityFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ActivityInclude<ExtArgs> | null
    /**
     * Filter, which Activities to fetch.
     */
    where?: ActivityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Activities to fetch.
     */
    orderBy?: ActivityOrderByWithRelationInput | ActivityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Activities.
     */
    cursor?: ActivityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Activities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Activities.
     */
    skip?: number
    distinct?: ActivityScalarFieldEnum | ActivityScalarFieldEnum[]
  }


  /**
   * Activity create
   */
  export type ActivityCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ActivityInclude<ExtArgs> | null
    /**
     * The data needed to create a Activity.
     */
    data: XOR<ActivityCreateInput, ActivityUncheckedCreateInput>
  }


  /**
   * Activity createMany
   */
  export type ActivityCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Activities.
     */
    data: ActivityCreateManyInput | ActivityCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Activity update
   */
  export type ActivityUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ActivityInclude<ExtArgs> | null
    /**
     * The data needed to update a Activity.
     */
    data: XOR<ActivityUpdateInput, ActivityUncheckedUpdateInput>
    /**
     * Choose, which Activity to update.
     */
    where: ActivityWhereUniqueInput
  }


  /**
   * Activity updateMany
   */
  export type ActivityUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Activities.
     */
    data: XOR<ActivityUpdateManyMutationInput, ActivityUncheckedUpdateManyInput>
    /**
     * Filter which Activities to update
     */
    where?: ActivityWhereInput
  }


  /**
   * Activity upsert
   */
  export type ActivityUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ActivityInclude<ExtArgs> | null
    /**
     * The filter to search for the Activity to update in case it exists.
     */
    where: ActivityWhereUniqueInput
    /**
     * In case the Activity found by the `where` argument doesn't exist, create a new Activity with this data.
     */
    create: XOR<ActivityCreateInput, ActivityUncheckedCreateInput>
    /**
     * In case the Activity was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ActivityUpdateInput, ActivityUncheckedUpdateInput>
  }


  /**
   * Activity delete
   */
  export type ActivityDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ActivityInclude<ExtArgs> | null
    /**
     * Filter which Activity to delete.
     */
    where: ActivityWhereUniqueInput
  }


  /**
   * Activity deleteMany
   */
  export type ActivityDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Activities to delete
     */
    where?: ActivityWhereInput
  }


  /**
   * Activity.participants
   */
  export type Activity$participantsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityParticipation
     */
    select?: ActivityParticipationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ActivityParticipationInclude<ExtArgs> | null
    where?: ActivityParticipationWhereInput
    orderBy?: ActivityParticipationOrderByWithRelationInput | ActivityParticipationOrderByWithRelationInput[]
    cursor?: ActivityParticipationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ActivityParticipationScalarFieldEnum | ActivityParticipationScalarFieldEnum[]
  }


  /**
   * Activity.documentations
   */
  export type Activity$documentationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityDocumentation
     */
    select?: ActivityDocumentationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ActivityDocumentationInclude<ExtArgs> | null
    where?: ActivityDocumentationWhereInput
    orderBy?: ActivityDocumentationOrderByWithRelationInput | ActivityDocumentationOrderByWithRelationInput[]
    cursor?: ActivityDocumentationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ActivityDocumentationScalarFieldEnum | ActivityDocumentationScalarFieldEnum[]
  }


  /**
   * Activity without action
   */
  export type ActivityDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Activity
     */
    select?: ActivitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ActivityInclude<ExtArgs> | null
  }



  /**
   * Model ActivityDocumentation
   */

  export type AggregateActivityDocumentation = {
    _count: ActivityDocumentationCountAggregateOutputType | null
    _avg: ActivityDocumentationAvgAggregateOutputType | null
    _sum: ActivityDocumentationSumAggregateOutputType | null
    _min: ActivityDocumentationMinAggregateOutputType | null
    _max: ActivityDocumentationMaxAggregateOutputType | null
  }

  export type ActivityDocumentationAvgAggregateOutputType = {
    documentationId: number | null
    activityId: number | null
  }

  export type ActivityDocumentationSumAggregateOutputType = {
    documentationId: number | null
    activityId: number | null
  }

  export type ActivityDocumentationMinAggregateOutputType = {
    documentationId: number | null
    activityId: number | null
    filename: string | null
    filepath: string | null
    uploadedAt: Date | null
  }

  export type ActivityDocumentationMaxAggregateOutputType = {
    documentationId: number | null
    activityId: number | null
    filename: string | null
    filepath: string | null
    uploadedAt: Date | null
  }

  export type ActivityDocumentationCountAggregateOutputType = {
    documentationId: number
    activityId: number
    filename: number
    filepath: number
    uploadedAt: number
    _all: number
  }


  export type ActivityDocumentationAvgAggregateInputType = {
    documentationId?: true
    activityId?: true
  }

  export type ActivityDocumentationSumAggregateInputType = {
    documentationId?: true
    activityId?: true
  }

  export type ActivityDocumentationMinAggregateInputType = {
    documentationId?: true
    activityId?: true
    filename?: true
    filepath?: true
    uploadedAt?: true
  }

  export type ActivityDocumentationMaxAggregateInputType = {
    documentationId?: true
    activityId?: true
    filename?: true
    filepath?: true
    uploadedAt?: true
  }

  export type ActivityDocumentationCountAggregateInputType = {
    documentationId?: true
    activityId?: true
    filename?: true
    filepath?: true
    uploadedAt?: true
    _all?: true
  }

  export type ActivityDocumentationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ActivityDocumentation to aggregate.
     */
    where?: ActivityDocumentationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActivityDocumentations to fetch.
     */
    orderBy?: ActivityDocumentationOrderByWithRelationInput | ActivityDocumentationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ActivityDocumentationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActivityDocumentations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActivityDocumentations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ActivityDocumentations
    **/
    _count?: true | ActivityDocumentationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ActivityDocumentationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ActivityDocumentationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ActivityDocumentationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ActivityDocumentationMaxAggregateInputType
  }

  export type GetActivityDocumentationAggregateType<T extends ActivityDocumentationAggregateArgs> = {
        [P in keyof T & keyof AggregateActivityDocumentation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateActivityDocumentation[P]>
      : GetScalarType<T[P], AggregateActivityDocumentation[P]>
  }




  export type ActivityDocumentationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ActivityDocumentationWhereInput
    orderBy?: ActivityDocumentationOrderByWithAggregationInput | ActivityDocumentationOrderByWithAggregationInput[]
    by: ActivityDocumentationScalarFieldEnum[] | ActivityDocumentationScalarFieldEnum
    having?: ActivityDocumentationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ActivityDocumentationCountAggregateInputType | true
    _avg?: ActivityDocumentationAvgAggregateInputType
    _sum?: ActivityDocumentationSumAggregateInputType
    _min?: ActivityDocumentationMinAggregateInputType
    _max?: ActivityDocumentationMaxAggregateInputType
  }

  export type ActivityDocumentationGroupByOutputType = {
    documentationId: number
    activityId: number
    filename: string
    filepath: string
    uploadedAt: Date
    _count: ActivityDocumentationCountAggregateOutputType | null
    _avg: ActivityDocumentationAvgAggregateOutputType | null
    _sum: ActivityDocumentationSumAggregateOutputType | null
    _min: ActivityDocumentationMinAggregateOutputType | null
    _max: ActivityDocumentationMaxAggregateOutputType | null
  }

  type GetActivityDocumentationGroupByPayload<T extends ActivityDocumentationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ActivityDocumentationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ActivityDocumentationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ActivityDocumentationGroupByOutputType[P]>
            : GetScalarType<T[P], ActivityDocumentationGroupByOutputType[P]>
        }
      >
    >


  export type ActivityDocumentationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    documentationId?: boolean
    activityId?: boolean
    filename?: boolean
    filepath?: boolean
    uploadedAt?: boolean
    activity?: boolean | ActivityDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["activityDocumentation"]>

  export type ActivityDocumentationSelectScalar = {
    documentationId?: boolean
    activityId?: boolean
    filename?: boolean
    filepath?: boolean
    uploadedAt?: boolean
  }

  export type ActivityDocumentationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    activity?: boolean | ActivityDefaultArgs<ExtArgs>
  }


  export type $ActivityDocumentationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ActivityDocumentation"
    objects: {
      activity: Prisma.$ActivityPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      documentationId: number
      activityId: number
      filename: string
      filepath: string
      uploadedAt: Date
    }, ExtArgs["result"]["activityDocumentation"]>
    composites: {}
  }


  type ActivityDocumentationGetPayload<S extends boolean | null | undefined | ActivityDocumentationDefaultArgs> = $Result.GetResult<Prisma.$ActivityDocumentationPayload, S>

  type ActivityDocumentationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ActivityDocumentationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ActivityDocumentationCountAggregateInputType | true
    }

  export interface ActivityDocumentationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ActivityDocumentation'], meta: { name: 'ActivityDocumentation' } }
    /**
     * Find zero or one ActivityDocumentation that matches the filter.
     * @param {ActivityDocumentationFindUniqueArgs} args - Arguments to find a ActivityDocumentation
     * @example
     * // Get one ActivityDocumentation
     * const activityDocumentation = await prisma.activityDocumentation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ActivityDocumentationFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ActivityDocumentationFindUniqueArgs<ExtArgs>>
    ): Prisma__ActivityDocumentationClient<$Result.GetResult<Prisma.$ActivityDocumentationPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one ActivityDocumentation that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ActivityDocumentationFindUniqueOrThrowArgs} args - Arguments to find a ActivityDocumentation
     * @example
     * // Get one ActivityDocumentation
     * const activityDocumentation = await prisma.activityDocumentation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ActivityDocumentationFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ActivityDocumentationFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ActivityDocumentationClient<$Result.GetResult<Prisma.$ActivityDocumentationPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first ActivityDocumentation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityDocumentationFindFirstArgs} args - Arguments to find a ActivityDocumentation
     * @example
     * // Get one ActivityDocumentation
     * const activityDocumentation = await prisma.activityDocumentation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ActivityDocumentationFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ActivityDocumentationFindFirstArgs<ExtArgs>>
    ): Prisma__ActivityDocumentationClient<$Result.GetResult<Prisma.$ActivityDocumentationPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first ActivityDocumentation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityDocumentationFindFirstOrThrowArgs} args - Arguments to find a ActivityDocumentation
     * @example
     * // Get one ActivityDocumentation
     * const activityDocumentation = await prisma.activityDocumentation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ActivityDocumentationFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ActivityDocumentationFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ActivityDocumentationClient<$Result.GetResult<Prisma.$ActivityDocumentationPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more ActivityDocumentations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityDocumentationFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ActivityDocumentations
     * const activityDocumentations = await prisma.activityDocumentation.findMany()
     * 
     * // Get first 10 ActivityDocumentations
     * const activityDocumentations = await prisma.activityDocumentation.findMany({ take: 10 })
     * 
     * // Only select the `documentationId`
     * const activityDocumentationWithDocumentationIdOnly = await prisma.activityDocumentation.findMany({ select: { documentationId: true } })
     * 
    **/
    findMany<T extends ActivityDocumentationFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ActivityDocumentationFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivityDocumentationPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a ActivityDocumentation.
     * @param {ActivityDocumentationCreateArgs} args - Arguments to create a ActivityDocumentation.
     * @example
     * // Create one ActivityDocumentation
     * const ActivityDocumentation = await prisma.activityDocumentation.create({
     *   data: {
     *     // ... data to create a ActivityDocumentation
     *   }
     * })
     * 
    **/
    create<T extends ActivityDocumentationCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ActivityDocumentationCreateArgs<ExtArgs>>
    ): Prisma__ActivityDocumentationClient<$Result.GetResult<Prisma.$ActivityDocumentationPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many ActivityDocumentations.
     *     @param {ActivityDocumentationCreateManyArgs} args - Arguments to create many ActivityDocumentations.
     *     @example
     *     // Create many ActivityDocumentations
     *     const activityDocumentation = await prisma.activityDocumentation.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ActivityDocumentationCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ActivityDocumentationCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ActivityDocumentation.
     * @param {ActivityDocumentationDeleteArgs} args - Arguments to delete one ActivityDocumentation.
     * @example
     * // Delete one ActivityDocumentation
     * const ActivityDocumentation = await prisma.activityDocumentation.delete({
     *   where: {
     *     // ... filter to delete one ActivityDocumentation
     *   }
     * })
     * 
    **/
    delete<T extends ActivityDocumentationDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ActivityDocumentationDeleteArgs<ExtArgs>>
    ): Prisma__ActivityDocumentationClient<$Result.GetResult<Prisma.$ActivityDocumentationPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one ActivityDocumentation.
     * @param {ActivityDocumentationUpdateArgs} args - Arguments to update one ActivityDocumentation.
     * @example
     * // Update one ActivityDocumentation
     * const activityDocumentation = await prisma.activityDocumentation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ActivityDocumentationUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ActivityDocumentationUpdateArgs<ExtArgs>>
    ): Prisma__ActivityDocumentationClient<$Result.GetResult<Prisma.$ActivityDocumentationPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more ActivityDocumentations.
     * @param {ActivityDocumentationDeleteManyArgs} args - Arguments to filter ActivityDocumentations to delete.
     * @example
     * // Delete a few ActivityDocumentations
     * const { count } = await prisma.activityDocumentation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ActivityDocumentationDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ActivityDocumentationDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ActivityDocumentations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityDocumentationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ActivityDocumentations
     * const activityDocumentation = await prisma.activityDocumentation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ActivityDocumentationUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ActivityDocumentationUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ActivityDocumentation.
     * @param {ActivityDocumentationUpsertArgs} args - Arguments to update or create a ActivityDocumentation.
     * @example
     * // Update or create a ActivityDocumentation
     * const activityDocumentation = await prisma.activityDocumentation.upsert({
     *   create: {
     *     // ... data to create a ActivityDocumentation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ActivityDocumentation we want to update
     *   }
     * })
    **/
    upsert<T extends ActivityDocumentationUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ActivityDocumentationUpsertArgs<ExtArgs>>
    ): Prisma__ActivityDocumentationClient<$Result.GetResult<Prisma.$ActivityDocumentationPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of ActivityDocumentations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityDocumentationCountArgs} args - Arguments to filter ActivityDocumentations to count.
     * @example
     * // Count the number of ActivityDocumentations
     * const count = await prisma.activityDocumentation.count({
     *   where: {
     *     // ... the filter for the ActivityDocumentations we want to count
     *   }
     * })
    **/
    count<T extends ActivityDocumentationCountArgs>(
      args?: Subset<T, ActivityDocumentationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ActivityDocumentationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ActivityDocumentation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityDocumentationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ActivityDocumentationAggregateArgs>(args: Subset<T, ActivityDocumentationAggregateArgs>): Prisma.PrismaPromise<GetActivityDocumentationAggregateType<T>>

    /**
     * Group by ActivityDocumentation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityDocumentationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ActivityDocumentationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ActivityDocumentationGroupByArgs['orderBy'] }
        : { orderBy?: ActivityDocumentationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ActivityDocumentationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetActivityDocumentationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ActivityDocumentation model
   */
  readonly fields: ActivityDocumentationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ActivityDocumentation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ActivityDocumentationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    activity<T extends ActivityDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ActivityDefaultArgs<ExtArgs>>): Prisma__ActivityClient<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the ActivityDocumentation model
   */ 
  interface ActivityDocumentationFieldRefs {
    readonly documentationId: FieldRef<"ActivityDocumentation", 'Int'>
    readonly activityId: FieldRef<"ActivityDocumentation", 'Int'>
    readonly filename: FieldRef<"ActivityDocumentation", 'String'>
    readonly filepath: FieldRef<"ActivityDocumentation", 'String'>
    readonly uploadedAt: FieldRef<"ActivityDocumentation", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * ActivityDocumentation findUnique
   */
  export type ActivityDocumentationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityDocumentation
     */
    select?: ActivityDocumentationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ActivityDocumentationInclude<ExtArgs> | null
    /**
     * Filter, which ActivityDocumentation to fetch.
     */
    where: ActivityDocumentationWhereUniqueInput
  }


  /**
   * ActivityDocumentation findUniqueOrThrow
   */
  export type ActivityDocumentationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityDocumentation
     */
    select?: ActivityDocumentationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ActivityDocumentationInclude<ExtArgs> | null
    /**
     * Filter, which ActivityDocumentation to fetch.
     */
    where: ActivityDocumentationWhereUniqueInput
  }


  /**
   * ActivityDocumentation findFirst
   */
  export type ActivityDocumentationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityDocumentation
     */
    select?: ActivityDocumentationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ActivityDocumentationInclude<ExtArgs> | null
    /**
     * Filter, which ActivityDocumentation to fetch.
     */
    where?: ActivityDocumentationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActivityDocumentations to fetch.
     */
    orderBy?: ActivityDocumentationOrderByWithRelationInput | ActivityDocumentationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ActivityDocumentations.
     */
    cursor?: ActivityDocumentationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActivityDocumentations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActivityDocumentations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ActivityDocumentations.
     */
    distinct?: ActivityDocumentationScalarFieldEnum | ActivityDocumentationScalarFieldEnum[]
  }


  /**
   * ActivityDocumentation findFirstOrThrow
   */
  export type ActivityDocumentationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityDocumentation
     */
    select?: ActivityDocumentationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ActivityDocumentationInclude<ExtArgs> | null
    /**
     * Filter, which ActivityDocumentation to fetch.
     */
    where?: ActivityDocumentationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActivityDocumentations to fetch.
     */
    orderBy?: ActivityDocumentationOrderByWithRelationInput | ActivityDocumentationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ActivityDocumentations.
     */
    cursor?: ActivityDocumentationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActivityDocumentations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActivityDocumentations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ActivityDocumentations.
     */
    distinct?: ActivityDocumentationScalarFieldEnum | ActivityDocumentationScalarFieldEnum[]
  }


  /**
   * ActivityDocumentation findMany
   */
  export type ActivityDocumentationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityDocumentation
     */
    select?: ActivityDocumentationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ActivityDocumentationInclude<ExtArgs> | null
    /**
     * Filter, which ActivityDocumentations to fetch.
     */
    where?: ActivityDocumentationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActivityDocumentations to fetch.
     */
    orderBy?: ActivityDocumentationOrderByWithRelationInput | ActivityDocumentationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ActivityDocumentations.
     */
    cursor?: ActivityDocumentationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActivityDocumentations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActivityDocumentations.
     */
    skip?: number
    distinct?: ActivityDocumentationScalarFieldEnum | ActivityDocumentationScalarFieldEnum[]
  }


  /**
   * ActivityDocumentation create
   */
  export type ActivityDocumentationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityDocumentation
     */
    select?: ActivityDocumentationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ActivityDocumentationInclude<ExtArgs> | null
    /**
     * The data needed to create a ActivityDocumentation.
     */
    data: XOR<ActivityDocumentationCreateInput, ActivityDocumentationUncheckedCreateInput>
  }


  /**
   * ActivityDocumentation createMany
   */
  export type ActivityDocumentationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ActivityDocumentations.
     */
    data: ActivityDocumentationCreateManyInput | ActivityDocumentationCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * ActivityDocumentation update
   */
  export type ActivityDocumentationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityDocumentation
     */
    select?: ActivityDocumentationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ActivityDocumentationInclude<ExtArgs> | null
    /**
     * The data needed to update a ActivityDocumentation.
     */
    data: XOR<ActivityDocumentationUpdateInput, ActivityDocumentationUncheckedUpdateInput>
    /**
     * Choose, which ActivityDocumentation to update.
     */
    where: ActivityDocumentationWhereUniqueInput
  }


  /**
   * ActivityDocumentation updateMany
   */
  export type ActivityDocumentationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ActivityDocumentations.
     */
    data: XOR<ActivityDocumentationUpdateManyMutationInput, ActivityDocumentationUncheckedUpdateManyInput>
    /**
     * Filter which ActivityDocumentations to update
     */
    where?: ActivityDocumentationWhereInput
  }


  /**
   * ActivityDocumentation upsert
   */
  export type ActivityDocumentationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityDocumentation
     */
    select?: ActivityDocumentationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ActivityDocumentationInclude<ExtArgs> | null
    /**
     * The filter to search for the ActivityDocumentation to update in case it exists.
     */
    where: ActivityDocumentationWhereUniqueInput
    /**
     * In case the ActivityDocumentation found by the `where` argument doesn't exist, create a new ActivityDocumentation with this data.
     */
    create: XOR<ActivityDocumentationCreateInput, ActivityDocumentationUncheckedCreateInput>
    /**
     * In case the ActivityDocumentation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ActivityDocumentationUpdateInput, ActivityDocumentationUncheckedUpdateInput>
  }


  /**
   * ActivityDocumentation delete
   */
  export type ActivityDocumentationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityDocumentation
     */
    select?: ActivityDocumentationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ActivityDocumentationInclude<ExtArgs> | null
    /**
     * Filter which ActivityDocumentation to delete.
     */
    where: ActivityDocumentationWhereUniqueInput
  }


  /**
   * ActivityDocumentation deleteMany
   */
  export type ActivityDocumentationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ActivityDocumentations to delete
     */
    where?: ActivityDocumentationWhereInput
  }


  /**
   * ActivityDocumentation without action
   */
  export type ActivityDocumentationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityDocumentation
     */
    select?: ActivityDocumentationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ActivityDocumentationInclude<ExtArgs> | null
  }



  /**
   * Model ActivityParticipation
   */

  export type AggregateActivityParticipation = {
    _count: ActivityParticipationCountAggregateOutputType | null
    _avg: ActivityParticipationAvgAggregateOutputType | null
    _sum: ActivityParticipationSumAggregateOutputType | null
    _min: ActivityParticipationMinAggregateOutputType | null
    _max: ActivityParticipationMaxAggregateOutputType | null
  }

  export type ActivityParticipationAvgAggregateOutputType = {
    activityId: number | null
    beneficiaryId: number | null
  }

  export type ActivityParticipationSumAggregateOutputType = {
    activityId: number | null
    beneficiaryId: number | null
  }

  export type ActivityParticipationMinAggregateOutputType = {
    activityId: number | null
    beneficiaryId: number | null
    attended: boolean | null
    beneficiaryFirstName: string | null
    beneficiaryMiddleName: string | null
    beneficiaryLastName: string | null
    beneficiarySuffix: string | null
    beneficiaryBirthdate: Date | null
    beneficiarySex: string | null
    beneficiaryJob: string | null
    beneficiaryBarangay: string | null
    beneficiaryHealthStation: string | null
    beneficiaryPrimaryType: string | null
    beneficiaryCivilStatus: string | null
    beneficiaryContactNumber: string | null
    beneficiaryTypes: string | null
    isArchived: boolean | null
  }

  export type ActivityParticipationMaxAggregateOutputType = {
    activityId: number | null
    beneficiaryId: number | null
    attended: boolean | null
    beneficiaryFirstName: string | null
    beneficiaryMiddleName: string | null
    beneficiaryLastName: string | null
    beneficiarySuffix: string | null
    beneficiaryBirthdate: Date | null
    beneficiarySex: string | null
    beneficiaryJob: string | null
    beneficiaryBarangay: string | null
    beneficiaryHealthStation: string | null
    beneficiaryPrimaryType: string | null
    beneficiaryCivilStatus: string | null
    beneficiaryContactNumber: string | null
    beneficiaryTypes: string | null
    isArchived: boolean | null
  }

  export type ActivityParticipationCountAggregateOutputType = {
    activityId: number
    beneficiaryId: number
    attended: number
    beneficiaryFirstName: number
    beneficiaryMiddleName: number
    beneficiaryLastName: number
    beneficiarySuffix: number
    beneficiaryBirthdate: number
    beneficiarySex: number
    beneficiaryJob: number
    beneficiaryBarangay: number
    beneficiaryHealthStation: number
    beneficiaryPrimaryType: number
    beneficiaryCivilStatus: number
    beneficiaryContactNumber: number
    beneficiaryTypes: number
    isArchived: number
    _all: number
  }


  export type ActivityParticipationAvgAggregateInputType = {
    activityId?: true
    beneficiaryId?: true
  }

  export type ActivityParticipationSumAggregateInputType = {
    activityId?: true
    beneficiaryId?: true
  }

  export type ActivityParticipationMinAggregateInputType = {
    activityId?: true
    beneficiaryId?: true
    attended?: true
    beneficiaryFirstName?: true
    beneficiaryMiddleName?: true
    beneficiaryLastName?: true
    beneficiarySuffix?: true
    beneficiaryBirthdate?: true
    beneficiarySex?: true
    beneficiaryJob?: true
    beneficiaryBarangay?: true
    beneficiaryHealthStation?: true
    beneficiaryPrimaryType?: true
    beneficiaryCivilStatus?: true
    beneficiaryContactNumber?: true
    beneficiaryTypes?: true
    isArchived?: true
  }

  export type ActivityParticipationMaxAggregateInputType = {
    activityId?: true
    beneficiaryId?: true
    attended?: true
    beneficiaryFirstName?: true
    beneficiaryMiddleName?: true
    beneficiaryLastName?: true
    beneficiarySuffix?: true
    beneficiaryBirthdate?: true
    beneficiarySex?: true
    beneficiaryJob?: true
    beneficiaryBarangay?: true
    beneficiaryHealthStation?: true
    beneficiaryPrimaryType?: true
    beneficiaryCivilStatus?: true
    beneficiaryContactNumber?: true
    beneficiaryTypes?: true
    isArchived?: true
  }

  export type ActivityParticipationCountAggregateInputType = {
    activityId?: true
    beneficiaryId?: true
    attended?: true
    beneficiaryFirstName?: true
    beneficiaryMiddleName?: true
    beneficiaryLastName?: true
    beneficiarySuffix?: true
    beneficiaryBirthdate?: true
    beneficiarySex?: true
    beneficiaryJob?: true
    beneficiaryBarangay?: true
    beneficiaryHealthStation?: true
    beneficiaryPrimaryType?: true
    beneficiaryCivilStatus?: true
    beneficiaryContactNumber?: true
    beneficiaryTypes?: true
    isArchived?: true
    _all?: true
  }

  export type ActivityParticipationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ActivityParticipation to aggregate.
     */
    where?: ActivityParticipationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActivityParticipations to fetch.
     */
    orderBy?: ActivityParticipationOrderByWithRelationInput | ActivityParticipationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ActivityParticipationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActivityParticipations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActivityParticipations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ActivityParticipations
    **/
    _count?: true | ActivityParticipationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ActivityParticipationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ActivityParticipationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ActivityParticipationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ActivityParticipationMaxAggregateInputType
  }

  export type GetActivityParticipationAggregateType<T extends ActivityParticipationAggregateArgs> = {
        [P in keyof T & keyof AggregateActivityParticipation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateActivityParticipation[P]>
      : GetScalarType<T[P], AggregateActivityParticipation[P]>
  }




  export type ActivityParticipationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ActivityParticipationWhereInput
    orderBy?: ActivityParticipationOrderByWithAggregationInput | ActivityParticipationOrderByWithAggregationInput[]
    by: ActivityParticipationScalarFieldEnum[] | ActivityParticipationScalarFieldEnum
    having?: ActivityParticipationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ActivityParticipationCountAggregateInputType | true
    _avg?: ActivityParticipationAvgAggregateInputType
    _sum?: ActivityParticipationSumAggregateInputType
    _min?: ActivityParticipationMinAggregateInputType
    _max?: ActivityParticipationMaxAggregateInputType
  }

  export type ActivityParticipationGroupByOutputType = {
    activityId: number
    beneficiaryId: number
    attended: boolean
    beneficiaryFirstName: string
    beneficiaryMiddleName: string | null
    beneficiaryLastName: string
    beneficiarySuffix: string | null
    beneficiaryBirthdate: Date
    beneficiarySex: string
    beneficiaryJob: string | null
    beneficiaryBarangay: string
    beneficiaryHealthStation: string
    beneficiaryPrimaryType: string
    beneficiaryCivilStatus: string
    beneficiaryContactNumber: string | null
    beneficiaryTypes: string
    isArchived: boolean
    _count: ActivityParticipationCountAggregateOutputType | null
    _avg: ActivityParticipationAvgAggregateOutputType | null
    _sum: ActivityParticipationSumAggregateOutputType | null
    _min: ActivityParticipationMinAggregateOutputType | null
    _max: ActivityParticipationMaxAggregateOutputType | null
  }

  type GetActivityParticipationGroupByPayload<T extends ActivityParticipationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ActivityParticipationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ActivityParticipationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ActivityParticipationGroupByOutputType[P]>
            : GetScalarType<T[P], ActivityParticipationGroupByOutputType[P]>
        }
      >
    >


  export type ActivityParticipationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    activityId?: boolean
    beneficiaryId?: boolean
    attended?: boolean
    beneficiaryFirstName?: boolean
    beneficiaryMiddleName?: boolean
    beneficiaryLastName?: boolean
    beneficiarySuffix?: boolean
    beneficiaryBirthdate?: boolean
    beneficiarySex?: boolean
    beneficiaryJob?: boolean
    beneficiaryBarangay?: boolean
    beneficiaryHealthStation?: boolean
    beneficiaryPrimaryType?: boolean
    beneficiaryCivilStatus?: boolean
    beneficiaryContactNumber?: boolean
    beneficiaryTypes?: boolean
    isArchived?: boolean
    activity?: boolean | ActivityDefaultArgs<ExtArgs>
    beneficiary?: boolean | BeneficiaryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["activityParticipation"]>

  export type ActivityParticipationSelectScalar = {
    activityId?: boolean
    beneficiaryId?: boolean
    attended?: boolean
    beneficiaryFirstName?: boolean
    beneficiaryMiddleName?: boolean
    beneficiaryLastName?: boolean
    beneficiarySuffix?: boolean
    beneficiaryBirthdate?: boolean
    beneficiarySex?: boolean
    beneficiaryJob?: boolean
    beneficiaryBarangay?: boolean
    beneficiaryHealthStation?: boolean
    beneficiaryPrimaryType?: boolean
    beneficiaryCivilStatus?: boolean
    beneficiaryContactNumber?: boolean
    beneficiaryTypes?: boolean
    isArchived?: boolean
  }

  export type ActivityParticipationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    activity?: boolean | ActivityDefaultArgs<ExtArgs>
    beneficiary?: boolean | BeneficiaryDefaultArgs<ExtArgs>
  }


  export type $ActivityParticipationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ActivityParticipation"
    objects: {
      activity: Prisma.$ActivityPayload<ExtArgs>
      beneficiary: Prisma.$BeneficiaryPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      activityId: number
      beneficiaryId: number
      attended: boolean
      beneficiaryFirstName: string
      beneficiaryMiddleName: string | null
      beneficiaryLastName: string
      beneficiarySuffix: string | null
      beneficiaryBirthdate: Date
      beneficiarySex: string
      beneficiaryJob: string | null
      beneficiaryBarangay: string
      beneficiaryHealthStation: string
      beneficiaryPrimaryType: string
      beneficiaryCivilStatus: string
      beneficiaryContactNumber: string | null
      beneficiaryTypes: string
      isArchived: boolean
    }, ExtArgs["result"]["activityParticipation"]>
    composites: {}
  }


  type ActivityParticipationGetPayload<S extends boolean | null | undefined | ActivityParticipationDefaultArgs> = $Result.GetResult<Prisma.$ActivityParticipationPayload, S>

  type ActivityParticipationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ActivityParticipationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ActivityParticipationCountAggregateInputType | true
    }

  export interface ActivityParticipationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ActivityParticipation'], meta: { name: 'ActivityParticipation' } }
    /**
     * Find zero or one ActivityParticipation that matches the filter.
     * @param {ActivityParticipationFindUniqueArgs} args - Arguments to find a ActivityParticipation
     * @example
     * // Get one ActivityParticipation
     * const activityParticipation = await prisma.activityParticipation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ActivityParticipationFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ActivityParticipationFindUniqueArgs<ExtArgs>>
    ): Prisma__ActivityParticipationClient<$Result.GetResult<Prisma.$ActivityParticipationPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one ActivityParticipation that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ActivityParticipationFindUniqueOrThrowArgs} args - Arguments to find a ActivityParticipation
     * @example
     * // Get one ActivityParticipation
     * const activityParticipation = await prisma.activityParticipation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ActivityParticipationFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ActivityParticipationFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ActivityParticipationClient<$Result.GetResult<Prisma.$ActivityParticipationPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first ActivityParticipation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityParticipationFindFirstArgs} args - Arguments to find a ActivityParticipation
     * @example
     * // Get one ActivityParticipation
     * const activityParticipation = await prisma.activityParticipation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ActivityParticipationFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ActivityParticipationFindFirstArgs<ExtArgs>>
    ): Prisma__ActivityParticipationClient<$Result.GetResult<Prisma.$ActivityParticipationPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first ActivityParticipation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityParticipationFindFirstOrThrowArgs} args - Arguments to find a ActivityParticipation
     * @example
     * // Get one ActivityParticipation
     * const activityParticipation = await prisma.activityParticipation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ActivityParticipationFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ActivityParticipationFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ActivityParticipationClient<$Result.GetResult<Prisma.$ActivityParticipationPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more ActivityParticipations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityParticipationFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ActivityParticipations
     * const activityParticipations = await prisma.activityParticipation.findMany()
     * 
     * // Get first 10 ActivityParticipations
     * const activityParticipations = await prisma.activityParticipation.findMany({ take: 10 })
     * 
     * // Only select the `activityId`
     * const activityParticipationWithActivityIdOnly = await prisma.activityParticipation.findMany({ select: { activityId: true } })
     * 
    **/
    findMany<T extends ActivityParticipationFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ActivityParticipationFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ActivityParticipationPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a ActivityParticipation.
     * @param {ActivityParticipationCreateArgs} args - Arguments to create a ActivityParticipation.
     * @example
     * // Create one ActivityParticipation
     * const ActivityParticipation = await prisma.activityParticipation.create({
     *   data: {
     *     // ... data to create a ActivityParticipation
     *   }
     * })
     * 
    **/
    create<T extends ActivityParticipationCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ActivityParticipationCreateArgs<ExtArgs>>
    ): Prisma__ActivityParticipationClient<$Result.GetResult<Prisma.$ActivityParticipationPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many ActivityParticipations.
     *     @param {ActivityParticipationCreateManyArgs} args - Arguments to create many ActivityParticipations.
     *     @example
     *     // Create many ActivityParticipations
     *     const activityParticipation = await prisma.activityParticipation.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ActivityParticipationCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ActivityParticipationCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ActivityParticipation.
     * @param {ActivityParticipationDeleteArgs} args - Arguments to delete one ActivityParticipation.
     * @example
     * // Delete one ActivityParticipation
     * const ActivityParticipation = await prisma.activityParticipation.delete({
     *   where: {
     *     // ... filter to delete one ActivityParticipation
     *   }
     * })
     * 
    **/
    delete<T extends ActivityParticipationDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ActivityParticipationDeleteArgs<ExtArgs>>
    ): Prisma__ActivityParticipationClient<$Result.GetResult<Prisma.$ActivityParticipationPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one ActivityParticipation.
     * @param {ActivityParticipationUpdateArgs} args - Arguments to update one ActivityParticipation.
     * @example
     * // Update one ActivityParticipation
     * const activityParticipation = await prisma.activityParticipation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ActivityParticipationUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ActivityParticipationUpdateArgs<ExtArgs>>
    ): Prisma__ActivityParticipationClient<$Result.GetResult<Prisma.$ActivityParticipationPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more ActivityParticipations.
     * @param {ActivityParticipationDeleteManyArgs} args - Arguments to filter ActivityParticipations to delete.
     * @example
     * // Delete a few ActivityParticipations
     * const { count } = await prisma.activityParticipation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ActivityParticipationDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ActivityParticipationDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ActivityParticipations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityParticipationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ActivityParticipations
     * const activityParticipation = await prisma.activityParticipation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ActivityParticipationUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ActivityParticipationUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ActivityParticipation.
     * @param {ActivityParticipationUpsertArgs} args - Arguments to update or create a ActivityParticipation.
     * @example
     * // Update or create a ActivityParticipation
     * const activityParticipation = await prisma.activityParticipation.upsert({
     *   create: {
     *     // ... data to create a ActivityParticipation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ActivityParticipation we want to update
     *   }
     * })
    **/
    upsert<T extends ActivityParticipationUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ActivityParticipationUpsertArgs<ExtArgs>>
    ): Prisma__ActivityParticipationClient<$Result.GetResult<Prisma.$ActivityParticipationPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of ActivityParticipations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityParticipationCountArgs} args - Arguments to filter ActivityParticipations to count.
     * @example
     * // Count the number of ActivityParticipations
     * const count = await prisma.activityParticipation.count({
     *   where: {
     *     // ... the filter for the ActivityParticipations we want to count
     *   }
     * })
    **/
    count<T extends ActivityParticipationCountArgs>(
      args?: Subset<T, ActivityParticipationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ActivityParticipationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ActivityParticipation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityParticipationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ActivityParticipationAggregateArgs>(args: Subset<T, ActivityParticipationAggregateArgs>): Prisma.PrismaPromise<GetActivityParticipationAggregateType<T>>

    /**
     * Group by ActivityParticipation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ActivityParticipationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ActivityParticipationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ActivityParticipationGroupByArgs['orderBy'] }
        : { orderBy?: ActivityParticipationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ActivityParticipationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetActivityParticipationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ActivityParticipation model
   */
  readonly fields: ActivityParticipationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ActivityParticipation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ActivityParticipationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    activity<T extends ActivityDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ActivityDefaultArgs<ExtArgs>>): Prisma__ActivityClient<$Result.GetResult<Prisma.$ActivityPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    beneficiary<T extends BeneficiaryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BeneficiaryDefaultArgs<ExtArgs>>): Prisma__BeneficiaryClient<$Result.GetResult<Prisma.$BeneficiaryPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the ActivityParticipation model
   */ 
  interface ActivityParticipationFieldRefs {
    readonly activityId: FieldRef<"ActivityParticipation", 'Int'>
    readonly beneficiaryId: FieldRef<"ActivityParticipation", 'Int'>
    readonly attended: FieldRef<"ActivityParticipation", 'Boolean'>
    readonly beneficiaryFirstName: FieldRef<"ActivityParticipation", 'String'>
    readonly beneficiaryMiddleName: FieldRef<"ActivityParticipation", 'String'>
    readonly beneficiaryLastName: FieldRef<"ActivityParticipation", 'String'>
    readonly beneficiarySuffix: FieldRef<"ActivityParticipation", 'String'>
    readonly beneficiaryBirthdate: FieldRef<"ActivityParticipation", 'DateTime'>
    readonly beneficiarySex: FieldRef<"ActivityParticipation", 'String'>
    readonly beneficiaryJob: FieldRef<"ActivityParticipation", 'String'>
    readonly beneficiaryBarangay: FieldRef<"ActivityParticipation", 'String'>
    readonly beneficiaryHealthStation: FieldRef<"ActivityParticipation", 'String'>
    readonly beneficiaryPrimaryType: FieldRef<"ActivityParticipation", 'String'>
    readonly beneficiaryCivilStatus: FieldRef<"ActivityParticipation", 'String'>
    readonly beneficiaryContactNumber: FieldRef<"ActivityParticipation", 'String'>
    readonly beneficiaryTypes: FieldRef<"ActivityParticipation", 'String'>
    readonly isArchived: FieldRef<"ActivityParticipation", 'Boolean'>
  }
    

  // Custom InputTypes

  /**
   * ActivityParticipation findUnique
   */
  export type ActivityParticipationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityParticipation
     */
    select?: ActivityParticipationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ActivityParticipationInclude<ExtArgs> | null
    /**
     * Filter, which ActivityParticipation to fetch.
     */
    where: ActivityParticipationWhereUniqueInput
  }


  /**
   * ActivityParticipation findUniqueOrThrow
   */
  export type ActivityParticipationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityParticipation
     */
    select?: ActivityParticipationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ActivityParticipationInclude<ExtArgs> | null
    /**
     * Filter, which ActivityParticipation to fetch.
     */
    where: ActivityParticipationWhereUniqueInput
  }


  /**
   * ActivityParticipation findFirst
   */
  export type ActivityParticipationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityParticipation
     */
    select?: ActivityParticipationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ActivityParticipationInclude<ExtArgs> | null
    /**
     * Filter, which ActivityParticipation to fetch.
     */
    where?: ActivityParticipationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActivityParticipations to fetch.
     */
    orderBy?: ActivityParticipationOrderByWithRelationInput | ActivityParticipationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ActivityParticipations.
     */
    cursor?: ActivityParticipationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActivityParticipations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActivityParticipations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ActivityParticipations.
     */
    distinct?: ActivityParticipationScalarFieldEnum | ActivityParticipationScalarFieldEnum[]
  }


  /**
   * ActivityParticipation findFirstOrThrow
   */
  export type ActivityParticipationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityParticipation
     */
    select?: ActivityParticipationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ActivityParticipationInclude<ExtArgs> | null
    /**
     * Filter, which ActivityParticipation to fetch.
     */
    where?: ActivityParticipationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActivityParticipations to fetch.
     */
    orderBy?: ActivityParticipationOrderByWithRelationInput | ActivityParticipationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ActivityParticipations.
     */
    cursor?: ActivityParticipationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActivityParticipations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActivityParticipations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ActivityParticipations.
     */
    distinct?: ActivityParticipationScalarFieldEnum | ActivityParticipationScalarFieldEnum[]
  }


  /**
   * ActivityParticipation findMany
   */
  export type ActivityParticipationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityParticipation
     */
    select?: ActivityParticipationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ActivityParticipationInclude<ExtArgs> | null
    /**
     * Filter, which ActivityParticipations to fetch.
     */
    where?: ActivityParticipationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ActivityParticipations to fetch.
     */
    orderBy?: ActivityParticipationOrderByWithRelationInput | ActivityParticipationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ActivityParticipations.
     */
    cursor?: ActivityParticipationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ActivityParticipations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ActivityParticipations.
     */
    skip?: number
    distinct?: ActivityParticipationScalarFieldEnum | ActivityParticipationScalarFieldEnum[]
  }


  /**
   * ActivityParticipation create
   */
  export type ActivityParticipationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityParticipation
     */
    select?: ActivityParticipationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ActivityParticipationInclude<ExtArgs> | null
    /**
     * The data needed to create a ActivityParticipation.
     */
    data: XOR<ActivityParticipationCreateInput, ActivityParticipationUncheckedCreateInput>
  }


  /**
   * ActivityParticipation createMany
   */
  export type ActivityParticipationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ActivityParticipations.
     */
    data: ActivityParticipationCreateManyInput | ActivityParticipationCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * ActivityParticipation update
   */
  export type ActivityParticipationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityParticipation
     */
    select?: ActivityParticipationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ActivityParticipationInclude<ExtArgs> | null
    /**
     * The data needed to update a ActivityParticipation.
     */
    data: XOR<ActivityParticipationUpdateInput, ActivityParticipationUncheckedUpdateInput>
    /**
     * Choose, which ActivityParticipation to update.
     */
    where: ActivityParticipationWhereUniqueInput
  }


  /**
   * ActivityParticipation updateMany
   */
  export type ActivityParticipationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ActivityParticipations.
     */
    data: XOR<ActivityParticipationUpdateManyMutationInput, ActivityParticipationUncheckedUpdateManyInput>
    /**
     * Filter which ActivityParticipations to update
     */
    where?: ActivityParticipationWhereInput
  }


  /**
   * ActivityParticipation upsert
   */
  export type ActivityParticipationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityParticipation
     */
    select?: ActivityParticipationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ActivityParticipationInclude<ExtArgs> | null
    /**
     * The filter to search for the ActivityParticipation to update in case it exists.
     */
    where: ActivityParticipationWhereUniqueInput
    /**
     * In case the ActivityParticipation found by the `where` argument doesn't exist, create a new ActivityParticipation with this data.
     */
    create: XOR<ActivityParticipationCreateInput, ActivityParticipationUncheckedCreateInput>
    /**
     * In case the ActivityParticipation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ActivityParticipationUpdateInput, ActivityParticipationUncheckedUpdateInput>
  }


  /**
   * ActivityParticipation delete
   */
  export type ActivityParticipationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityParticipation
     */
    select?: ActivityParticipationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ActivityParticipationInclude<ExtArgs> | null
    /**
     * Filter which ActivityParticipation to delete.
     */
    where: ActivityParticipationWhereUniqueInput
  }


  /**
   * ActivityParticipation deleteMany
   */
  export type ActivityParticipationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ActivityParticipations to delete
     */
    where?: ActivityParticipationWhereInput
  }


  /**
   * ActivityParticipation without action
   */
  export type ActivityParticipationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ActivityParticipation
     */
    select?: ActivityParticipationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ActivityParticipationInclude<ExtArgs> | null
  }



  /**
   * Model Report
   */

  export type AggregateReport = {
    _count: ReportCountAggregateOutputType | null
    _avg: ReportAvgAggregateOutputType | null
    _sum: ReportSumAggregateOutputType | null
    _min: ReportMinAggregateOutputType | null
    _max: ReportMaxAggregateOutputType | null
  }

  export type ReportAvgAggregateOutputType = {
    reportId: number | null
    year: number | null
    userId: number | null
  }

  export type ReportSumAggregateOutputType = {
    reportId: number | null
    year: number | null
    userId: number | null
  }

  export type ReportMinAggregateOutputType = {
    reportId: number | null
    type: string | null
    month: string | null
    year: number | null
    userId: number | null
    dueDate: Date | null
    isArchived: boolean | null
  }

  export type ReportMaxAggregateOutputType = {
    reportId: number | null
    type: string | null
    month: string | null
    year: number | null
    userId: number | null
    dueDate: Date | null
    isArchived: boolean | null
  }

  export type ReportCountAggregateOutputType = {
    reportId: number
    type: number
    month: number
    year: number
    userId: number
    dueDate: number
    isArchived: number
    _all: number
  }


  export type ReportAvgAggregateInputType = {
    reportId?: true
    year?: true
    userId?: true
  }

  export type ReportSumAggregateInputType = {
    reportId?: true
    year?: true
    userId?: true
  }

  export type ReportMinAggregateInputType = {
    reportId?: true
    type?: true
    month?: true
    year?: true
    userId?: true
    dueDate?: true
    isArchived?: true
  }

  export type ReportMaxAggregateInputType = {
    reportId?: true
    type?: true
    month?: true
    year?: true
    userId?: true
    dueDate?: true
    isArchived?: true
  }

  export type ReportCountAggregateInputType = {
    reportId?: true
    type?: true
    month?: true
    year?: true
    userId?: true
    dueDate?: true
    isArchived?: true
    _all?: true
  }

  export type ReportAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Report to aggregate.
     */
    where?: ReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reports to fetch.
     */
    orderBy?: ReportOrderByWithRelationInput | ReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Reports
    **/
    _count?: true | ReportCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReportAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReportSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReportMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReportMaxAggregateInputType
  }

  export type GetReportAggregateType<T extends ReportAggregateArgs> = {
        [P in keyof T & keyof AggregateReport]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReport[P]>
      : GetScalarType<T[P], AggregateReport[P]>
  }




  export type ReportGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReportWhereInput
    orderBy?: ReportOrderByWithAggregationInput | ReportOrderByWithAggregationInput[]
    by: ReportScalarFieldEnum[] | ReportScalarFieldEnum
    having?: ReportScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReportCountAggregateInputType | true
    _avg?: ReportAvgAggregateInputType
    _sum?: ReportSumAggregateInputType
    _min?: ReportMinAggregateInputType
    _max?: ReportMaxAggregateInputType
  }

  export type ReportGroupByOutputType = {
    reportId: number
    type: string
    month: string
    year: number
    userId: number
    dueDate: Date
    isArchived: boolean
    _count: ReportCountAggregateOutputType | null
    _avg: ReportAvgAggregateOutputType | null
    _sum: ReportSumAggregateOutputType | null
    _min: ReportMinAggregateOutputType | null
    _max: ReportMaxAggregateOutputType | null
  }

  type GetReportGroupByPayload<T extends ReportGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReportGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReportGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReportGroupByOutputType[P]>
            : GetScalarType<T[P], ReportGroupByOutputType[P]>
        }
      >
    >


  export type ReportSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    reportId?: boolean
    type?: boolean
    month?: boolean
    year?: boolean
    userId?: boolean
    dueDate?: boolean
    isArchived?: boolean
    files?: boolean | Report$filesArgs<ExtArgs>
    feedbacks?: boolean | Report$feedbacksArgs<ExtArgs>
    submissions?: boolean | Report$submissionsArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    _count?: boolean | ReportCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["report"]>

  export type ReportSelectScalar = {
    reportId?: boolean
    type?: boolean
    month?: boolean
    year?: boolean
    userId?: boolean
    dueDate?: boolean
    isArchived?: boolean
  }

  export type ReportInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    files?: boolean | Report$filesArgs<ExtArgs>
    feedbacks?: boolean | Report$feedbacksArgs<ExtArgs>
    submissions?: boolean | Report$submissionsArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    _count?: boolean | ReportCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $ReportPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Report"
    objects: {
      files: Prisma.$FileAttachmentPayload<ExtArgs>[]
      feedbacks: Prisma.$FeedbackPayload<ExtArgs>[]
      submissions: Prisma.$SubmissionPayload<ExtArgs>[]
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      reportId: number
      type: string
      month: string
      year: number
      userId: number
      dueDate: Date
      isArchived: boolean
    }, ExtArgs["result"]["report"]>
    composites: {}
  }


  type ReportGetPayload<S extends boolean | null | undefined | ReportDefaultArgs> = $Result.GetResult<Prisma.$ReportPayload, S>

  type ReportCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ReportFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ReportCountAggregateInputType | true
    }

  export interface ReportDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Report'], meta: { name: 'Report' } }
    /**
     * Find zero or one Report that matches the filter.
     * @param {ReportFindUniqueArgs} args - Arguments to find a Report
     * @example
     * // Get one Report
     * const report = await prisma.report.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ReportFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ReportFindUniqueArgs<ExtArgs>>
    ): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Report that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ReportFindUniqueOrThrowArgs} args - Arguments to find a Report
     * @example
     * // Get one Report
     * const report = await prisma.report.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ReportFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ReportFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Report that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportFindFirstArgs} args - Arguments to find a Report
     * @example
     * // Get one Report
     * const report = await prisma.report.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ReportFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ReportFindFirstArgs<ExtArgs>>
    ): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Report that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportFindFirstOrThrowArgs} args - Arguments to find a Report
     * @example
     * // Get one Report
     * const report = await prisma.report.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ReportFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ReportFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Reports that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Reports
     * const reports = await prisma.report.findMany()
     * 
     * // Get first 10 Reports
     * const reports = await prisma.report.findMany({ take: 10 })
     * 
     * // Only select the `reportId`
     * const reportWithReportIdOnly = await prisma.report.findMany({ select: { reportId: true } })
     * 
    **/
    findMany<T extends ReportFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ReportFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Report.
     * @param {ReportCreateArgs} args - Arguments to create a Report.
     * @example
     * // Create one Report
     * const Report = await prisma.report.create({
     *   data: {
     *     // ... data to create a Report
     *   }
     * })
     * 
    **/
    create<T extends ReportCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ReportCreateArgs<ExtArgs>>
    ): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Reports.
     *     @param {ReportCreateManyArgs} args - Arguments to create many Reports.
     *     @example
     *     // Create many Reports
     *     const report = await prisma.report.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ReportCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ReportCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Report.
     * @param {ReportDeleteArgs} args - Arguments to delete one Report.
     * @example
     * // Delete one Report
     * const Report = await prisma.report.delete({
     *   where: {
     *     // ... filter to delete one Report
     *   }
     * })
     * 
    **/
    delete<T extends ReportDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ReportDeleteArgs<ExtArgs>>
    ): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Report.
     * @param {ReportUpdateArgs} args - Arguments to update one Report.
     * @example
     * // Update one Report
     * const report = await prisma.report.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ReportUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ReportUpdateArgs<ExtArgs>>
    ): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Reports.
     * @param {ReportDeleteManyArgs} args - Arguments to filter Reports to delete.
     * @example
     * // Delete a few Reports
     * const { count } = await prisma.report.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ReportDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ReportDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Reports
     * const report = await prisma.report.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ReportUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ReportUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Report.
     * @param {ReportUpsertArgs} args - Arguments to update or create a Report.
     * @example
     * // Update or create a Report
     * const report = await prisma.report.upsert({
     *   create: {
     *     // ... data to create a Report
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Report we want to update
     *   }
     * })
    **/
    upsert<T extends ReportUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ReportUpsertArgs<ExtArgs>>
    ): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Reports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportCountArgs} args - Arguments to filter Reports to count.
     * @example
     * // Count the number of Reports
     * const count = await prisma.report.count({
     *   where: {
     *     // ... the filter for the Reports we want to count
     *   }
     * })
    **/
    count<T extends ReportCountArgs>(
      args?: Subset<T, ReportCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReportCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Report.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReportAggregateArgs>(args: Subset<T, ReportAggregateArgs>): Prisma.PrismaPromise<GetReportAggregateType<T>>

    /**
     * Group by Report.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReportGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReportGroupByArgs['orderBy'] }
        : { orderBy?: ReportGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReportGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReportGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Report model
   */
  readonly fields: ReportFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Report.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReportClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    files<T extends Report$filesArgs<ExtArgs> = {}>(args?: Subset<T, Report$filesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FileAttachmentPayload<ExtArgs>, T, 'findMany'> | Null>;

    feedbacks<T extends Report$feedbacksArgs<ExtArgs> = {}>(args?: Subset<T, Report$feedbacksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, 'findMany'> | Null>;

    submissions<T extends Report$submissionsArgs<ExtArgs> = {}>(args?: Subset<T, Report$submissionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, 'findMany'> | Null>;

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Report model
   */ 
  interface ReportFieldRefs {
    readonly reportId: FieldRef<"Report", 'Int'>
    readonly type: FieldRef<"Report", 'String'>
    readonly month: FieldRef<"Report", 'String'>
    readonly year: FieldRef<"Report", 'Int'>
    readonly userId: FieldRef<"Report", 'Int'>
    readonly dueDate: FieldRef<"Report", 'DateTime'>
    readonly isArchived: FieldRef<"Report", 'Boolean'>
  }
    

  // Custom InputTypes

  /**
   * Report findUnique
   */
  export type ReportFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * Filter, which Report to fetch.
     */
    where: ReportWhereUniqueInput
  }


  /**
   * Report findUniqueOrThrow
   */
  export type ReportFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * Filter, which Report to fetch.
     */
    where: ReportWhereUniqueInput
  }


  /**
   * Report findFirst
   */
  export type ReportFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * Filter, which Report to fetch.
     */
    where?: ReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reports to fetch.
     */
    orderBy?: ReportOrderByWithRelationInput | ReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reports.
     */
    cursor?: ReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reports.
     */
    distinct?: ReportScalarFieldEnum | ReportScalarFieldEnum[]
  }


  /**
   * Report findFirstOrThrow
   */
  export type ReportFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * Filter, which Report to fetch.
     */
    where?: ReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reports to fetch.
     */
    orderBy?: ReportOrderByWithRelationInput | ReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reports.
     */
    cursor?: ReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reports.
     */
    distinct?: ReportScalarFieldEnum | ReportScalarFieldEnum[]
  }


  /**
   * Report findMany
   */
  export type ReportFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * Filter, which Reports to fetch.
     */
    where?: ReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reports to fetch.
     */
    orderBy?: ReportOrderByWithRelationInput | ReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Reports.
     */
    cursor?: ReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reports.
     */
    skip?: number
    distinct?: ReportScalarFieldEnum | ReportScalarFieldEnum[]
  }


  /**
   * Report create
   */
  export type ReportCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * The data needed to create a Report.
     */
    data: XOR<ReportCreateInput, ReportUncheckedCreateInput>
  }


  /**
   * Report createMany
   */
  export type ReportCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Reports.
     */
    data: ReportCreateManyInput | ReportCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Report update
   */
  export type ReportUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * The data needed to update a Report.
     */
    data: XOR<ReportUpdateInput, ReportUncheckedUpdateInput>
    /**
     * Choose, which Report to update.
     */
    where: ReportWhereUniqueInput
  }


  /**
   * Report updateMany
   */
  export type ReportUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Reports.
     */
    data: XOR<ReportUpdateManyMutationInput, ReportUncheckedUpdateManyInput>
    /**
     * Filter which Reports to update
     */
    where?: ReportWhereInput
  }


  /**
   * Report upsert
   */
  export type ReportUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * The filter to search for the Report to update in case it exists.
     */
    where: ReportWhereUniqueInput
    /**
     * In case the Report found by the `where` argument doesn't exist, create a new Report with this data.
     */
    create: XOR<ReportCreateInput, ReportUncheckedCreateInput>
    /**
     * In case the Report was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReportUpdateInput, ReportUncheckedUpdateInput>
  }


  /**
   * Report delete
   */
  export type ReportDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * Filter which Report to delete.
     */
    where: ReportWhereUniqueInput
  }


  /**
   * Report deleteMany
   */
  export type ReportDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Reports to delete
     */
    where?: ReportWhereInput
  }


  /**
   * Report.files
   */
  export type Report$filesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileAttachment
     */
    select?: FileAttachmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FileAttachmentInclude<ExtArgs> | null
    where?: FileAttachmentWhereInput
    orderBy?: FileAttachmentOrderByWithRelationInput | FileAttachmentOrderByWithRelationInput[]
    cursor?: FileAttachmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FileAttachmentScalarFieldEnum | FileAttachmentScalarFieldEnum[]
  }


  /**
   * Report.feedbacks
   */
  export type Report$feedbacksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeedbackInclude<ExtArgs> | null
    where?: FeedbackWhereInput
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    cursor?: FeedbackWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FeedbackScalarFieldEnum | FeedbackScalarFieldEnum[]
  }


  /**
   * Report.submissions
   */
  export type Report$submissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubmissionInclude<ExtArgs> | null
    where?: SubmissionWhereInput
    orderBy?: SubmissionOrderByWithRelationInput | SubmissionOrderByWithRelationInput[]
    cursor?: SubmissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SubmissionScalarFieldEnum | SubmissionScalarFieldEnum[]
  }


  /**
   * Report without action
   */
  export type ReportDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ReportInclude<ExtArgs> | null
  }



  /**
   * Model FileAttachment
   */

  export type AggregateFileAttachment = {
    _count: FileAttachmentCountAggregateOutputType | null
    _avg: FileAttachmentAvgAggregateOutputType | null
    _sum: FileAttachmentSumAggregateOutputType | null
    _min: FileAttachmentMinAggregateOutputType | null
    _max: FileAttachmentMaxAggregateOutputType | null
  }

  export type FileAttachmentAvgAggregateOutputType = {
    fileId: number | null
    reportId: number | null
    submissionId: number | null
  }

  export type FileAttachmentSumAggregateOutputType = {
    fileId: number | null
    reportId: number | null
    submissionId: number | null
  }

  export type FileAttachmentMinAggregateOutputType = {
    fileId: number | null
    reportId: number | null
    submissionId: number | null
    filePath: string | null
    fileType: string | null
    fileName: string | null
  }

  export type FileAttachmentMaxAggregateOutputType = {
    fileId: number | null
    reportId: number | null
    submissionId: number | null
    filePath: string | null
    fileType: string | null
    fileName: string | null
  }

  export type FileAttachmentCountAggregateOutputType = {
    fileId: number
    reportId: number
    submissionId: number
    filePath: number
    fileType: number
    fileName: number
    _all: number
  }


  export type FileAttachmentAvgAggregateInputType = {
    fileId?: true
    reportId?: true
    submissionId?: true
  }

  export type FileAttachmentSumAggregateInputType = {
    fileId?: true
    reportId?: true
    submissionId?: true
  }

  export type FileAttachmentMinAggregateInputType = {
    fileId?: true
    reportId?: true
    submissionId?: true
    filePath?: true
    fileType?: true
    fileName?: true
  }

  export type FileAttachmentMaxAggregateInputType = {
    fileId?: true
    reportId?: true
    submissionId?: true
    filePath?: true
    fileType?: true
    fileName?: true
  }

  export type FileAttachmentCountAggregateInputType = {
    fileId?: true
    reportId?: true
    submissionId?: true
    filePath?: true
    fileType?: true
    fileName?: true
    _all?: true
  }

  export type FileAttachmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FileAttachment to aggregate.
     */
    where?: FileAttachmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FileAttachments to fetch.
     */
    orderBy?: FileAttachmentOrderByWithRelationInput | FileAttachmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FileAttachmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FileAttachments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FileAttachments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FileAttachments
    **/
    _count?: true | FileAttachmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FileAttachmentAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FileAttachmentSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FileAttachmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FileAttachmentMaxAggregateInputType
  }

  export type GetFileAttachmentAggregateType<T extends FileAttachmentAggregateArgs> = {
        [P in keyof T & keyof AggregateFileAttachment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFileAttachment[P]>
      : GetScalarType<T[P], AggregateFileAttachment[P]>
  }




  export type FileAttachmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FileAttachmentWhereInput
    orderBy?: FileAttachmentOrderByWithAggregationInput | FileAttachmentOrderByWithAggregationInput[]
    by: FileAttachmentScalarFieldEnum[] | FileAttachmentScalarFieldEnum
    having?: FileAttachmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FileAttachmentCountAggregateInputType | true
    _avg?: FileAttachmentAvgAggregateInputType
    _sum?: FileAttachmentSumAggregateInputType
    _min?: FileAttachmentMinAggregateInputType
    _max?: FileAttachmentMaxAggregateInputType
  }

  export type FileAttachmentGroupByOutputType = {
    fileId: number
    reportId: number
    submissionId: number
    filePath: string
    fileType: string
    fileName: string
    _count: FileAttachmentCountAggregateOutputType | null
    _avg: FileAttachmentAvgAggregateOutputType | null
    _sum: FileAttachmentSumAggregateOutputType | null
    _min: FileAttachmentMinAggregateOutputType | null
    _max: FileAttachmentMaxAggregateOutputType | null
  }

  type GetFileAttachmentGroupByPayload<T extends FileAttachmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FileAttachmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FileAttachmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FileAttachmentGroupByOutputType[P]>
            : GetScalarType<T[P], FileAttachmentGroupByOutputType[P]>
        }
      >
    >


  export type FileAttachmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    fileId?: boolean
    reportId?: boolean
    submissionId?: boolean
    filePath?: boolean
    fileType?: boolean
    fileName?: boolean
    report?: boolean | ReportDefaultArgs<ExtArgs>
    submission?: boolean | SubmissionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["fileAttachment"]>

  export type FileAttachmentSelectScalar = {
    fileId?: boolean
    reportId?: boolean
    submissionId?: boolean
    filePath?: boolean
    fileType?: boolean
    fileName?: boolean
  }

  export type FileAttachmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    report?: boolean | ReportDefaultArgs<ExtArgs>
    submission?: boolean | SubmissionDefaultArgs<ExtArgs>
  }


  export type $FileAttachmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FileAttachment"
    objects: {
      report: Prisma.$ReportPayload<ExtArgs>
      submission: Prisma.$SubmissionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      fileId: number
      reportId: number
      submissionId: number
      filePath: string
      fileType: string
      fileName: string
    }, ExtArgs["result"]["fileAttachment"]>
    composites: {}
  }


  type FileAttachmentGetPayload<S extends boolean | null | undefined | FileAttachmentDefaultArgs> = $Result.GetResult<Prisma.$FileAttachmentPayload, S>

  type FileAttachmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FileAttachmentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FileAttachmentCountAggregateInputType | true
    }

  export interface FileAttachmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FileAttachment'], meta: { name: 'FileAttachment' } }
    /**
     * Find zero or one FileAttachment that matches the filter.
     * @param {FileAttachmentFindUniqueArgs} args - Arguments to find a FileAttachment
     * @example
     * // Get one FileAttachment
     * const fileAttachment = await prisma.fileAttachment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FileAttachmentFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, FileAttachmentFindUniqueArgs<ExtArgs>>
    ): Prisma__FileAttachmentClient<$Result.GetResult<Prisma.$FileAttachmentPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one FileAttachment that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {FileAttachmentFindUniqueOrThrowArgs} args - Arguments to find a FileAttachment
     * @example
     * // Get one FileAttachment
     * const fileAttachment = await prisma.fileAttachment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends FileAttachmentFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FileAttachmentFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__FileAttachmentClient<$Result.GetResult<Prisma.$FileAttachmentPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first FileAttachment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileAttachmentFindFirstArgs} args - Arguments to find a FileAttachment
     * @example
     * // Get one FileAttachment
     * const fileAttachment = await prisma.fileAttachment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FileAttachmentFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, FileAttachmentFindFirstArgs<ExtArgs>>
    ): Prisma__FileAttachmentClient<$Result.GetResult<Prisma.$FileAttachmentPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first FileAttachment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileAttachmentFindFirstOrThrowArgs} args - Arguments to find a FileAttachment
     * @example
     * // Get one FileAttachment
     * const fileAttachment = await prisma.fileAttachment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends FileAttachmentFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FileAttachmentFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__FileAttachmentClient<$Result.GetResult<Prisma.$FileAttachmentPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more FileAttachments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileAttachmentFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FileAttachments
     * const fileAttachments = await prisma.fileAttachment.findMany()
     * 
     * // Get first 10 FileAttachments
     * const fileAttachments = await prisma.fileAttachment.findMany({ take: 10 })
     * 
     * // Only select the `fileId`
     * const fileAttachmentWithFileIdOnly = await prisma.fileAttachment.findMany({ select: { fileId: true } })
     * 
    **/
    findMany<T extends FileAttachmentFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FileAttachmentFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FileAttachmentPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a FileAttachment.
     * @param {FileAttachmentCreateArgs} args - Arguments to create a FileAttachment.
     * @example
     * // Create one FileAttachment
     * const FileAttachment = await prisma.fileAttachment.create({
     *   data: {
     *     // ... data to create a FileAttachment
     *   }
     * })
     * 
    **/
    create<T extends FileAttachmentCreateArgs<ExtArgs>>(
      args: SelectSubset<T, FileAttachmentCreateArgs<ExtArgs>>
    ): Prisma__FileAttachmentClient<$Result.GetResult<Prisma.$FileAttachmentPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many FileAttachments.
     *     @param {FileAttachmentCreateManyArgs} args - Arguments to create many FileAttachments.
     *     @example
     *     // Create many FileAttachments
     *     const fileAttachment = await prisma.fileAttachment.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends FileAttachmentCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FileAttachmentCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a FileAttachment.
     * @param {FileAttachmentDeleteArgs} args - Arguments to delete one FileAttachment.
     * @example
     * // Delete one FileAttachment
     * const FileAttachment = await prisma.fileAttachment.delete({
     *   where: {
     *     // ... filter to delete one FileAttachment
     *   }
     * })
     * 
    **/
    delete<T extends FileAttachmentDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, FileAttachmentDeleteArgs<ExtArgs>>
    ): Prisma__FileAttachmentClient<$Result.GetResult<Prisma.$FileAttachmentPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one FileAttachment.
     * @param {FileAttachmentUpdateArgs} args - Arguments to update one FileAttachment.
     * @example
     * // Update one FileAttachment
     * const fileAttachment = await prisma.fileAttachment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FileAttachmentUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, FileAttachmentUpdateArgs<ExtArgs>>
    ): Prisma__FileAttachmentClient<$Result.GetResult<Prisma.$FileAttachmentPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more FileAttachments.
     * @param {FileAttachmentDeleteManyArgs} args - Arguments to filter FileAttachments to delete.
     * @example
     * // Delete a few FileAttachments
     * const { count } = await prisma.fileAttachment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FileAttachmentDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FileAttachmentDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FileAttachments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileAttachmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FileAttachments
     * const fileAttachment = await prisma.fileAttachment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FileAttachmentUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, FileAttachmentUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one FileAttachment.
     * @param {FileAttachmentUpsertArgs} args - Arguments to update or create a FileAttachment.
     * @example
     * // Update or create a FileAttachment
     * const fileAttachment = await prisma.fileAttachment.upsert({
     *   create: {
     *     // ... data to create a FileAttachment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FileAttachment we want to update
     *   }
     * })
    **/
    upsert<T extends FileAttachmentUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, FileAttachmentUpsertArgs<ExtArgs>>
    ): Prisma__FileAttachmentClient<$Result.GetResult<Prisma.$FileAttachmentPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of FileAttachments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileAttachmentCountArgs} args - Arguments to filter FileAttachments to count.
     * @example
     * // Count the number of FileAttachments
     * const count = await prisma.fileAttachment.count({
     *   where: {
     *     // ... the filter for the FileAttachments we want to count
     *   }
     * })
    **/
    count<T extends FileAttachmentCountArgs>(
      args?: Subset<T, FileAttachmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FileAttachmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FileAttachment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileAttachmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FileAttachmentAggregateArgs>(args: Subset<T, FileAttachmentAggregateArgs>): Prisma.PrismaPromise<GetFileAttachmentAggregateType<T>>

    /**
     * Group by FileAttachment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileAttachmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FileAttachmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FileAttachmentGroupByArgs['orderBy'] }
        : { orderBy?: FileAttachmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FileAttachmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFileAttachmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FileAttachment model
   */
  readonly fields: FileAttachmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FileAttachment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FileAttachmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    report<T extends ReportDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ReportDefaultArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    submission<T extends SubmissionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SubmissionDefaultArgs<ExtArgs>>): Prisma__SubmissionClient<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the FileAttachment model
   */ 
  interface FileAttachmentFieldRefs {
    readonly fileId: FieldRef<"FileAttachment", 'Int'>
    readonly reportId: FieldRef<"FileAttachment", 'Int'>
    readonly submissionId: FieldRef<"FileAttachment", 'Int'>
    readonly filePath: FieldRef<"FileAttachment", 'String'>
    readonly fileType: FieldRef<"FileAttachment", 'String'>
    readonly fileName: FieldRef<"FileAttachment", 'String'>
  }
    

  // Custom InputTypes

  /**
   * FileAttachment findUnique
   */
  export type FileAttachmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileAttachment
     */
    select?: FileAttachmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FileAttachmentInclude<ExtArgs> | null
    /**
     * Filter, which FileAttachment to fetch.
     */
    where: FileAttachmentWhereUniqueInput
  }


  /**
   * FileAttachment findUniqueOrThrow
   */
  export type FileAttachmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileAttachment
     */
    select?: FileAttachmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FileAttachmentInclude<ExtArgs> | null
    /**
     * Filter, which FileAttachment to fetch.
     */
    where: FileAttachmentWhereUniqueInput
  }


  /**
   * FileAttachment findFirst
   */
  export type FileAttachmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileAttachment
     */
    select?: FileAttachmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FileAttachmentInclude<ExtArgs> | null
    /**
     * Filter, which FileAttachment to fetch.
     */
    where?: FileAttachmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FileAttachments to fetch.
     */
    orderBy?: FileAttachmentOrderByWithRelationInput | FileAttachmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FileAttachments.
     */
    cursor?: FileAttachmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FileAttachments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FileAttachments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FileAttachments.
     */
    distinct?: FileAttachmentScalarFieldEnum | FileAttachmentScalarFieldEnum[]
  }


  /**
   * FileAttachment findFirstOrThrow
   */
  export type FileAttachmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileAttachment
     */
    select?: FileAttachmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FileAttachmentInclude<ExtArgs> | null
    /**
     * Filter, which FileAttachment to fetch.
     */
    where?: FileAttachmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FileAttachments to fetch.
     */
    orderBy?: FileAttachmentOrderByWithRelationInput | FileAttachmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FileAttachments.
     */
    cursor?: FileAttachmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FileAttachments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FileAttachments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FileAttachments.
     */
    distinct?: FileAttachmentScalarFieldEnum | FileAttachmentScalarFieldEnum[]
  }


  /**
   * FileAttachment findMany
   */
  export type FileAttachmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileAttachment
     */
    select?: FileAttachmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FileAttachmentInclude<ExtArgs> | null
    /**
     * Filter, which FileAttachments to fetch.
     */
    where?: FileAttachmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FileAttachments to fetch.
     */
    orderBy?: FileAttachmentOrderByWithRelationInput | FileAttachmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FileAttachments.
     */
    cursor?: FileAttachmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FileAttachments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FileAttachments.
     */
    skip?: number
    distinct?: FileAttachmentScalarFieldEnum | FileAttachmentScalarFieldEnum[]
  }


  /**
   * FileAttachment create
   */
  export type FileAttachmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileAttachment
     */
    select?: FileAttachmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FileAttachmentInclude<ExtArgs> | null
    /**
     * The data needed to create a FileAttachment.
     */
    data: XOR<FileAttachmentCreateInput, FileAttachmentUncheckedCreateInput>
  }


  /**
   * FileAttachment createMany
   */
  export type FileAttachmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FileAttachments.
     */
    data: FileAttachmentCreateManyInput | FileAttachmentCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * FileAttachment update
   */
  export type FileAttachmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileAttachment
     */
    select?: FileAttachmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FileAttachmentInclude<ExtArgs> | null
    /**
     * The data needed to update a FileAttachment.
     */
    data: XOR<FileAttachmentUpdateInput, FileAttachmentUncheckedUpdateInput>
    /**
     * Choose, which FileAttachment to update.
     */
    where: FileAttachmentWhereUniqueInput
  }


  /**
   * FileAttachment updateMany
   */
  export type FileAttachmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FileAttachments.
     */
    data: XOR<FileAttachmentUpdateManyMutationInput, FileAttachmentUncheckedUpdateManyInput>
    /**
     * Filter which FileAttachments to update
     */
    where?: FileAttachmentWhereInput
  }


  /**
   * FileAttachment upsert
   */
  export type FileAttachmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileAttachment
     */
    select?: FileAttachmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FileAttachmentInclude<ExtArgs> | null
    /**
     * The filter to search for the FileAttachment to update in case it exists.
     */
    where: FileAttachmentWhereUniqueInput
    /**
     * In case the FileAttachment found by the `where` argument doesn't exist, create a new FileAttachment with this data.
     */
    create: XOR<FileAttachmentCreateInput, FileAttachmentUncheckedCreateInput>
    /**
     * In case the FileAttachment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FileAttachmentUpdateInput, FileAttachmentUncheckedUpdateInput>
  }


  /**
   * FileAttachment delete
   */
  export type FileAttachmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileAttachment
     */
    select?: FileAttachmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FileAttachmentInclude<ExtArgs> | null
    /**
     * Filter which FileAttachment to delete.
     */
    where: FileAttachmentWhereUniqueInput
  }


  /**
   * FileAttachment deleteMany
   */
  export type FileAttachmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FileAttachments to delete
     */
    where?: FileAttachmentWhereInput
  }


  /**
   * FileAttachment without action
   */
  export type FileAttachmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileAttachment
     */
    select?: FileAttachmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FileAttachmentInclude<ExtArgs> | null
  }



  /**
   * Model Feedback
   */

  export type AggregateFeedback = {
    _count: FeedbackCountAggregateOutputType | null
    _avg: FeedbackAvgAggregateOutputType | null
    _sum: FeedbackSumAggregateOutputType | null
    _min: FeedbackMinAggregateOutputType | null
    _max: FeedbackMaxAggregateOutputType | null
  }

  export type FeedbackAvgAggregateOutputType = {
    feedbackId: number | null
    reportId: number | null
    createdBy: number | null
    submissionId: number | null
  }

  export type FeedbackSumAggregateOutputType = {
    feedbackId: number | null
    reportId: number | null
    createdBy: number | null
    submissionId: number | null
  }

  export type FeedbackMinAggregateOutputType = {
    feedbackId: number | null
    reportId: number | null
    createdBy: number | null
    content: string | null
    createdAt: Date | null
    submissionId: number | null
  }

  export type FeedbackMaxAggregateOutputType = {
    feedbackId: number | null
    reportId: number | null
    createdBy: number | null
    content: string | null
    createdAt: Date | null
    submissionId: number | null
  }

  export type FeedbackCountAggregateOutputType = {
    feedbackId: number
    reportId: number
    createdBy: number
    content: number
    createdAt: number
    submissionId: number
    _all: number
  }


  export type FeedbackAvgAggregateInputType = {
    feedbackId?: true
    reportId?: true
    createdBy?: true
    submissionId?: true
  }

  export type FeedbackSumAggregateInputType = {
    feedbackId?: true
    reportId?: true
    createdBy?: true
    submissionId?: true
  }

  export type FeedbackMinAggregateInputType = {
    feedbackId?: true
    reportId?: true
    createdBy?: true
    content?: true
    createdAt?: true
    submissionId?: true
  }

  export type FeedbackMaxAggregateInputType = {
    feedbackId?: true
    reportId?: true
    createdBy?: true
    content?: true
    createdAt?: true
    submissionId?: true
  }

  export type FeedbackCountAggregateInputType = {
    feedbackId?: true
    reportId?: true
    createdBy?: true
    content?: true
    createdAt?: true
    submissionId?: true
    _all?: true
  }

  export type FeedbackAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Feedback to aggregate.
     */
    where?: FeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Feedbacks to fetch.
     */
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Feedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Feedbacks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Feedbacks
    **/
    _count?: true | FeedbackCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FeedbackAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FeedbackSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FeedbackMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FeedbackMaxAggregateInputType
  }

  export type GetFeedbackAggregateType<T extends FeedbackAggregateArgs> = {
        [P in keyof T & keyof AggregateFeedback]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFeedback[P]>
      : GetScalarType<T[P], AggregateFeedback[P]>
  }




  export type FeedbackGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FeedbackWhereInput
    orderBy?: FeedbackOrderByWithAggregationInput | FeedbackOrderByWithAggregationInput[]
    by: FeedbackScalarFieldEnum[] | FeedbackScalarFieldEnum
    having?: FeedbackScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FeedbackCountAggregateInputType | true
    _avg?: FeedbackAvgAggregateInputType
    _sum?: FeedbackSumAggregateInputType
    _min?: FeedbackMinAggregateInputType
    _max?: FeedbackMaxAggregateInputType
  }

  export type FeedbackGroupByOutputType = {
    feedbackId: number
    reportId: number
    createdBy: number
    content: string
    createdAt: Date
    submissionId: number | null
    _count: FeedbackCountAggregateOutputType | null
    _avg: FeedbackAvgAggregateOutputType | null
    _sum: FeedbackSumAggregateOutputType | null
    _min: FeedbackMinAggregateOutputType | null
    _max: FeedbackMaxAggregateOutputType | null
  }

  type GetFeedbackGroupByPayload<T extends FeedbackGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FeedbackGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FeedbackGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FeedbackGroupByOutputType[P]>
            : GetScalarType<T[P], FeedbackGroupByOutputType[P]>
        }
      >
    >


  export type FeedbackSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    feedbackId?: boolean
    reportId?: boolean
    createdBy?: boolean
    content?: boolean
    createdAt?: boolean
    submissionId?: boolean
    report?: boolean | ReportDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    submission?: boolean | Feedback$submissionArgs<ExtArgs>
  }, ExtArgs["result"]["feedback"]>

  export type FeedbackSelectScalar = {
    feedbackId?: boolean
    reportId?: boolean
    createdBy?: boolean
    content?: boolean
    createdAt?: boolean
    submissionId?: boolean
  }

  export type FeedbackInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    report?: boolean | ReportDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    submission?: boolean | Feedback$submissionArgs<ExtArgs>
  }


  export type $FeedbackPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Feedback"
    objects: {
      report: Prisma.$ReportPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
      submission: Prisma.$SubmissionPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      feedbackId: number
      reportId: number
      createdBy: number
      content: string
      createdAt: Date
      submissionId: number | null
    }, ExtArgs["result"]["feedback"]>
    composites: {}
  }


  type FeedbackGetPayload<S extends boolean | null | undefined | FeedbackDefaultArgs> = $Result.GetResult<Prisma.$FeedbackPayload, S>

  type FeedbackCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FeedbackFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FeedbackCountAggregateInputType | true
    }

  export interface FeedbackDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Feedback'], meta: { name: 'Feedback' } }
    /**
     * Find zero or one Feedback that matches the filter.
     * @param {FeedbackFindUniqueArgs} args - Arguments to find a Feedback
     * @example
     * // Get one Feedback
     * const feedback = await prisma.feedback.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FeedbackFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, FeedbackFindUniqueArgs<ExtArgs>>
    ): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Feedback that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {FeedbackFindUniqueOrThrowArgs} args - Arguments to find a Feedback
     * @example
     * // Get one Feedback
     * const feedback = await prisma.feedback.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends FeedbackFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FeedbackFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Feedback that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackFindFirstArgs} args - Arguments to find a Feedback
     * @example
     * // Get one Feedback
     * const feedback = await prisma.feedback.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FeedbackFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, FeedbackFindFirstArgs<ExtArgs>>
    ): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Feedback that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackFindFirstOrThrowArgs} args - Arguments to find a Feedback
     * @example
     * // Get one Feedback
     * const feedback = await prisma.feedback.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends FeedbackFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FeedbackFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Feedbacks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Feedbacks
     * const feedbacks = await prisma.feedback.findMany()
     * 
     * // Get first 10 Feedbacks
     * const feedbacks = await prisma.feedback.findMany({ take: 10 })
     * 
     * // Only select the `feedbackId`
     * const feedbackWithFeedbackIdOnly = await prisma.feedback.findMany({ select: { feedbackId: true } })
     * 
    **/
    findMany<T extends FeedbackFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FeedbackFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Feedback.
     * @param {FeedbackCreateArgs} args - Arguments to create a Feedback.
     * @example
     * // Create one Feedback
     * const Feedback = await prisma.feedback.create({
     *   data: {
     *     // ... data to create a Feedback
     *   }
     * })
     * 
    **/
    create<T extends FeedbackCreateArgs<ExtArgs>>(
      args: SelectSubset<T, FeedbackCreateArgs<ExtArgs>>
    ): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Feedbacks.
     *     @param {FeedbackCreateManyArgs} args - Arguments to create many Feedbacks.
     *     @example
     *     // Create many Feedbacks
     *     const feedback = await prisma.feedback.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends FeedbackCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FeedbackCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Feedback.
     * @param {FeedbackDeleteArgs} args - Arguments to delete one Feedback.
     * @example
     * // Delete one Feedback
     * const Feedback = await prisma.feedback.delete({
     *   where: {
     *     // ... filter to delete one Feedback
     *   }
     * })
     * 
    **/
    delete<T extends FeedbackDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, FeedbackDeleteArgs<ExtArgs>>
    ): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Feedback.
     * @param {FeedbackUpdateArgs} args - Arguments to update one Feedback.
     * @example
     * // Update one Feedback
     * const feedback = await prisma.feedback.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FeedbackUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, FeedbackUpdateArgs<ExtArgs>>
    ): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Feedbacks.
     * @param {FeedbackDeleteManyArgs} args - Arguments to filter Feedbacks to delete.
     * @example
     * // Delete a few Feedbacks
     * const { count } = await prisma.feedback.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FeedbackDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FeedbackDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Feedbacks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Feedbacks
     * const feedback = await prisma.feedback.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FeedbackUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, FeedbackUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Feedback.
     * @param {FeedbackUpsertArgs} args - Arguments to update or create a Feedback.
     * @example
     * // Update or create a Feedback
     * const feedback = await prisma.feedback.upsert({
     *   create: {
     *     // ... data to create a Feedback
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Feedback we want to update
     *   }
     * })
    **/
    upsert<T extends FeedbackUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, FeedbackUpsertArgs<ExtArgs>>
    ): Prisma__FeedbackClient<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Feedbacks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackCountArgs} args - Arguments to filter Feedbacks to count.
     * @example
     * // Count the number of Feedbacks
     * const count = await prisma.feedback.count({
     *   where: {
     *     // ... the filter for the Feedbacks we want to count
     *   }
     * })
    **/
    count<T extends FeedbackCountArgs>(
      args?: Subset<T, FeedbackCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FeedbackCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Feedback.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FeedbackAggregateArgs>(args: Subset<T, FeedbackAggregateArgs>): Prisma.PrismaPromise<GetFeedbackAggregateType<T>>

    /**
     * Group by Feedback.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FeedbackGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FeedbackGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FeedbackGroupByArgs['orderBy'] }
        : { orderBy?: FeedbackGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FeedbackGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFeedbackGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Feedback model
   */
  readonly fields: FeedbackFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Feedback.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FeedbackClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    report<T extends ReportDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ReportDefaultArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    submission<T extends Feedback$submissionArgs<ExtArgs> = {}>(args?: Subset<T, Feedback$submissionArgs<ExtArgs>>): Prisma__SubmissionClient<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Feedback model
   */ 
  interface FeedbackFieldRefs {
    readonly feedbackId: FieldRef<"Feedback", 'Int'>
    readonly reportId: FieldRef<"Feedback", 'Int'>
    readonly createdBy: FieldRef<"Feedback", 'Int'>
    readonly content: FieldRef<"Feedback", 'String'>
    readonly createdAt: FieldRef<"Feedback", 'DateTime'>
    readonly submissionId: FieldRef<"Feedback", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Feedback findUnique
   */
  export type FeedbackFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * Filter, which Feedback to fetch.
     */
    where: FeedbackWhereUniqueInput
  }


  /**
   * Feedback findUniqueOrThrow
   */
  export type FeedbackFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * Filter, which Feedback to fetch.
     */
    where: FeedbackWhereUniqueInput
  }


  /**
   * Feedback findFirst
   */
  export type FeedbackFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * Filter, which Feedback to fetch.
     */
    where?: FeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Feedbacks to fetch.
     */
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Feedbacks.
     */
    cursor?: FeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Feedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Feedbacks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Feedbacks.
     */
    distinct?: FeedbackScalarFieldEnum | FeedbackScalarFieldEnum[]
  }


  /**
   * Feedback findFirstOrThrow
   */
  export type FeedbackFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * Filter, which Feedback to fetch.
     */
    where?: FeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Feedbacks to fetch.
     */
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Feedbacks.
     */
    cursor?: FeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Feedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Feedbacks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Feedbacks.
     */
    distinct?: FeedbackScalarFieldEnum | FeedbackScalarFieldEnum[]
  }


  /**
   * Feedback findMany
   */
  export type FeedbackFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * Filter, which Feedbacks to fetch.
     */
    where?: FeedbackWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Feedbacks to fetch.
     */
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Feedbacks.
     */
    cursor?: FeedbackWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Feedbacks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Feedbacks.
     */
    skip?: number
    distinct?: FeedbackScalarFieldEnum | FeedbackScalarFieldEnum[]
  }


  /**
   * Feedback create
   */
  export type FeedbackCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * The data needed to create a Feedback.
     */
    data: XOR<FeedbackCreateInput, FeedbackUncheckedCreateInput>
  }


  /**
   * Feedback createMany
   */
  export type FeedbackCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Feedbacks.
     */
    data: FeedbackCreateManyInput | FeedbackCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Feedback update
   */
  export type FeedbackUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * The data needed to update a Feedback.
     */
    data: XOR<FeedbackUpdateInput, FeedbackUncheckedUpdateInput>
    /**
     * Choose, which Feedback to update.
     */
    where: FeedbackWhereUniqueInput
  }


  /**
   * Feedback updateMany
   */
  export type FeedbackUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Feedbacks.
     */
    data: XOR<FeedbackUpdateManyMutationInput, FeedbackUncheckedUpdateManyInput>
    /**
     * Filter which Feedbacks to update
     */
    where?: FeedbackWhereInput
  }


  /**
   * Feedback upsert
   */
  export type FeedbackUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * The filter to search for the Feedback to update in case it exists.
     */
    where: FeedbackWhereUniqueInput
    /**
     * In case the Feedback found by the `where` argument doesn't exist, create a new Feedback with this data.
     */
    create: XOR<FeedbackCreateInput, FeedbackUncheckedCreateInput>
    /**
     * In case the Feedback was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FeedbackUpdateInput, FeedbackUncheckedUpdateInput>
  }


  /**
   * Feedback delete
   */
  export type FeedbackDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeedbackInclude<ExtArgs> | null
    /**
     * Filter which Feedback to delete.
     */
    where: FeedbackWhereUniqueInput
  }


  /**
   * Feedback deleteMany
   */
  export type FeedbackDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Feedbacks to delete
     */
    where?: FeedbackWhereInput
  }


  /**
   * Feedback.submission
   */
  export type Feedback$submissionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubmissionInclude<ExtArgs> | null
    where?: SubmissionWhereInput
  }


  /**
   * Feedback without action
   */
  export type FeedbackDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeedbackInclude<ExtArgs> | null
  }



  /**
   * Model Submission
   */

  export type AggregateSubmission = {
    _count: SubmissionCountAggregateOutputType | null
    _avg: SubmissionAvgAggregateOutputType | null
    _sum: SubmissionSumAggregateOutputType | null
    _min: SubmissionMinAggregateOutputType | null
    _max: SubmissionMaxAggregateOutputType | null
  }

  export type SubmissionAvgAggregateOutputType = {
    submissionId: number | null
    reportId: number | null
    userId: number | null
  }

  export type SubmissionSumAggregateOutputType = {
    submissionId: number | null
    reportId: number | null
    userId: number | null
  }

  export type SubmissionMinAggregateOutputType = {
    submissionId: number | null
    reportId: number | null
    userId: number | null
    status: string | null
    submissionDate: Date | null
  }

  export type SubmissionMaxAggregateOutputType = {
    submissionId: number | null
    reportId: number | null
    userId: number | null
    status: string | null
    submissionDate: Date | null
  }

  export type SubmissionCountAggregateOutputType = {
    submissionId: number
    reportId: number
    userId: number
    status: number
    submissionDate: number
    _all: number
  }


  export type SubmissionAvgAggregateInputType = {
    submissionId?: true
    reportId?: true
    userId?: true
  }

  export type SubmissionSumAggregateInputType = {
    submissionId?: true
    reportId?: true
    userId?: true
  }

  export type SubmissionMinAggregateInputType = {
    submissionId?: true
    reportId?: true
    userId?: true
    status?: true
    submissionDate?: true
  }

  export type SubmissionMaxAggregateInputType = {
    submissionId?: true
    reportId?: true
    userId?: true
    status?: true
    submissionDate?: true
  }

  export type SubmissionCountAggregateInputType = {
    submissionId?: true
    reportId?: true
    userId?: true
    status?: true
    submissionDate?: true
    _all?: true
  }

  export type SubmissionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Submission to aggregate.
     */
    where?: SubmissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Submissions to fetch.
     */
    orderBy?: SubmissionOrderByWithRelationInput | SubmissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SubmissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Submissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Submissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Submissions
    **/
    _count?: true | SubmissionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SubmissionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SubmissionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SubmissionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SubmissionMaxAggregateInputType
  }

  export type GetSubmissionAggregateType<T extends SubmissionAggregateArgs> = {
        [P in keyof T & keyof AggregateSubmission]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSubmission[P]>
      : GetScalarType<T[P], AggregateSubmission[P]>
  }




  export type SubmissionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SubmissionWhereInput
    orderBy?: SubmissionOrderByWithAggregationInput | SubmissionOrderByWithAggregationInput[]
    by: SubmissionScalarFieldEnum[] | SubmissionScalarFieldEnum
    having?: SubmissionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SubmissionCountAggregateInputType | true
    _avg?: SubmissionAvgAggregateInputType
    _sum?: SubmissionSumAggregateInputType
    _min?: SubmissionMinAggregateInputType
    _max?: SubmissionMaxAggregateInputType
  }

  export type SubmissionGroupByOutputType = {
    submissionId: number
    reportId: number
    userId: number
    status: string
    submissionDate: Date
    _count: SubmissionCountAggregateOutputType | null
    _avg: SubmissionAvgAggregateOutputType | null
    _sum: SubmissionSumAggregateOutputType | null
    _min: SubmissionMinAggregateOutputType | null
    _max: SubmissionMaxAggregateOutputType | null
  }

  type GetSubmissionGroupByPayload<T extends SubmissionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SubmissionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SubmissionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SubmissionGroupByOutputType[P]>
            : GetScalarType<T[P], SubmissionGroupByOutputType[P]>
        }
      >
    >


  export type SubmissionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    submissionId?: boolean
    reportId?: boolean
    userId?: boolean
    status?: boolean
    submissionDate?: boolean
    files?: boolean | Submission$filesArgs<ExtArgs>
    feedbacks?: boolean | Submission$feedbacksArgs<ExtArgs>
    report?: boolean | ReportDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    _count?: boolean | SubmissionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["submission"]>

  export type SubmissionSelectScalar = {
    submissionId?: boolean
    reportId?: boolean
    userId?: boolean
    status?: boolean
    submissionDate?: boolean
  }

  export type SubmissionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    files?: boolean | Submission$filesArgs<ExtArgs>
    feedbacks?: boolean | Submission$feedbacksArgs<ExtArgs>
    report?: boolean | ReportDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    _count?: boolean | SubmissionCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $SubmissionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Submission"
    objects: {
      files: Prisma.$FileAttachmentPayload<ExtArgs>[]
      feedbacks: Prisma.$FeedbackPayload<ExtArgs>[]
      report: Prisma.$ReportPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      submissionId: number
      reportId: number
      userId: number
      status: string
      submissionDate: Date
    }, ExtArgs["result"]["submission"]>
    composites: {}
  }


  type SubmissionGetPayload<S extends boolean | null | undefined | SubmissionDefaultArgs> = $Result.GetResult<Prisma.$SubmissionPayload, S>

  type SubmissionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SubmissionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SubmissionCountAggregateInputType | true
    }

  export interface SubmissionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Submission'], meta: { name: 'Submission' } }
    /**
     * Find zero or one Submission that matches the filter.
     * @param {SubmissionFindUniqueArgs} args - Arguments to find a Submission
     * @example
     * // Get one Submission
     * const submission = await prisma.submission.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SubmissionFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, SubmissionFindUniqueArgs<ExtArgs>>
    ): Prisma__SubmissionClient<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Submission that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SubmissionFindUniqueOrThrowArgs} args - Arguments to find a Submission
     * @example
     * // Get one Submission
     * const submission = await prisma.submission.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SubmissionFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SubmissionFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__SubmissionClient<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Submission that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubmissionFindFirstArgs} args - Arguments to find a Submission
     * @example
     * // Get one Submission
     * const submission = await prisma.submission.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SubmissionFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, SubmissionFindFirstArgs<ExtArgs>>
    ): Prisma__SubmissionClient<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Submission that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubmissionFindFirstOrThrowArgs} args - Arguments to find a Submission
     * @example
     * // Get one Submission
     * const submission = await prisma.submission.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SubmissionFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SubmissionFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__SubmissionClient<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Submissions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubmissionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Submissions
     * const submissions = await prisma.submission.findMany()
     * 
     * // Get first 10 Submissions
     * const submissions = await prisma.submission.findMany({ take: 10 })
     * 
     * // Only select the `submissionId`
     * const submissionWithSubmissionIdOnly = await prisma.submission.findMany({ select: { submissionId: true } })
     * 
    **/
    findMany<T extends SubmissionFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SubmissionFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Submission.
     * @param {SubmissionCreateArgs} args - Arguments to create a Submission.
     * @example
     * // Create one Submission
     * const Submission = await prisma.submission.create({
     *   data: {
     *     // ... data to create a Submission
     *   }
     * })
     * 
    **/
    create<T extends SubmissionCreateArgs<ExtArgs>>(
      args: SelectSubset<T, SubmissionCreateArgs<ExtArgs>>
    ): Prisma__SubmissionClient<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Submissions.
     *     @param {SubmissionCreateManyArgs} args - Arguments to create many Submissions.
     *     @example
     *     // Create many Submissions
     *     const submission = await prisma.submission.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SubmissionCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SubmissionCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Submission.
     * @param {SubmissionDeleteArgs} args - Arguments to delete one Submission.
     * @example
     * // Delete one Submission
     * const Submission = await prisma.submission.delete({
     *   where: {
     *     // ... filter to delete one Submission
     *   }
     * })
     * 
    **/
    delete<T extends SubmissionDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, SubmissionDeleteArgs<ExtArgs>>
    ): Prisma__SubmissionClient<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Submission.
     * @param {SubmissionUpdateArgs} args - Arguments to update one Submission.
     * @example
     * // Update one Submission
     * const submission = await prisma.submission.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SubmissionUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, SubmissionUpdateArgs<ExtArgs>>
    ): Prisma__SubmissionClient<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Submissions.
     * @param {SubmissionDeleteManyArgs} args - Arguments to filter Submissions to delete.
     * @example
     * // Delete a few Submissions
     * const { count } = await prisma.submission.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SubmissionDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SubmissionDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Submissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubmissionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Submissions
     * const submission = await prisma.submission.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SubmissionUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, SubmissionUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Submission.
     * @param {SubmissionUpsertArgs} args - Arguments to update or create a Submission.
     * @example
     * // Update or create a Submission
     * const submission = await prisma.submission.upsert({
     *   create: {
     *     // ... data to create a Submission
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Submission we want to update
     *   }
     * })
    **/
    upsert<T extends SubmissionUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, SubmissionUpsertArgs<ExtArgs>>
    ): Prisma__SubmissionClient<$Result.GetResult<Prisma.$SubmissionPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Submissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubmissionCountArgs} args - Arguments to filter Submissions to count.
     * @example
     * // Count the number of Submissions
     * const count = await prisma.submission.count({
     *   where: {
     *     // ... the filter for the Submissions we want to count
     *   }
     * })
    **/
    count<T extends SubmissionCountArgs>(
      args?: Subset<T, SubmissionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SubmissionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Submission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubmissionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SubmissionAggregateArgs>(args: Subset<T, SubmissionAggregateArgs>): Prisma.PrismaPromise<GetSubmissionAggregateType<T>>

    /**
     * Group by Submission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SubmissionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SubmissionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SubmissionGroupByArgs['orderBy'] }
        : { orderBy?: SubmissionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SubmissionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSubmissionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Submission model
   */
  readonly fields: SubmissionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Submission.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SubmissionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    files<T extends Submission$filesArgs<ExtArgs> = {}>(args?: Subset<T, Submission$filesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FileAttachmentPayload<ExtArgs>, T, 'findMany'> | Null>;

    feedbacks<T extends Submission$feedbacksArgs<ExtArgs> = {}>(args?: Subset<T, Submission$feedbacksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FeedbackPayload<ExtArgs>, T, 'findMany'> | Null>;

    report<T extends ReportDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ReportDefaultArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Submission model
   */ 
  interface SubmissionFieldRefs {
    readonly submissionId: FieldRef<"Submission", 'Int'>
    readonly reportId: FieldRef<"Submission", 'Int'>
    readonly userId: FieldRef<"Submission", 'Int'>
    readonly status: FieldRef<"Submission", 'String'>
    readonly submissionDate: FieldRef<"Submission", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Submission findUnique
   */
  export type SubmissionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubmissionInclude<ExtArgs> | null
    /**
     * Filter, which Submission to fetch.
     */
    where: SubmissionWhereUniqueInput
  }


  /**
   * Submission findUniqueOrThrow
   */
  export type SubmissionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubmissionInclude<ExtArgs> | null
    /**
     * Filter, which Submission to fetch.
     */
    where: SubmissionWhereUniqueInput
  }


  /**
   * Submission findFirst
   */
  export type SubmissionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubmissionInclude<ExtArgs> | null
    /**
     * Filter, which Submission to fetch.
     */
    where?: SubmissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Submissions to fetch.
     */
    orderBy?: SubmissionOrderByWithRelationInput | SubmissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Submissions.
     */
    cursor?: SubmissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Submissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Submissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Submissions.
     */
    distinct?: SubmissionScalarFieldEnum | SubmissionScalarFieldEnum[]
  }


  /**
   * Submission findFirstOrThrow
   */
  export type SubmissionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubmissionInclude<ExtArgs> | null
    /**
     * Filter, which Submission to fetch.
     */
    where?: SubmissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Submissions to fetch.
     */
    orderBy?: SubmissionOrderByWithRelationInput | SubmissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Submissions.
     */
    cursor?: SubmissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Submissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Submissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Submissions.
     */
    distinct?: SubmissionScalarFieldEnum | SubmissionScalarFieldEnum[]
  }


  /**
   * Submission findMany
   */
  export type SubmissionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubmissionInclude<ExtArgs> | null
    /**
     * Filter, which Submissions to fetch.
     */
    where?: SubmissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Submissions to fetch.
     */
    orderBy?: SubmissionOrderByWithRelationInput | SubmissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Submissions.
     */
    cursor?: SubmissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Submissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Submissions.
     */
    skip?: number
    distinct?: SubmissionScalarFieldEnum | SubmissionScalarFieldEnum[]
  }


  /**
   * Submission create
   */
  export type SubmissionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubmissionInclude<ExtArgs> | null
    /**
     * The data needed to create a Submission.
     */
    data: XOR<SubmissionCreateInput, SubmissionUncheckedCreateInput>
  }


  /**
   * Submission createMany
   */
  export type SubmissionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Submissions.
     */
    data: SubmissionCreateManyInput | SubmissionCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Submission update
   */
  export type SubmissionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubmissionInclude<ExtArgs> | null
    /**
     * The data needed to update a Submission.
     */
    data: XOR<SubmissionUpdateInput, SubmissionUncheckedUpdateInput>
    /**
     * Choose, which Submission to update.
     */
    where: SubmissionWhereUniqueInput
  }


  /**
   * Submission updateMany
   */
  export type SubmissionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Submissions.
     */
    data: XOR<SubmissionUpdateManyMutationInput, SubmissionUncheckedUpdateManyInput>
    /**
     * Filter which Submissions to update
     */
    where?: SubmissionWhereInput
  }


  /**
   * Submission upsert
   */
  export type SubmissionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubmissionInclude<ExtArgs> | null
    /**
     * The filter to search for the Submission to update in case it exists.
     */
    where: SubmissionWhereUniqueInput
    /**
     * In case the Submission found by the `where` argument doesn't exist, create a new Submission with this data.
     */
    create: XOR<SubmissionCreateInput, SubmissionUncheckedCreateInput>
    /**
     * In case the Submission was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SubmissionUpdateInput, SubmissionUncheckedUpdateInput>
  }


  /**
   * Submission delete
   */
  export type SubmissionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubmissionInclude<ExtArgs> | null
    /**
     * Filter which Submission to delete.
     */
    where: SubmissionWhereUniqueInput
  }


  /**
   * Submission deleteMany
   */
  export type SubmissionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Submissions to delete
     */
    where?: SubmissionWhereInput
  }


  /**
   * Submission.files
   */
  export type Submission$filesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FileAttachment
     */
    select?: FileAttachmentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FileAttachmentInclude<ExtArgs> | null
    where?: FileAttachmentWhereInput
    orderBy?: FileAttachmentOrderByWithRelationInput | FileAttachmentOrderByWithRelationInput[]
    cursor?: FileAttachmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FileAttachmentScalarFieldEnum | FileAttachmentScalarFieldEnum[]
  }


  /**
   * Submission.feedbacks
   */
  export type Submission$feedbacksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Feedback
     */
    select?: FeedbackSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FeedbackInclude<ExtArgs> | null
    where?: FeedbackWhereInput
    orderBy?: FeedbackOrderByWithRelationInput | FeedbackOrderByWithRelationInput[]
    cursor?: FeedbackWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FeedbackScalarFieldEnum | FeedbackScalarFieldEnum[]
  }


  /**
   * Submission without action
   */
  export type SubmissionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Submission
     */
    select?: SubmissionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SubmissionInclude<ExtArgs> | null
  }



  /**
   * Model Notification
   */

  export type AggregateNotification = {
    _count: NotificationCountAggregateOutputType | null
    _avg: NotificationAvgAggregateOutputType | null
    _sum: NotificationSumAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  export type NotificationAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type NotificationSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type NotificationMinAggregateOutputType = {
    id: number | null
    userId: number | null
    title: string | null
    message: string | null
    createdAt: Date | null
    read: boolean | null
    type: string | null
  }

  export type NotificationMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    title: string | null
    message: string | null
    createdAt: Date | null
    read: boolean | null
    type: string | null
  }

  export type NotificationCountAggregateOutputType = {
    id: number
    userId: number
    title: number
    message: number
    createdAt: number
    read: number
    type: number
    _all: number
  }


  export type NotificationAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type NotificationSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type NotificationMinAggregateInputType = {
    id?: true
    userId?: true
    title?: true
    message?: true
    createdAt?: true
    read?: true
    type?: true
  }

  export type NotificationMaxAggregateInputType = {
    id?: true
    userId?: true
    title?: true
    message?: true
    createdAt?: true
    read?: true
    type?: true
  }

  export type NotificationCountAggregateInputType = {
    id?: true
    userId?: true
    title?: true
    message?: true
    createdAt?: true
    read?: true
    type?: true
    _all?: true
  }

  export type NotificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notification to aggregate.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Notifications
    **/
    _count?: true | NotificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: NotificationAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: NotificationSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationMaxAggregateInputType
  }

  export type GetNotificationAggregateType<T extends NotificationAggregateArgs> = {
        [P in keyof T & keyof AggregateNotification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotification[P]>
      : GetScalarType<T[P], AggregateNotification[P]>
  }




  export type NotificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithAggregationInput | NotificationOrderByWithAggregationInput[]
    by: NotificationScalarFieldEnum[] | NotificationScalarFieldEnum
    having?: NotificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationCountAggregateInputType | true
    _avg?: NotificationAvgAggregateInputType
    _sum?: NotificationSumAggregateInputType
    _min?: NotificationMinAggregateInputType
    _max?: NotificationMaxAggregateInputType
  }

  export type NotificationGroupByOutputType = {
    id: number
    userId: number
    title: string
    message: string
    createdAt: Date
    read: boolean
    type: string
    _count: NotificationCountAggregateOutputType | null
    _avg: NotificationAvgAggregateOutputType | null
    _sum: NotificationSumAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  type GetNotificationGroupByPayload<T extends NotificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationGroupByOutputType[P]>
        }
      >
    >


  export type NotificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    title?: boolean
    message?: boolean
    createdAt?: boolean
    read?: boolean
    type?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectScalar = {
    id?: boolean
    userId?: boolean
    title?: boolean
    message?: boolean
    createdAt?: boolean
    read?: boolean
    type?: boolean
  }

  export type NotificationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }


  export type $NotificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Notification"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      userId: number
      title: string
      message: string
      createdAt: Date
      read: boolean
      type: string
    }, ExtArgs["result"]["notification"]>
    composites: {}
  }


  type NotificationGetPayload<S extends boolean | null | undefined | NotificationDefaultArgs> = $Result.GetResult<Prisma.$NotificationPayload, S>

  type NotificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<NotificationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: NotificationCountAggregateInputType | true
    }

  export interface NotificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Notification'], meta: { name: 'Notification' } }
    /**
     * Find zero or one Notification that matches the filter.
     * @param {NotificationFindUniqueArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends NotificationFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, NotificationFindUniqueArgs<ExtArgs>>
    ): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Notification that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {NotificationFindUniqueOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends NotificationFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificationFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Notification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends NotificationFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificationFindFirstArgs<ExtArgs>>
    ): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Notification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends NotificationFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificationFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Notifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notifications
     * const notifications = await prisma.notification.findMany()
     * 
     * // Get first 10 Notifications
     * const notifications = await prisma.notification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificationWithIdOnly = await prisma.notification.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends NotificationFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificationFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Notification.
     * @param {NotificationCreateArgs} args - Arguments to create a Notification.
     * @example
     * // Create one Notification
     * const Notification = await prisma.notification.create({
     *   data: {
     *     // ... data to create a Notification
     *   }
     * })
     * 
    **/
    create<T extends NotificationCreateArgs<ExtArgs>>(
      args: SelectSubset<T, NotificationCreateArgs<ExtArgs>>
    ): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Notifications.
     *     @param {NotificationCreateManyArgs} args - Arguments to create many Notifications.
     *     @example
     *     // Create many Notifications
     *     const notification = await prisma.notification.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends NotificationCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificationCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Notification.
     * @param {NotificationDeleteArgs} args - Arguments to delete one Notification.
     * @example
     * // Delete one Notification
     * const Notification = await prisma.notification.delete({
     *   where: {
     *     // ... filter to delete one Notification
     *   }
     * })
     * 
    **/
    delete<T extends NotificationDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, NotificationDeleteArgs<ExtArgs>>
    ): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Notification.
     * @param {NotificationUpdateArgs} args - Arguments to update one Notification.
     * @example
     * // Update one Notification
     * const notification = await prisma.notification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends NotificationUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, NotificationUpdateArgs<ExtArgs>>
    ): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Notifications.
     * @param {NotificationDeleteManyArgs} args - Arguments to filter Notifications to delete.
     * @example
     * // Delete a few Notifications
     * const { count } = await prisma.notification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends NotificationDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificationDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends NotificationUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, NotificationUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Notification.
     * @param {NotificationUpsertArgs} args - Arguments to update or create a Notification.
     * @example
     * // Update or create a Notification
     * const notification = await prisma.notification.upsert({
     *   create: {
     *     // ... data to create a Notification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Notification we want to update
     *   }
     * })
    **/
    upsert<T extends NotificationUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, NotificationUpsertArgs<ExtArgs>>
    ): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationCountArgs} args - Arguments to filter Notifications to count.
     * @example
     * // Count the number of Notifications
     * const count = await prisma.notification.count({
     *   where: {
     *     // ... the filter for the Notifications we want to count
     *   }
     * })
    **/
    count<T extends NotificationCountArgs>(
      args?: Subset<T, NotificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationAggregateArgs>(args: Subset<T, NotificationAggregateArgs>): Prisma.PrismaPromise<GetNotificationAggregateType<T>>

    /**
     * Group by Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationGroupByArgs['orderBy'] }
        : { orderBy?: NotificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Notification model
   */
  readonly fields: NotificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Notification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Notification model
   */ 
  interface NotificationFieldRefs {
    readonly id: FieldRef<"Notification", 'Int'>
    readonly userId: FieldRef<"Notification", 'Int'>
    readonly title: FieldRef<"Notification", 'String'>
    readonly message: FieldRef<"Notification", 'String'>
    readonly createdAt: FieldRef<"Notification", 'DateTime'>
    readonly read: FieldRef<"Notification", 'Boolean'>
    readonly type: FieldRef<"Notification", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Notification findUnique
   */
  export type NotificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }


  /**
   * Notification findUniqueOrThrow
   */
  export type NotificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }


  /**
   * Notification findFirst
   */
  export type NotificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }


  /**
   * Notification findFirstOrThrow
   */
  export type NotificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }


  /**
   * Notification findMany
   */
  export type NotificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notifications to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }


  /**
   * Notification create
   */
  export type NotificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to create a Notification.
     */
    data: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
  }


  /**
   * Notification createMany
   */
  export type NotificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Notification update
   */
  export type NotificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to update a Notification.
     */
    data: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
    /**
     * Choose, which Notification to update.
     */
    where: NotificationWhereUniqueInput
  }


  /**
   * Notification updateMany
   */
  export type NotificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     */
    where?: NotificationWhereInput
  }


  /**
   * Notification upsert
   */
  export type NotificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The filter to search for the Notification to update in case it exists.
     */
    where: NotificationWhereUniqueInput
    /**
     * In case the Notification found by the `where` argument doesn't exist, create a new Notification with this data.
     */
    create: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
    /**
     * In case the Notification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
  }


  /**
   * Notification delete
   */
  export type NotificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter which Notification to delete.
     */
    where: NotificationWhereUniqueInput
  }


  /**
   * Notification deleteMany
   */
  export type NotificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notifications to delete
     */
    where?: NotificationWhereInput
  }


  /**
   * Notification without action
   */
  export type NotificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: NotificationInclude<ExtArgs> | null
  }



  /**
   * Model Event
   */

  export type AggregateEvent = {
    _count: EventCountAggregateOutputType | null
    _avg: EventAvgAggregateOutputType | null
    _sum: EventSumAggregateOutputType | null
    _min: EventMinAggregateOutputType | null
    _max: EventMaxAggregateOutputType | null
  }

  export type EventAvgAggregateOutputType = {
    eventId: number | null
    createdBy: number | null
  }

  export type EventSumAggregateOutputType = {
    eventId: number | null
    createdBy: number | null
  }

  export type EventMinAggregateOutputType = {
    eventId: number | null
    title: string | null
    start: Date | null
    end: Date | null
    allDay: boolean | null
    createdBy: number | null
    createdAt: Date | null
    isArchived: boolean | null
  }

  export type EventMaxAggregateOutputType = {
    eventId: number | null
    title: string | null
    start: Date | null
    end: Date | null
    allDay: boolean | null
    createdBy: number | null
    createdAt: Date | null
    isArchived: boolean | null
  }

  export type EventCountAggregateOutputType = {
    eventId: number
    title: number
    start: number
    end: number
    allDay: number
    createdBy: number
    createdAt: number
    isArchived: number
    _all: number
  }


  export type EventAvgAggregateInputType = {
    eventId?: true
    createdBy?: true
  }

  export type EventSumAggregateInputType = {
    eventId?: true
    createdBy?: true
  }

  export type EventMinAggregateInputType = {
    eventId?: true
    title?: true
    start?: true
    end?: true
    allDay?: true
    createdBy?: true
    createdAt?: true
    isArchived?: true
  }

  export type EventMaxAggregateInputType = {
    eventId?: true
    title?: true
    start?: true
    end?: true
    allDay?: true
    createdBy?: true
    createdAt?: true
    isArchived?: true
  }

  export type EventCountAggregateInputType = {
    eventId?: true
    title?: true
    start?: true
    end?: true
    allDay?: true
    createdBy?: true
    createdAt?: true
    isArchived?: true
    _all?: true
  }

  export type EventAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Event to aggregate.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Events
    **/
    _count?: true | EventCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: EventAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: EventSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: EventMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: EventMaxAggregateInputType
  }

  export type GetEventAggregateType<T extends EventAggregateArgs> = {
        [P in keyof T & keyof AggregateEvent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateEvent[P]>
      : GetScalarType<T[P], AggregateEvent[P]>
  }




  export type EventGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: EventWhereInput
    orderBy?: EventOrderByWithAggregationInput | EventOrderByWithAggregationInput[]
    by: EventScalarFieldEnum[] | EventScalarFieldEnum
    having?: EventScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: EventCountAggregateInputType | true
    _avg?: EventAvgAggregateInputType
    _sum?: EventSumAggregateInputType
    _min?: EventMinAggregateInputType
    _max?: EventMaxAggregateInputType
  }

  export type EventGroupByOutputType = {
    eventId: number
    title: string
    start: Date
    end: Date
    allDay: boolean
    createdBy: number
    createdAt: Date
    isArchived: boolean
    _count: EventCountAggregateOutputType | null
    _avg: EventAvgAggregateOutputType | null
    _sum: EventSumAggregateOutputType | null
    _min: EventMinAggregateOutputType | null
    _max: EventMaxAggregateOutputType | null
  }

  type GetEventGroupByPayload<T extends EventGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<EventGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof EventGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], EventGroupByOutputType[P]>
            : GetScalarType<T[P], EventGroupByOutputType[P]>
        }
      >
    >


  export type EventSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    eventId?: boolean
    title?: boolean
    start?: boolean
    end?: boolean
    allDay?: boolean
    createdBy?: boolean
    createdAt?: boolean
    isArchived?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["event"]>

  export type EventSelectScalar = {
    eventId?: boolean
    title?: boolean
    start?: boolean
    end?: boolean
    allDay?: boolean
    createdBy?: boolean
    createdAt?: boolean
    isArchived?: boolean
  }

  export type EventInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }


  export type $EventPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Event"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      eventId: number
      title: string
      start: Date
      end: Date
      allDay: boolean
      createdBy: number
      createdAt: Date
      isArchived: boolean
    }, ExtArgs["result"]["event"]>
    composites: {}
  }


  type EventGetPayload<S extends boolean | null | undefined | EventDefaultArgs> = $Result.GetResult<Prisma.$EventPayload, S>

  type EventCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<EventFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: EventCountAggregateInputType | true
    }

  export interface EventDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Event'], meta: { name: 'Event' } }
    /**
     * Find zero or one Event that matches the filter.
     * @param {EventFindUniqueArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends EventFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, EventFindUniqueArgs<ExtArgs>>
    ): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Event that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {EventFindUniqueOrThrowArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends EventFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, EventFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Event that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventFindFirstArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends EventFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, EventFindFirstArgs<ExtArgs>>
    ): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Event that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventFindFirstOrThrowArgs} args - Arguments to find a Event
     * @example
     * // Get one Event
     * const event = await prisma.event.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends EventFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, EventFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Events that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Events
     * const events = await prisma.event.findMany()
     * 
     * // Get first 10 Events
     * const events = await prisma.event.findMany({ take: 10 })
     * 
     * // Only select the `eventId`
     * const eventWithEventIdOnly = await prisma.event.findMany({ select: { eventId: true } })
     * 
    **/
    findMany<T extends EventFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EventFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Event.
     * @param {EventCreateArgs} args - Arguments to create a Event.
     * @example
     * // Create one Event
     * const Event = await prisma.event.create({
     *   data: {
     *     // ... data to create a Event
     *   }
     * })
     * 
    **/
    create<T extends EventCreateArgs<ExtArgs>>(
      args: SelectSubset<T, EventCreateArgs<ExtArgs>>
    ): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Events.
     *     @param {EventCreateManyArgs} args - Arguments to create many Events.
     *     @example
     *     // Create many Events
     *     const event = await prisma.event.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends EventCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EventCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Event.
     * @param {EventDeleteArgs} args - Arguments to delete one Event.
     * @example
     * // Delete one Event
     * const Event = await prisma.event.delete({
     *   where: {
     *     // ... filter to delete one Event
     *   }
     * })
     * 
    **/
    delete<T extends EventDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, EventDeleteArgs<ExtArgs>>
    ): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Event.
     * @param {EventUpdateArgs} args - Arguments to update one Event.
     * @example
     * // Update one Event
     * const event = await prisma.event.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends EventUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, EventUpdateArgs<ExtArgs>>
    ): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Events.
     * @param {EventDeleteManyArgs} args - Arguments to filter Events to delete.
     * @example
     * // Delete a few Events
     * const { count } = await prisma.event.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends EventDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, EventDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Events.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Events
     * const event = await prisma.event.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends EventUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, EventUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Event.
     * @param {EventUpsertArgs} args - Arguments to update or create a Event.
     * @example
     * // Update or create a Event
     * const event = await prisma.event.upsert({
     *   create: {
     *     // ... data to create a Event
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Event we want to update
     *   }
     * })
    **/
    upsert<T extends EventUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, EventUpsertArgs<ExtArgs>>
    ): Prisma__EventClient<$Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Events.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventCountArgs} args - Arguments to filter Events to count.
     * @example
     * // Count the number of Events
     * const count = await prisma.event.count({
     *   where: {
     *     // ... the filter for the Events we want to count
     *   }
     * })
    **/
    count<T extends EventCountArgs>(
      args?: Subset<T, EventCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], EventCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Event.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends EventAggregateArgs>(args: Subset<T, EventAggregateArgs>): Prisma.PrismaPromise<GetEventAggregateType<T>>

    /**
     * Group by Event.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {EventGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends EventGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: EventGroupByArgs['orderBy'] }
        : { orderBy?: EventGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, EventGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetEventGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Event model
   */
  readonly fields: EventFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Event.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__EventClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Event model
   */ 
  interface EventFieldRefs {
    readonly eventId: FieldRef<"Event", 'Int'>
    readonly title: FieldRef<"Event", 'String'>
    readonly start: FieldRef<"Event", 'DateTime'>
    readonly end: FieldRef<"Event", 'DateTime'>
    readonly allDay: FieldRef<"Event", 'Boolean'>
    readonly createdBy: FieldRef<"Event", 'Int'>
    readonly createdAt: FieldRef<"Event", 'DateTime'>
    readonly isArchived: FieldRef<"Event", 'Boolean'>
  }
    

  // Custom InputTypes

  /**
   * Event findUnique
   */
  export type EventFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where: EventWhereUniqueInput
  }


  /**
   * Event findUniqueOrThrow
   */
  export type EventFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where: EventWhereUniqueInput
  }


  /**
   * Event findFirst
   */
  export type EventFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Events.
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Events.
     */
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }


  /**
   * Event findFirstOrThrow
   */
  export type EventFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Event to fetch.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Events.
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Events.
     */
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }


  /**
   * Event findMany
   */
  export type EventFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter, which Events to fetch.
     */
    where?: EventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Events to fetch.
     */
    orderBy?: EventOrderByWithRelationInput | EventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Events.
     */
    cursor?: EventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Events from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Events.
     */
    skip?: number
    distinct?: EventScalarFieldEnum | EventScalarFieldEnum[]
  }


  /**
   * Event create
   */
  export type EventCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * The data needed to create a Event.
     */
    data: XOR<EventCreateInput, EventUncheckedCreateInput>
  }


  /**
   * Event createMany
   */
  export type EventCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Events.
     */
    data: EventCreateManyInput | EventCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Event update
   */
  export type EventUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * The data needed to update a Event.
     */
    data: XOR<EventUpdateInput, EventUncheckedUpdateInput>
    /**
     * Choose, which Event to update.
     */
    where: EventWhereUniqueInput
  }


  /**
   * Event updateMany
   */
  export type EventUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Events.
     */
    data: XOR<EventUpdateManyMutationInput, EventUncheckedUpdateManyInput>
    /**
     * Filter which Events to update
     */
    where?: EventWhereInput
  }


  /**
   * Event upsert
   */
  export type EventUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * The filter to search for the Event to update in case it exists.
     */
    where: EventWhereUniqueInput
    /**
     * In case the Event found by the `where` argument doesn't exist, create a new Event with this data.
     */
    create: XOR<EventCreateInput, EventUncheckedCreateInput>
    /**
     * In case the Event was found with the provided `where` argument, update it with this data.
     */
    update: XOR<EventUpdateInput, EventUncheckedUpdateInput>
  }


  /**
   * Event delete
   */
  export type EventDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EventInclude<ExtArgs> | null
    /**
     * Filter which Event to delete.
     */
    where: EventWhereUniqueInput
  }


  /**
   * Event deleteMany
   */
  export type EventDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Events to delete
     */
    where?: EventWhereInput
  }


  /**
   * Event without action
   */
  export type EventDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Event
     */
    select?: EventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: EventInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    user_id: 'user_id',
    username: 'username',
    password: 'password',
    firstName: 'firstName',
    lastName: 'lastName',
    role: 'role',
    sex: 'sex',
    barangay: 'barangay',
    isArchived: 'isArchived'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const BeneficiaryScalarFieldEnum: {
    beneficiaryId: 'beneficiaryId',
    firstName: 'firstName',
    middleName: 'middleName',
    lastName: 'lastName',
    suffix: 'suffix',
    birthdate: 'birthdate',
    age: 'age',
    sex: 'sex',
    job: 'job',
    barangay: 'barangay',
    healthStation: 'healthStation',
    ageGroup: 'ageGroup',
    subType: 'subType',
    civilStatus: 'civilStatus',
    contactNumber: 'contactNumber',
    isArchived: 'isArchived'
  };

  export type BeneficiaryScalarFieldEnum = (typeof BeneficiaryScalarFieldEnum)[keyof typeof BeneficiaryScalarFieldEnum]


  export const TypeScalarFieldEnum: {
    typeId: 'typeId',
    typeName: 'typeName',
    ageGroups: 'ageGroups',
    sex: 'sex',
    subTypes: 'subTypes',
    isArchived: 'isArchived'
  };

  export type TypeScalarFieldEnum = (typeof TypeScalarFieldEnum)[keyof typeof TypeScalarFieldEnum]


  export const BeneficiaryTypesScalarFieldEnum: {
    beneficiaryId: 'beneficiaryId',
    typeId: 'typeId'
  };

  export type BeneficiaryTypesScalarFieldEnum = (typeof BeneficiaryTypesScalarFieldEnum)[keyof typeof BeneficiaryTypesScalarFieldEnum]


  export const ActivityScalarFieldEnum: {
    activityId: 'activityId',
    title: 'title',
    description: 'description',
    activityDate: 'activityDate',
    createdBy: 'createdBy',
    createdAt: 'createdAt',
    isArchived: 'isArchived',
    filename: 'filename',
    filepath: 'filepath'
  };

  export type ActivityScalarFieldEnum = (typeof ActivityScalarFieldEnum)[keyof typeof ActivityScalarFieldEnum]


  export const ActivityDocumentationScalarFieldEnum: {
    documentationId: 'documentationId',
    activityId: 'activityId',
    filename: 'filename',
    filepath: 'filepath',
    uploadedAt: 'uploadedAt'
  };

  export type ActivityDocumentationScalarFieldEnum = (typeof ActivityDocumentationScalarFieldEnum)[keyof typeof ActivityDocumentationScalarFieldEnum]


  export const ActivityParticipationScalarFieldEnum: {
    activityId: 'activityId',
    beneficiaryId: 'beneficiaryId',
    attended: 'attended',
    beneficiaryFirstName: 'beneficiaryFirstName',
    beneficiaryMiddleName: 'beneficiaryMiddleName',
    beneficiaryLastName: 'beneficiaryLastName',
    beneficiarySuffix: 'beneficiarySuffix',
    beneficiaryBirthdate: 'beneficiaryBirthdate',
    beneficiarySex: 'beneficiarySex',
    beneficiaryJob: 'beneficiaryJob',
    beneficiaryBarangay: 'beneficiaryBarangay',
    beneficiaryHealthStation: 'beneficiaryHealthStation',
    beneficiaryPrimaryType: 'beneficiaryPrimaryType',
    beneficiaryCivilStatus: 'beneficiaryCivilStatus',
    beneficiaryContactNumber: 'beneficiaryContactNumber',
    beneficiaryTypes: 'beneficiaryTypes',
    isArchived: 'isArchived'
  };

  export type ActivityParticipationScalarFieldEnum = (typeof ActivityParticipationScalarFieldEnum)[keyof typeof ActivityParticipationScalarFieldEnum]


  export const ReportScalarFieldEnum: {
    reportId: 'reportId',
    type: 'type',
    month: 'month',
    year: 'year',
    userId: 'userId',
    dueDate: 'dueDate',
    isArchived: 'isArchived'
  };

  export type ReportScalarFieldEnum = (typeof ReportScalarFieldEnum)[keyof typeof ReportScalarFieldEnum]


  export const FileAttachmentScalarFieldEnum: {
    fileId: 'fileId',
    reportId: 'reportId',
    submissionId: 'submissionId',
    filePath: 'filePath',
    fileType: 'fileType',
    fileName: 'fileName'
  };

  export type FileAttachmentScalarFieldEnum = (typeof FileAttachmentScalarFieldEnum)[keyof typeof FileAttachmentScalarFieldEnum]


  export const FeedbackScalarFieldEnum: {
    feedbackId: 'feedbackId',
    reportId: 'reportId',
    createdBy: 'createdBy',
    content: 'content',
    createdAt: 'createdAt',
    submissionId: 'submissionId'
  };

  export type FeedbackScalarFieldEnum = (typeof FeedbackScalarFieldEnum)[keyof typeof FeedbackScalarFieldEnum]


  export const SubmissionScalarFieldEnum: {
    submissionId: 'submissionId',
    reportId: 'reportId',
    userId: 'userId',
    status: 'status',
    submissionDate: 'submissionDate'
  };

  export type SubmissionScalarFieldEnum = (typeof SubmissionScalarFieldEnum)[keyof typeof SubmissionScalarFieldEnum]


  export const NotificationScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    title: 'title',
    message: 'message',
    createdAt: 'createdAt',
    read: 'read',
    type: 'type'
  };

  export type NotificationScalarFieldEnum = (typeof NotificationScalarFieldEnum)[keyof typeof NotificationScalarFieldEnum]


  export const EventScalarFieldEnum: {
    eventId: 'eventId',
    title: 'title',
    start: 'start',
    end: 'end',
    allDay: 'allDay',
    createdBy: 'createdBy',
    createdAt: 'createdAt',
    isArchived: 'isArchived'
  };

  export type EventScalarFieldEnum = (typeof EventScalarFieldEnum)[keyof typeof EventScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    user_id?: IntFilter<"User"> | number
    username?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    role?: StringFilter<"User"> | string
    sex?: StringFilter<"User"> | string
    barangay?: StringFilter<"User"> | string
    isArchived?: BoolFilter<"User"> | boolean
    activitiesCreated?: ActivityListRelationFilter
    reports?: ReportListRelationFilter
    feedbacks?: FeedbackListRelationFilter
    notifications?: NotificationListRelationFilter
    events?: EventListRelationFilter
    submissions?: SubmissionListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    user_id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    role?: SortOrder
    sex?: SortOrder
    barangay?: SortOrder
    isArchived?: SortOrder
    activitiesCreated?: ActivityOrderByRelationAggregateInput
    reports?: ReportOrderByRelationAggregateInput
    feedbacks?: FeedbackOrderByRelationAggregateInput
    notifications?: NotificationOrderByRelationAggregateInput
    events?: EventOrderByRelationAggregateInput
    submissions?: SubmissionOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    user_id?: number
    username?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    role?: StringFilter<"User"> | string
    sex?: StringFilter<"User"> | string
    barangay?: StringFilter<"User"> | string
    isArchived?: BoolFilter<"User"> | boolean
    activitiesCreated?: ActivityListRelationFilter
    reports?: ReportListRelationFilter
    feedbacks?: FeedbackListRelationFilter
    notifications?: NotificationListRelationFilter
    events?: EventListRelationFilter
    submissions?: SubmissionListRelationFilter
  }, "user_id" | "username">

  export type UserOrderByWithAggregationInput = {
    user_id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    role?: SortOrder
    sex?: SortOrder
    barangay?: SortOrder
    isArchived?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    user_id?: IntWithAggregatesFilter<"User"> | number
    username?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    firstName?: StringWithAggregatesFilter<"User"> | string
    lastName?: StringWithAggregatesFilter<"User"> | string
    role?: StringWithAggregatesFilter<"User"> | string
    sex?: StringWithAggregatesFilter<"User"> | string
    barangay?: StringWithAggregatesFilter<"User"> | string
    isArchived?: BoolWithAggregatesFilter<"User"> | boolean
  }

  export type BeneficiaryWhereInput = {
    AND?: BeneficiaryWhereInput | BeneficiaryWhereInput[]
    OR?: BeneficiaryWhereInput[]
    NOT?: BeneficiaryWhereInput | BeneficiaryWhereInput[]
    beneficiaryId?: IntFilter<"Beneficiary"> | number
    firstName?: StringFilter<"Beneficiary"> | string
    middleName?: StringNullableFilter<"Beneficiary"> | string | null
    lastName?: StringFilter<"Beneficiary"> | string
    suffix?: StringNullableFilter<"Beneficiary"> | string | null
    birthdate?: DateTimeFilter<"Beneficiary"> | Date | string
    age?: StringNullableFilter<"Beneficiary"> | string | null
    sex?: StringFilter<"Beneficiary"> | string
    job?: StringNullableFilter<"Beneficiary"> | string | null
    barangay?: StringFilter<"Beneficiary"> | string
    healthStation?: StringFilter<"Beneficiary"> | string
    ageGroup?: StringFilter<"Beneficiary"> | string
    subType?: StringNullableFilter<"Beneficiary"> | string | null
    civilStatus?: StringFilter<"Beneficiary"> | string
    contactNumber?: StringNullableFilter<"Beneficiary"> | string | null
    isArchived?: BoolFilter<"Beneficiary"> | boolean
    activityParticipation?: ActivityParticipationListRelationFilter
    beneficiaryTypes?: BeneficiaryTypesListRelationFilter
  }

  export type BeneficiaryOrderByWithRelationInput = {
    beneficiaryId?: SortOrder
    firstName?: SortOrder
    middleName?: SortOrderInput | SortOrder
    lastName?: SortOrder
    suffix?: SortOrderInput | SortOrder
    birthdate?: SortOrder
    age?: SortOrderInput | SortOrder
    sex?: SortOrder
    job?: SortOrderInput | SortOrder
    barangay?: SortOrder
    healthStation?: SortOrder
    ageGroup?: SortOrder
    subType?: SortOrderInput | SortOrder
    civilStatus?: SortOrder
    contactNumber?: SortOrderInput | SortOrder
    isArchived?: SortOrder
    activityParticipation?: ActivityParticipationOrderByRelationAggregateInput
    beneficiaryTypes?: BeneficiaryTypesOrderByRelationAggregateInput
  }

  export type BeneficiaryWhereUniqueInput = Prisma.AtLeast<{
    beneficiaryId?: number
    AND?: BeneficiaryWhereInput | BeneficiaryWhereInput[]
    OR?: BeneficiaryWhereInput[]
    NOT?: BeneficiaryWhereInput | BeneficiaryWhereInput[]
    firstName?: StringFilter<"Beneficiary"> | string
    middleName?: StringNullableFilter<"Beneficiary"> | string | null
    lastName?: StringFilter<"Beneficiary"> | string
    suffix?: StringNullableFilter<"Beneficiary"> | string | null
    birthdate?: DateTimeFilter<"Beneficiary"> | Date | string
    age?: StringNullableFilter<"Beneficiary"> | string | null
    sex?: StringFilter<"Beneficiary"> | string
    job?: StringNullableFilter<"Beneficiary"> | string | null
    barangay?: StringFilter<"Beneficiary"> | string
    healthStation?: StringFilter<"Beneficiary"> | string
    ageGroup?: StringFilter<"Beneficiary"> | string
    subType?: StringNullableFilter<"Beneficiary"> | string | null
    civilStatus?: StringFilter<"Beneficiary"> | string
    contactNumber?: StringNullableFilter<"Beneficiary"> | string | null
    isArchived?: BoolFilter<"Beneficiary"> | boolean
    activityParticipation?: ActivityParticipationListRelationFilter
    beneficiaryTypes?: BeneficiaryTypesListRelationFilter
  }, "beneficiaryId">

  export type BeneficiaryOrderByWithAggregationInput = {
    beneficiaryId?: SortOrder
    firstName?: SortOrder
    middleName?: SortOrderInput | SortOrder
    lastName?: SortOrder
    suffix?: SortOrderInput | SortOrder
    birthdate?: SortOrder
    age?: SortOrderInput | SortOrder
    sex?: SortOrder
    job?: SortOrderInput | SortOrder
    barangay?: SortOrder
    healthStation?: SortOrder
    ageGroup?: SortOrder
    subType?: SortOrderInput | SortOrder
    civilStatus?: SortOrder
    contactNumber?: SortOrderInput | SortOrder
    isArchived?: SortOrder
    _count?: BeneficiaryCountOrderByAggregateInput
    _avg?: BeneficiaryAvgOrderByAggregateInput
    _max?: BeneficiaryMaxOrderByAggregateInput
    _min?: BeneficiaryMinOrderByAggregateInput
    _sum?: BeneficiarySumOrderByAggregateInput
  }

  export type BeneficiaryScalarWhereWithAggregatesInput = {
    AND?: BeneficiaryScalarWhereWithAggregatesInput | BeneficiaryScalarWhereWithAggregatesInput[]
    OR?: BeneficiaryScalarWhereWithAggregatesInput[]
    NOT?: BeneficiaryScalarWhereWithAggregatesInput | BeneficiaryScalarWhereWithAggregatesInput[]
    beneficiaryId?: IntWithAggregatesFilter<"Beneficiary"> | number
    firstName?: StringWithAggregatesFilter<"Beneficiary"> | string
    middleName?: StringNullableWithAggregatesFilter<"Beneficiary"> | string | null
    lastName?: StringWithAggregatesFilter<"Beneficiary"> | string
    suffix?: StringNullableWithAggregatesFilter<"Beneficiary"> | string | null
    birthdate?: DateTimeWithAggregatesFilter<"Beneficiary"> | Date | string
    age?: StringNullableWithAggregatesFilter<"Beneficiary"> | string | null
    sex?: StringWithAggregatesFilter<"Beneficiary"> | string
    job?: StringNullableWithAggregatesFilter<"Beneficiary"> | string | null
    barangay?: StringWithAggregatesFilter<"Beneficiary"> | string
    healthStation?: StringWithAggregatesFilter<"Beneficiary"> | string
    ageGroup?: StringWithAggregatesFilter<"Beneficiary"> | string
    subType?: StringNullableWithAggregatesFilter<"Beneficiary"> | string | null
    civilStatus?: StringWithAggregatesFilter<"Beneficiary"> | string
    contactNumber?: StringNullableWithAggregatesFilter<"Beneficiary"> | string | null
    isArchived?: BoolWithAggregatesFilter<"Beneficiary"> | boolean
  }

  export type TypeWhereInput = {
    AND?: TypeWhereInput | TypeWhereInput[]
    OR?: TypeWhereInput[]
    NOT?: TypeWhereInput | TypeWhereInput[]
    typeId?: IntFilter<"Type"> | number
    typeName?: StringFilter<"Type"> | string
    ageGroups?: StringNullableListFilter<"Type">
    sex?: StringNullableFilter<"Type"> | string | null
    subTypes?: StringNullableListFilter<"Type">
    isArchived?: BoolFilter<"Type"> | boolean
    beneficiaryTypes?: BeneficiaryTypesListRelationFilter
  }

  export type TypeOrderByWithRelationInput = {
    typeId?: SortOrder
    typeName?: SortOrder
    ageGroups?: SortOrder
    sex?: SortOrderInput | SortOrder
    subTypes?: SortOrder
    isArchived?: SortOrder
    beneficiaryTypes?: BeneficiaryTypesOrderByRelationAggregateInput
  }

  export type TypeWhereUniqueInput = Prisma.AtLeast<{
    typeId?: number
    AND?: TypeWhereInput | TypeWhereInput[]
    OR?: TypeWhereInput[]
    NOT?: TypeWhereInput | TypeWhereInput[]
    typeName?: StringFilter<"Type"> | string
    ageGroups?: StringNullableListFilter<"Type">
    sex?: StringNullableFilter<"Type"> | string | null
    subTypes?: StringNullableListFilter<"Type">
    isArchived?: BoolFilter<"Type"> | boolean
    beneficiaryTypes?: BeneficiaryTypesListRelationFilter
  }, "typeId">

  export type TypeOrderByWithAggregationInput = {
    typeId?: SortOrder
    typeName?: SortOrder
    ageGroups?: SortOrder
    sex?: SortOrderInput | SortOrder
    subTypes?: SortOrder
    isArchived?: SortOrder
    _count?: TypeCountOrderByAggregateInput
    _avg?: TypeAvgOrderByAggregateInput
    _max?: TypeMaxOrderByAggregateInput
    _min?: TypeMinOrderByAggregateInput
    _sum?: TypeSumOrderByAggregateInput
  }

  export type TypeScalarWhereWithAggregatesInput = {
    AND?: TypeScalarWhereWithAggregatesInput | TypeScalarWhereWithAggregatesInput[]
    OR?: TypeScalarWhereWithAggregatesInput[]
    NOT?: TypeScalarWhereWithAggregatesInput | TypeScalarWhereWithAggregatesInput[]
    typeId?: IntWithAggregatesFilter<"Type"> | number
    typeName?: StringWithAggregatesFilter<"Type"> | string
    ageGroups?: StringNullableListFilter<"Type">
    sex?: StringNullableWithAggregatesFilter<"Type"> | string | null
    subTypes?: StringNullableListFilter<"Type">
    isArchived?: BoolWithAggregatesFilter<"Type"> | boolean
  }

  export type BeneficiaryTypesWhereInput = {
    AND?: BeneficiaryTypesWhereInput | BeneficiaryTypesWhereInput[]
    OR?: BeneficiaryTypesWhereInput[]
    NOT?: BeneficiaryTypesWhereInput | BeneficiaryTypesWhereInput[]
    beneficiaryId?: IntFilter<"BeneficiaryTypes"> | number
    typeId?: IntFilter<"BeneficiaryTypes"> | number
    beneficiary?: XOR<BeneficiaryRelationFilter, BeneficiaryWhereInput>
    type?: XOR<TypeRelationFilter, TypeWhereInput>
  }

  export type BeneficiaryTypesOrderByWithRelationInput = {
    beneficiaryId?: SortOrder
    typeId?: SortOrder
    beneficiary?: BeneficiaryOrderByWithRelationInput
    type?: TypeOrderByWithRelationInput
  }

  export type BeneficiaryTypesWhereUniqueInput = Prisma.AtLeast<{
    beneficiaryId_typeId?: BeneficiaryTypesBeneficiaryIdTypeIdCompoundUniqueInput
    AND?: BeneficiaryTypesWhereInput | BeneficiaryTypesWhereInput[]
    OR?: BeneficiaryTypesWhereInput[]
    NOT?: BeneficiaryTypesWhereInput | BeneficiaryTypesWhereInput[]
    beneficiaryId?: IntFilter<"BeneficiaryTypes"> | number
    typeId?: IntFilter<"BeneficiaryTypes"> | number
    beneficiary?: XOR<BeneficiaryRelationFilter, BeneficiaryWhereInput>
    type?: XOR<TypeRelationFilter, TypeWhereInput>
  }, "beneficiaryId_typeId">

  export type BeneficiaryTypesOrderByWithAggregationInput = {
    beneficiaryId?: SortOrder
    typeId?: SortOrder
    _count?: BeneficiaryTypesCountOrderByAggregateInput
    _avg?: BeneficiaryTypesAvgOrderByAggregateInput
    _max?: BeneficiaryTypesMaxOrderByAggregateInput
    _min?: BeneficiaryTypesMinOrderByAggregateInput
    _sum?: BeneficiaryTypesSumOrderByAggregateInput
  }

  export type BeneficiaryTypesScalarWhereWithAggregatesInput = {
    AND?: BeneficiaryTypesScalarWhereWithAggregatesInput | BeneficiaryTypesScalarWhereWithAggregatesInput[]
    OR?: BeneficiaryTypesScalarWhereWithAggregatesInput[]
    NOT?: BeneficiaryTypesScalarWhereWithAggregatesInput | BeneficiaryTypesScalarWhereWithAggregatesInput[]
    beneficiaryId?: IntWithAggregatesFilter<"BeneficiaryTypes"> | number
    typeId?: IntWithAggregatesFilter<"BeneficiaryTypes"> | number
  }

  export type ActivityWhereInput = {
    AND?: ActivityWhereInput | ActivityWhereInput[]
    OR?: ActivityWhereInput[]
    NOT?: ActivityWhereInput | ActivityWhereInput[]
    activityId?: IntFilter<"Activity"> | number
    title?: StringFilter<"Activity"> | string
    description?: StringNullableFilter<"Activity"> | string | null
    activityDate?: DateTimeFilter<"Activity"> | Date | string
    createdBy?: IntFilter<"Activity"> | number
    createdAt?: DateTimeFilter<"Activity"> | Date | string
    isArchived?: BoolFilter<"Activity"> | boolean
    filename?: StringNullableFilter<"Activity"> | string | null
    filepath?: StringNullableFilter<"Activity"> | string | null
    creator?: XOR<UserRelationFilter, UserWhereInput>
    participants?: ActivityParticipationListRelationFilter
    documentations?: ActivityDocumentationListRelationFilter
  }

  export type ActivityOrderByWithRelationInput = {
    activityId?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    activityDate?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    isArchived?: SortOrder
    filename?: SortOrderInput | SortOrder
    filepath?: SortOrderInput | SortOrder
    creator?: UserOrderByWithRelationInput
    participants?: ActivityParticipationOrderByRelationAggregateInput
    documentations?: ActivityDocumentationOrderByRelationAggregateInput
  }

  export type ActivityWhereUniqueInput = Prisma.AtLeast<{
    activityId?: number
    AND?: ActivityWhereInput | ActivityWhereInput[]
    OR?: ActivityWhereInput[]
    NOT?: ActivityWhereInput | ActivityWhereInput[]
    title?: StringFilter<"Activity"> | string
    description?: StringNullableFilter<"Activity"> | string | null
    activityDate?: DateTimeFilter<"Activity"> | Date | string
    createdBy?: IntFilter<"Activity"> | number
    createdAt?: DateTimeFilter<"Activity"> | Date | string
    isArchived?: BoolFilter<"Activity"> | boolean
    filename?: StringNullableFilter<"Activity"> | string | null
    filepath?: StringNullableFilter<"Activity"> | string | null
    creator?: XOR<UserRelationFilter, UserWhereInput>
    participants?: ActivityParticipationListRelationFilter
    documentations?: ActivityDocumentationListRelationFilter
  }, "activityId">

  export type ActivityOrderByWithAggregationInput = {
    activityId?: SortOrder
    title?: SortOrder
    description?: SortOrderInput | SortOrder
    activityDate?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    isArchived?: SortOrder
    filename?: SortOrderInput | SortOrder
    filepath?: SortOrderInput | SortOrder
    _count?: ActivityCountOrderByAggregateInput
    _avg?: ActivityAvgOrderByAggregateInput
    _max?: ActivityMaxOrderByAggregateInput
    _min?: ActivityMinOrderByAggregateInput
    _sum?: ActivitySumOrderByAggregateInput
  }

  export type ActivityScalarWhereWithAggregatesInput = {
    AND?: ActivityScalarWhereWithAggregatesInput | ActivityScalarWhereWithAggregatesInput[]
    OR?: ActivityScalarWhereWithAggregatesInput[]
    NOT?: ActivityScalarWhereWithAggregatesInput | ActivityScalarWhereWithAggregatesInput[]
    activityId?: IntWithAggregatesFilter<"Activity"> | number
    title?: StringWithAggregatesFilter<"Activity"> | string
    description?: StringNullableWithAggregatesFilter<"Activity"> | string | null
    activityDate?: DateTimeWithAggregatesFilter<"Activity"> | Date | string
    createdBy?: IntWithAggregatesFilter<"Activity"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Activity"> | Date | string
    isArchived?: BoolWithAggregatesFilter<"Activity"> | boolean
    filename?: StringNullableWithAggregatesFilter<"Activity"> | string | null
    filepath?: StringNullableWithAggregatesFilter<"Activity"> | string | null
  }

  export type ActivityDocumentationWhereInput = {
    AND?: ActivityDocumentationWhereInput | ActivityDocumentationWhereInput[]
    OR?: ActivityDocumentationWhereInput[]
    NOT?: ActivityDocumentationWhereInput | ActivityDocumentationWhereInput[]
    documentationId?: IntFilter<"ActivityDocumentation"> | number
    activityId?: IntFilter<"ActivityDocumentation"> | number
    filename?: StringFilter<"ActivityDocumentation"> | string
    filepath?: StringFilter<"ActivityDocumentation"> | string
    uploadedAt?: DateTimeFilter<"ActivityDocumentation"> | Date | string
    activity?: XOR<ActivityRelationFilter, ActivityWhereInput>
  }

  export type ActivityDocumentationOrderByWithRelationInput = {
    documentationId?: SortOrder
    activityId?: SortOrder
    filename?: SortOrder
    filepath?: SortOrder
    uploadedAt?: SortOrder
    activity?: ActivityOrderByWithRelationInput
  }

  export type ActivityDocumentationWhereUniqueInput = Prisma.AtLeast<{
    documentationId?: number
    AND?: ActivityDocumentationWhereInput | ActivityDocumentationWhereInput[]
    OR?: ActivityDocumentationWhereInput[]
    NOT?: ActivityDocumentationWhereInput | ActivityDocumentationWhereInput[]
    activityId?: IntFilter<"ActivityDocumentation"> | number
    filename?: StringFilter<"ActivityDocumentation"> | string
    filepath?: StringFilter<"ActivityDocumentation"> | string
    uploadedAt?: DateTimeFilter<"ActivityDocumentation"> | Date | string
    activity?: XOR<ActivityRelationFilter, ActivityWhereInput>
  }, "documentationId">

  export type ActivityDocumentationOrderByWithAggregationInput = {
    documentationId?: SortOrder
    activityId?: SortOrder
    filename?: SortOrder
    filepath?: SortOrder
    uploadedAt?: SortOrder
    _count?: ActivityDocumentationCountOrderByAggregateInput
    _avg?: ActivityDocumentationAvgOrderByAggregateInput
    _max?: ActivityDocumentationMaxOrderByAggregateInput
    _min?: ActivityDocumentationMinOrderByAggregateInput
    _sum?: ActivityDocumentationSumOrderByAggregateInput
  }

  export type ActivityDocumentationScalarWhereWithAggregatesInput = {
    AND?: ActivityDocumentationScalarWhereWithAggregatesInput | ActivityDocumentationScalarWhereWithAggregatesInput[]
    OR?: ActivityDocumentationScalarWhereWithAggregatesInput[]
    NOT?: ActivityDocumentationScalarWhereWithAggregatesInput | ActivityDocumentationScalarWhereWithAggregatesInput[]
    documentationId?: IntWithAggregatesFilter<"ActivityDocumentation"> | number
    activityId?: IntWithAggregatesFilter<"ActivityDocumentation"> | number
    filename?: StringWithAggregatesFilter<"ActivityDocumentation"> | string
    filepath?: StringWithAggregatesFilter<"ActivityDocumentation"> | string
    uploadedAt?: DateTimeWithAggregatesFilter<"ActivityDocumentation"> | Date | string
  }

  export type ActivityParticipationWhereInput = {
    AND?: ActivityParticipationWhereInput | ActivityParticipationWhereInput[]
    OR?: ActivityParticipationWhereInput[]
    NOT?: ActivityParticipationWhereInput | ActivityParticipationWhereInput[]
    activityId?: IntFilter<"ActivityParticipation"> | number
    beneficiaryId?: IntFilter<"ActivityParticipation"> | number
    attended?: BoolFilter<"ActivityParticipation"> | boolean
    beneficiaryFirstName?: StringFilter<"ActivityParticipation"> | string
    beneficiaryMiddleName?: StringNullableFilter<"ActivityParticipation"> | string | null
    beneficiaryLastName?: StringFilter<"ActivityParticipation"> | string
    beneficiarySuffix?: StringNullableFilter<"ActivityParticipation"> | string | null
    beneficiaryBirthdate?: DateTimeFilter<"ActivityParticipation"> | Date | string
    beneficiarySex?: StringFilter<"ActivityParticipation"> | string
    beneficiaryJob?: StringNullableFilter<"ActivityParticipation"> | string | null
    beneficiaryBarangay?: StringFilter<"ActivityParticipation"> | string
    beneficiaryHealthStation?: StringFilter<"ActivityParticipation"> | string
    beneficiaryPrimaryType?: StringFilter<"ActivityParticipation"> | string
    beneficiaryCivilStatus?: StringFilter<"ActivityParticipation"> | string
    beneficiaryContactNumber?: StringNullableFilter<"ActivityParticipation"> | string | null
    beneficiaryTypes?: StringFilter<"ActivityParticipation"> | string
    isArchived?: BoolFilter<"ActivityParticipation"> | boolean
    activity?: XOR<ActivityRelationFilter, ActivityWhereInput>
    beneficiary?: XOR<BeneficiaryRelationFilter, BeneficiaryWhereInput>
  }

  export type ActivityParticipationOrderByWithRelationInput = {
    activityId?: SortOrder
    beneficiaryId?: SortOrder
    attended?: SortOrder
    beneficiaryFirstName?: SortOrder
    beneficiaryMiddleName?: SortOrderInput | SortOrder
    beneficiaryLastName?: SortOrder
    beneficiarySuffix?: SortOrderInput | SortOrder
    beneficiaryBirthdate?: SortOrder
    beneficiarySex?: SortOrder
    beneficiaryJob?: SortOrderInput | SortOrder
    beneficiaryBarangay?: SortOrder
    beneficiaryHealthStation?: SortOrder
    beneficiaryPrimaryType?: SortOrder
    beneficiaryCivilStatus?: SortOrder
    beneficiaryContactNumber?: SortOrderInput | SortOrder
    beneficiaryTypes?: SortOrder
    isArchived?: SortOrder
    activity?: ActivityOrderByWithRelationInput
    beneficiary?: BeneficiaryOrderByWithRelationInput
  }

  export type ActivityParticipationWhereUniqueInput = Prisma.AtLeast<{
    activityId_beneficiaryId?: ActivityParticipationActivityIdBeneficiaryIdCompoundUniqueInput
    AND?: ActivityParticipationWhereInput | ActivityParticipationWhereInput[]
    OR?: ActivityParticipationWhereInput[]
    NOT?: ActivityParticipationWhereInput | ActivityParticipationWhereInput[]
    activityId?: IntFilter<"ActivityParticipation"> | number
    beneficiaryId?: IntFilter<"ActivityParticipation"> | number
    attended?: BoolFilter<"ActivityParticipation"> | boolean
    beneficiaryFirstName?: StringFilter<"ActivityParticipation"> | string
    beneficiaryMiddleName?: StringNullableFilter<"ActivityParticipation"> | string | null
    beneficiaryLastName?: StringFilter<"ActivityParticipation"> | string
    beneficiarySuffix?: StringNullableFilter<"ActivityParticipation"> | string | null
    beneficiaryBirthdate?: DateTimeFilter<"ActivityParticipation"> | Date | string
    beneficiarySex?: StringFilter<"ActivityParticipation"> | string
    beneficiaryJob?: StringNullableFilter<"ActivityParticipation"> | string | null
    beneficiaryBarangay?: StringFilter<"ActivityParticipation"> | string
    beneficiaryHealthStation?: StringFilter<"ActivityParticipation"> | string
    beneficiaryPrimaryType?: StringFilter<"ActivityParticipation"> | string
    beneficiaryCivilStatus?: StringFilter<"ActivityParticipation"> | string
    beneficiaryContactNumber?: StringNullableFilter<"ActivityParticipation"> | string | null
    beneficiaryTypes?: StringFilter<"ActivityParticipation"> | string
    isArchived?: BoolFilter<"ActivityParticipation"> | boolean
    activity?: XOR<ActivityRelationFilter, ActivityWhereInput>
    beneficiary?: XOR<BeneficiaryRelationFilter, BeneficiaryWhereInput>
  }, "activityId_beneficiaryId">

  export type ActivityParticipationOrderByWithAggregationInput = {
    activityId?: SortOrder
    beneficiaryId?: SortOrder
    attended?: SortOrder
    beneficiaryFirstName?: SortOrder
    beneficiaryMiddleName?: SortOrderInput | SortOrder
    beneficiaryLastName?: SortOrder
    beneficiarySuffix?: SortOrderInput | SortOrder
    beneficiaryBirthdate?: SortOrder
    beneficiarySex?: SortOrder
    beneficiaryJob?: SortOrderInput | SortOrder
    beneficiaryBarangay?: SortOrder
    beneficiaryHealthStation?: SortOrder
    beneficiaryPrimaryType?: SortOrder
    beneficiaryCivilStatus?: SortOrder
    beneficiaryContactNumber?: SortOrderInput | SortOrder
    beneficiaryTypes?: SortOrder
    isArchived?: SortOrder
    _count?: ActivityParticipationCountOrderByAggregateInput
    _avg?: ActivityParticipationAvgOrderByAggregateInput
    _max?: ActivityParticipationMaxOrderByAggregateInput
    _min?: ActivityParticipationMinOrderByAggregateInput
    _sum?: ActivityParticipationSumOrderByAggregateInput
  }

  export type ActivityParticipationScalarWhereWithAggregatesInput = {
    AND?: ActivityParticipationScalarWhereWithAggregatesInput | ActivityParticipationScalarWhereWithAggregatesInput[]
    OR?: ActivityParticipationScalarWhereWithAggregatesInput[]
    NOT?: ActivityParticipationScalarWhereWithAggregatesInput | ActivityParticipationScalarWhereWithAggregatesInput[]
    activityId?: IntWithAggregatesFilter<"ActivityParticipation"> | number
    beneficiaryId?: IntWithAggregatesFilter<"ActivityParticipation"> | number
    attended?: BoolWithAggregatesFilter<"ActivityParticipation"> | boolean
    beneficiaryFirstName?: StringWithAggregatesFilter<"ActivityParticipation"> | string
    beneficiaryMiddleName?: StringNullableWithAggregatesFilter<"ActivityParticipation"> | string | null
    beneficiaryLastName?: StringWithAggregatesFilter<"ActivityParticipation"> | string
    beneficiarySuffix?: StringNullableWithAggregatesFilter<"ActivityParticipation"> | string | null
    beneficiaryBirthdate?: DateTimeWithAggregatesFilter<"ActivityParticipation"> | Date | string
    beneficiarySex?: StringWithAggregatesFilter<"ActivityParticipation"> | string
    beneficiaryJob?: StringNullableWithAggregatesFilter<"ActivityParticipation"> | string | null
    beneficiaryBarangay?: StringWithAggregatesFilter<"ActivityParticipation"> | string
    beneficiaryHealthStation?: StringWithAggregatesFilter<"ActivityParticipation"> | string
    beneficiaryPrimaryType?: StringWithAggregatesFilter<"ActivityParticipation"> | string
    beneficiaryCivilStatus?: StringWithAggregatesFilter<"ActivityParticipation"> | string
    beneficiaryContactNumber?: StringNullableWithAggregatesFilter<"ActivityParticipation"> | string | null
    beneficiaryTypes?: StringWithAggregatesFilter<"ActivityParticipation"> | string
    isArchived?: BoolWithAggregatesFilter<"ActivityParticipation"> | boolean
  }

  export type ReportWhereInput = {
    AND?: ReportWhereInput | ReportWhereInput[]
    OR?: ReportWhereInput[]
    NOT?: ReportWhereInput | ReportWhereInput[]
    reportId?: IntFilter<"Report"> | number
    type?: StringFilter<"Report"> | string
    month?: StringFilter<"Report"> | string
    year?: IntFilter<"Report"> | number
    userId?: IntFilter<"Report"> | number
    dueDate?: DateTimeFilter<"Report"> | Date | string
    isArchived?: BoolFilter<"Report"> | boolean
    files?: FileAttachmentListRelationFilter
    feedbacks?: FeedbackListRelationFilter
    submissions?: SubmissionListRelationFilter
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type ReportOrderByWithRelationInput = {
    reportId?: SortOrder
    type?: SortOrder
    month?: SortOrder
    year?: SortOrder
    userId?: SortOrder
    dueDate?: SortOrder
    isArchived?: SortOrder
    files?: FileAttachmentOrderByRelationAggregateInput
    feedbacks?: FeedbackOrderByRelationAggregateInput
    submissions?: SubmissionOrderByRelationAggregateInput
    user?: UserOrderByWithRelationInput
  }

  export type ReportWhereUniqueInput = Prisma.AtLeast<{
    reportId?: number
    AND?: ReportWhereInput | ReportWhereInput[]
    OR?: ReportWhereInput[]
    NOT?: ReportWhereInput | ReportWhereInput[]
    type?: StringFilter<"Report"> | string
    month?: StringFilter<"Report"> | string
    year?: IntFilter<"Report"> | number
    userId?: IntFilter<"Report"> | number
    dueDate?: DateTimeFilter<"Report"> | Date | string
    isArchived?: BoolFilter<"Report"> | boolean
    files?: FileAttachmentListRelationFilter
    feedbacks?: FeedbackListRelationFilter
    submissions?: SubmissionListRelationFilter
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "reportId">

  export type ReportOrderByWithAggregationInput = {
    reportId?: SortOrder
    type?: SortOrder
    month?: SortOrder
    year?: SortOrder
    userId?: SortOrder
    dueDate?: SortOrder
    isArchived?: SortOrder
    _count?: ReportCountOrderByAggregateInput
    _avg?: ReportAvgOrderByAggregateInput
    _max?: ReportMaxOrderByAggregateInput
    _min?: ReportMinOrderByAggregateInput
    _sum?: ReportSumOrderByAggregateInput
  }

  export type ReportScalarWhereWithAggregatesInput = {
    AND?: ReportScalarWhereWithAggregatesInput | ReportScalarWhereWithAggregatesInput[]
    OR?: ReportScalarWhereWithAggregatesInput[]
    NOT?: ReportScalarWhereWithAggregatesInput | ReportScalarWhereWithAggregatesInput[]
    reportId?: IntWithAggregatesFilter<"Report"> | number
    type?: StringWithAggregatesFilter<"Report"> | string
    month?: StringWithAggregatesFilter<"Report"> | string
    year?: IntWithAggregatesFilter<"Report"> | number
    userId?: IntWithAggregatesFilter<"Report"> | number
    dueDate?: DateTimeWithAggregatesFilter<"Report"> | Date | string
    isArchived?: BoolWithAggregatesFilter<"Report"> | boolean
  }

  export type FileAttachmentWhereInput = {
    AND?: FileAttachmentWhereInput | FileAttachmentWhereInput[]
    OR?: FileAttachmentWhereInput[]
    NOT?: FileAttachmentWhereInput | FileAttachmentWhereInput[]
    fileId?: IntFilter<"FileAttachment"> | number
    reportId?: IntFilter<"FileAttachment"> | number
    submissionId?: IntFilter<"FileAttachment"> | number
    filePath?: StringFilter<"FileAttachment"> | string
    fileType?: StringFilter<"FileAttachment"> | string
    fileName?: StringFilter<"FileAttachment"> | string
    report?: XOR<ReportRelationFilter, ReportWhereInput>
    submission?: XOR<SubmissionRelationFilter, SubmissionWhereInput>
  }

  export type FileAttachmentOrderByWithRelationInput = {
    fileId?: SortOrder
    reportId?: SortOrder
    submissionId?: SortOrder
    filePath?: SortOrder
    fileType?: SortOrder
    fileName?: SortOrder
    report?: ReportOrderByWithRelationInput
    submission?: SubmissionOrderByWithRelationInput
  }

  export type FileAttachmentWhereUniqueInput = Prisma.AtLeast<{
    fileId?: number
    AND?: FileAttachmentWhereInput | FileAttachmentWhereInput[]
    OR?: FileAttachmentWhereInput[]
    NOT?: FileAttachmentWhereInput | FileAttachmentWhereInput[]
    reportId?: IntFilter<"FileAttachment"> | number
    submissionId?: IntFilter<"FileAttachment"> | number
    filePath?: StringFilter<"FileAttachment"> | string
    fileType?: StringFilter<"FileAttachment"> | string
    fileName?: StringFilter<"FileAttachment"> | string
    report?: XOR<ReportRelationFilter, ReportWhereInput>
    submission?: XOR<SubmissionRelationFilter, SubmissionWhereInput>
  }, "fileId">

  export type FileAttachmentOrderByWithAggregationInput = {
    fileId?: SortOrder
    reportId?: SortOrder
    submissionId?: SortOrder
    filePath?: SortOrder
    fileType?: SortOrder
    fileName?: SortOrder
    _count?: FileAttachmentCountOrderByAggregateInput
    _avg?: FileAttachmentAvgOrderByAggregateInput
    _max?: FileAttachmentMaxOrderByAggregateInput
    _min?: FileAttachmentMinOrderByAggregateInput
    _sum?: FileAttachmentSumOrderByAggregateInput
  }

  export type FileAttachmentScalarWhereWithAggregatesInput = {
    AND?: FileAttachmentScalarWhereWithAggregatesInput | FileAttachmentScalarWhereWithAggregatesInput[]
    OR?: FileAttachmentScalarWhereWithAggregatesInput[]
    NOT?: FileAttachmentScalarWhereWithAggregatesInput | FileAttachmentScalarWhereWithAggregatesInput[]
    fileId?: IntWithAggregatesFilter<"FileAttachment"> | number
    reportId?: IntWithAggregatesFilter<"FileAttachment"> | number
    submissionId?: IntWithAggregatesFilter<"FileAttachment"> | number
    filePath?: StringWithAggregatesFilter<"FileAttachment"> | string
    fileType?: StringWithAggregatesFilter<"FileAttachment"> | string
    fileName?: StringWithAggregatesFilter<"FileAttachment"> | string
  }

  export type FeedbackWhereInput = {
    AND?: FeedbackWhereInput | FeedbackWhereInput[]
    OR?: FeedbackWhereInput[]
    NOT?: FeedbackWhereInput | FeedbackWhereInput[]
    feedbackId?: IntFilter<"Feedback"> | number
    reportId?: IntFilter<"Feedback"> | number
    createdBy?: IntFilter<"Feedback"> | number
    content?: StringFilter<"Feedback"> | string
    createdAt?: DateTimeFilter<"Feedback"> | Date | string
    submissionId?: IntNullableFilter<"Feedback"> | number | null
    report?: XOR<ReportRelationFilter, ReportWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
    submission?: XOR<SubmissionNullableRelationFilter, SubmissionWhereInput> | null
  }

  export type FeedbackOrderByWithRelationInput = {
    feedbackId?: SortOrder
    reportId?: SortOrder
    createdBy?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    submissionId?: SortOrderInput | SortOrder
    report?: ReportOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
    submission?: SubmissionOrderByWithRelationInput
  }

  export type FeedbackWhereUniqueInput = Prisma.AtLeast<{
    feedbackId?: number
    AND?: FeedbackWhereInput | FeedbackWhereInput[]
    OR?: FeedbackWhereInput[]
    NOT?: FeedbackWhereInput | FeedbackWhereInput[]
    reportId?: IntFilter<"Feedback"> | number
    createdBy?: IntFilter<"Feedback"> | number
    content?: StringFilter<"Feedback"> | string
    createdAt?: DateTimeFilter<"Feedback"> | Date | string
    submissionId?: IntNullableFilter<"Feedback"> | number | null
    report?: XOR<ReportRelationFilter, ReportWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
    submission?: XOR<SubmissionNullableRelationFilter, SubmissionWhereInput> | null
  }, "feedbackId">

  export type FeedbackOrderByWithAggregationInput = {
    feedbackId?: SortOrder
    reportId?: SortOrder
    createdBy?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    submissionId?: SortOrderInput | SortOrder
    _count?: FeedbackCountOrderByAggregateInput
    _avg?: FeedbackAvgOrderByAggregateInput
    _max?: FeedbackMaxOrderByAggregateInput
    _min?: FeedbackMinOrderByAggregateInput
    _sum?: FeedbackSumOrderByAggregateInput
  }

  export type FeedbackScalarWhereWithAggregatesInput = {
    AND?: FeedbackScalarWhereWithAggregatesInput | FeedbackScalarWhereWithAggregatesInput[]
    OR?: FeedbackScalarWhereWithAggregatesInput[]
    NOT?: FeedbackScalarWhereWithAggregatesInput | FeedbackScalarWhereWithAggregatesInput[]
    feedbackId?: IntWithAggregatesFilter<"Feedback"> | number
    reportId?: IntWithAggregatesFilter<"Feedback"> | number
    createdBy?: IntWithAggregatesFilter<"Feedback"> | number
    content?: StringWithAggregatesFilter<"Feedback"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Feedback"> | Date | string
    submissionId?: IntNullableWithAggregatesFilter<"Feedback"> | number | null
  }

  export type SubmissionWhereInput = {
    AND?: SubmissionWhereInput | SubmissionWhereInput[]
    OR?: SubmissionWhereInput[]
    NOT?: SubmissionWhereInput | SubmissionWhereInput[]
    submissionId?: IntFilter<"Submission"> | number
    reportId?: IntFilter<"Submission"> | number
    userId?: IntFilter<"Submission"> | number
    status?: StringFilter<"Submission"> | string
    submissionDate?: DateTimeFilter<"Submission"> | Date | string
    files?: FileAttachmentListRelationFilter
    feedbacks?: FeedbackListRelationFilter
    report?: XOR<ReportRelationFilter, ReportWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type SubmissionOrderByWithRelationInput = {
    submissionId?: SortOrder
    reportId?: SortOrder
    userId?: SortOrder
    status?: SortOrder
    submissionDate?: SortOrder
    files?: FileAttachmentOrderByRelationAggregateInput
    feedbacks?: FeedbackOrderByRelationAggregateInput
    report?: ReportOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type SubmissionWhereUniqueInput = Prisma.AtLeast<{
    submissionId?: number
    AND?: SubmissionWhereInput | SubmissionWhereInput[]
    OR?: SubmissionWhereInput[]
    NOT?: SubmissionWhereInput | SubmissionWhereInput[]
    reportId?: IntFilter<"Submission"> | number
    userId?: IntFilter<"Submission"> | number
    status?: StringFilter<"Submission"> | string
    submissionDate?: DateTimeFilter<"Submission"> | Date | string
    files?: FileAttachmentListRelationFilter
    feedbacks?: FeedbackListRelationFilter
    report?: XOR<ReportRelationFilter, ReportWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "submissionId">

  export type SubmissionOrderByWithAggregationInput = {
    submissionId?: SortOrder
    reportId?: SortOrder
    userId?: SortOrder
    status?: SortOrder
    submissionDate?: SortOrder
    _count?: SubmissionCountOrderByAggregateInput
    _avg?: SubmissionAvgOrderByAggregateInput
    _max?: SubmissionMaxOrderByAggregateInput
    _min?: SubmissionMinOrderByAggregateInput
    _sum?: SubmissionSumOrderByAggregateInput
  }

  export type SubmissionScalarWhereWithAggregatesInput = {
    AND?: SubmissionScalarWhereWithAggregatesInput | SubmissionScalarWhereWithAggregatesInput[]
    OR?: SubmissionScalarWhereWithAggregatesInput[]
    NOT?: SubmissionScalarWhereWithAggregatesInput | SubmissionScalarWhereWithAggregatesInput[]
    submissionId?: IntWithAggregatesFilter<"Submission"> | number
    reportId?: IntWithAggregatesFilter<"Submission"> | number
    userId?: IntWithAggregatesFilter<"Submission"> | number
    status?: StringWithAggregatesFilter<"Submission"> | string
    submissionDate?: DateTimeWithAggregatesFilter<"Submission"> | Date | string
  }

  export type NotificationWhereInput = {
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    id?: IntFilter<"Notification"> | number
    userId?: IntFilter<"Notification"> | number
    title?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    read?: BoolFilter<"Notification"> | boolean
    type?: StringFilter<"Notification"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type NotificationOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
    read?: SortOrder
    type?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type NotificationWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    userId?: IntFilter<"Notification"> | number
    title?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    read?: BoolFilter<"Notification"> | boolean
    type?: StringFilter<"Notification"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type NotificationOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
    read?: SortOrder
    type?: SortOrder
    _count?: NotificationCountOrderByAggregateInput
    _avg?: NotificationAvgOrderByAggregateInput
    _max?: NotificationMaxOrderByAggregateInput
    _min?: NotificationMinOrderByAggregateInput
    _sum?: NotificationSumOrderByAggregateInput
  }

  export type NotificationScalarWhereWithAggregatesInput = {
    AND?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    OR?: NotificationScalarWhereWithAggregatesInput[]
    NOT?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Notification"> | number
    userId?: IntWithAggregatesFilter<"Notification"> | number
    title?: StringWithAggregatesFilter<"Notification"> | string
    message?: StringWithAggregatesFilter<"Notification"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Notification"> | Date | string
    read?: BoolWithAggregatesFilter<"Notification"> | boolean
    type?: StringWithAggregatesFilter<"Notification"> | string
  }

  export type EventWhereInput = {
    AND?: EventWhereInput | EventWhereInput[]
    OR?: EventWhereInput[]
    NOT?: EventWhereInput | EventWhereInput[]
    eventId?: IntFilter<"Event"> | number
    title?: StringFilter<"Event"> | string
    start?: DateTimeFilter<"Event"> | Date | string
    end?: DateTimeFilter<"Event"> | Date | string
    allDay?: BoolFilter<"Event"> | boolean
    createdBy?: IntFilter<"Event"> | number
    createdAt?: DateTimeFilter<"Event"> | Date | string
    isArchived?: BoolFilter<"Event"> | boolean
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type EventOrderByWithRelationInput = {
    eventId?: SortOrder
    title?: SortOrder
    start?: SortOrder
    end?: SortOrder
    allDay?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    isArchived?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type EventWhereUniqueInput = Prisma.AtLeast<{
    eventId?: number
    AND?: EventWhereInput | EventWhereInput[]
    OR?: EventWhereInput[]
    NOT?: EventWhereInput | EventWhereInput[]
    title?: StringFilter<"Event"> | string
    start?: DateTimeFilter<"Event"> | Date | string
    end?: DateTimeFilter<"Event"> | Date | string
    allDay?: BoolFilter<"Event"> | boolean
    createdBy?: IntFilter<"Event"> | number
    createdAt?: DateTimeFilter<"Event"> | Date | string
    isArchived?: BoolFilter<"Event"> | boolean
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "eventId">

  export type EventOrderByWithAggregationInput = {
    eventId?: SortOrder
    title?: SortOrder
    start?: SortOrder
    end?: SortOrder
    allDay?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    isArchived?: SortOrder
    _count?: EventCountOrderByAggregateInput
    _avg?: EventAvgOrderByAggregateInput
    _max?: EventMaxOrderByAggregateInput
    _min?: EventMinOrderByAggregateInput
    _sum?: EventSumOrderByAggregateInput
  }

  export type EventScalarWhereWithAggregatesInput = {
    AND?: EventScalarWhereWithAggregatesInput | EventScalarWhereWithAggregatesInput[]
    OR?: EventScalarWhereWithAggregatesInput[]
    NOT?: EventScalarWhereWithAggregatesInput | EventScalarWhereWithAggregatesInput[]
    eventId?: IntWithAggregatesFilter<"Event"> | number
    title?: StringWithAggregatesFilter<"Event"> | string
    start?: DateTimeWithAggregatesFilter<"Event"> | Date | string
    end?: DateTimeWithAggregatesFilter<"Event"> | Date | string
    allDay?: BoolWithAggregatesFilter<"Event"> | boolean
    createdBy?: IntWithAggregatesFilter<"Event"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Event"> | Date | string
    isArchived?: BoolWithAggregatesFilter<"Event"> | boolean
  }

  export type UserCreateInput = {
    username: string
    password: string
    firstName: string
    lastName: string
    role: string
    sex?: string
    barangay?: string
    isArchived?: boolean
    activitiesCreated?: ActivityCreateNestedManyWithoutCreatorInput
    reports?: ReportCreateNestedManyWithoutUserInput
    feedbacks?: FeedbackCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    events?: EventCreateNestedManyWithoutUserInput
    submissions?: SubmissionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    user_id?: number
    username: string
    password: string
    firstName: string
    lastName: string
    role: string
    sex?: string
    barangay?: string
    isArchived?: boolean
    activitiesCreated?: ActivityUncheckedCreateNestedManyWithoutCreatorInput
    reports?: ReportUncheckedCreateNestedManyWithoutUserInput
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    events?: EventUncheckedCreateNestedManyWithoutUserInput
    submissions?: SubmissionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    sex?: StringFieldUpdateOperationsInput | string
    barangay?: StringFieldUpdateOperationsInput | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    activitiesCreated?: ActivityUpdateManyWithoutCreatorNestedInput
    reports?: ReportUpdateManyWithoutUserNestedInput
    feedbacks?: FeedbackUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    events?: EventUpdateManyWithoutUserNestedInput
    submissions?: SubmissionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    sex?: StringFieldUpdateOperationsInput | string
    barangay?: StringFieldUpdateOperationsInput | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    activitiesCreated?: ActivityUncheckedUpdateManyWithoutCreatorNestedInput
    reports?: ReportUncheckedUpdateManyWithoutUserNestedInput
    feedbacks?: FeedbackUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    events?: EventUncheckedUpdateManyWithoutUserNestedInput
    submissions?: SubmissionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    user_id?: number
    username: string
    password: string
    firstName: string
    lastName: string
    role: string
    sex?: string
    barangay?: string
    isArchived?: boolean
  }

  export type UserUpdateManyMutationInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    sex?: StringFieldUpdateOperationsInput | string
    barangay?: StringFieldUpdateOperationsInput | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserUncheckedUpdateManyInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    sex?: StringFieldUpdateOperationsInput | string
    barangay?: StringFieldUpdateOperationsInput | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
  }

  export type BeneficiaryCreateInput = {
    firstName: string
    middleName?: string | null
    lastName: string
    suffix?: string | null
    birthdate: Date | string
    age?: string | null
    sex: string
    job?: string | null
    barangay: string
    healthStation: string
    ageGroup: string
    subType?: string | null
    civilStatus: string
    contactNumber?: string | null
    isArchived?: boolean
    activityParticipation?: ActivityParticipationCreateNestedManyWithoutBeneficiaryInput
    beneficiaryTypes?: BeneficiaryTypesCreateNestedManyWithoutBeneficiaryInput
  }

  export type BeneficiaryUncheckedCreateInput = {
    beneficiaryId?: number
    firstName: string
    middleName?: string | null
    lastName: string
    suffix?: string | null
    birthdate: Date | string
    age?: string | null
    sex: string
    job?: string | null
    barangay: string
    healthStation: string
    ageGroup: string
    subType?: string | null
    civilStatus: string
    contactNumber?: string | null
    isArchived?: boolean
    activityParticipation?: ActivityParticipationUncheckedCreateNestedManyWithoutBeneficiaryInput
    beneficiaryTypes?: BeneficiaryTypesUncheckedCreateNestedManyWithoutBeneficiaryInput
  }

  export type BeneficiaryUpdateInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: StringFieldUpdateOperationsInput | string
    suffix?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: DateTimeFieldUpdateOperationsInput | Date | string
    age?: NullableStringFieldUpdateOperationsInput | string | null
    sex?: StringFieldUpdateOperationsInput | string
    job?: NullableStringFieldUpdateOperationsInput | string | null
    barangay?: StringFieldUpdateOperationsInput | string
    healthStation?: StringFieldUpdateOperationsInput | string
    ageGroup?: StringFieldUpdateOperationsInput | string
    subType?: NullableStringFieldUpdateOperationsInput | string | null
    civilStatus?: StringFieldUpdateOperationsInput | string
    contactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    activityParticipation?: ActivityParticipationUpdateManyWithoutBeneficiaryNestedInput
    beneficiaryTypes?: BeneficiaryTypesUpdateManyWithoutBeneficiaryNestedInput
  }

  export type BeneficiaryUncheckedUpdateInput = {
    beneficiaryId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: StringFieldUpdateOperationsInput | string
    suffix?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: DateTimeFieldUpdateOperationsInput | Date | string
    age?: NullableStringFieldUpdateOperationsInput | string | null
    sex?: StringFieldUpdateOperationsInput | string
    job?: NullableStringFieldUpdateOperationsInput | string | null
    barangay?: StringFieldUpdateOperationsInput | string
    healthStation?: StringFieldUpdateOperationsInput | string
    ageGroup?: StringFieldUpdateOperationsInput | string
    subType?: NullableStringFieldUpdateOperationsInput | string | null
    civilStatus?: StringFieldUpdateOperationsInput | string
    contactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    activityParticipation?: ActivityParticipationUncheckedUpdateManyWithoutBeneficiaryNestedInput
    beneficiaryTypes?: BeneficiaryTypesUncheckedUpdateManyWithoutBeneficiaryNestedInput
  }

  export type BeneficiaryCreateManyInput = {
    beneficiaryId?: number
    firstName: string
    middleName?: string | null
    lastName: string
    suffix?: string | null
    birthdate: Date | string
    age?: string | null
    sex: string
    job?: string | null
    barangay: string
    healthStation: string
    ageGroup: string
    subType?: string | null
    civilStatus: string
    contactNumber?: string | null
    isArchived?: boolean
  }

  export type BeneficiaryUpdateManyMutationInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: StringFieldUpdateOperationsInput | string
    suffix?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: DateTimeFieldUpdateOperationsInput | Date | string
    age?: NullableStringFieldUpdateOperationsInput | string | null
    sex?: StringFieldUpdateOperationsInput | string
    job?: NullableStringFieldUpdateOperationsInput | string | null
    barangay?: StringFieldUpdateOperationsInput | string
    healthStation?: StringFieldUpdateOperationsInput | string
    ageGroup?: StringFieldUpdateOperationsInput | string
    subType?: NullableStringFieldUpdateOperationsInput | string | null
    civilStatus?: StringFieldUpdateOperationsInput | string
    contactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    isArchived?: BoolFieldUpdateOperationsInput | boolean
  }

  export type BeneficiaryUncheckedUpdateManyInput = {
    beneficiaryId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: StringFieldUpdateOperationsInput | string
    suffix?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: DateTimeFieldUpdateOperationsInput | Date | string
    age?: NullableStringFieldUpdateOperationsInput | string | null
    sex?: StringFieldUpdateOperationsInput | string
    job?: NullableStringFieldUpdateOperationsInput | string | null
    barangay?: StringFieldUpdateOperationsInput | string
    healthStation?: StringFieldUpdateOperationsInput | string
    ageGroup?: StringFieldUpdateOperationsInput | string
    subType?: NullableStringFieldUpdateOperationsInput | string | null
    civilStatus?: StringFieldUpdateOperationsInput | string
    contactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    isArchived?: BoolFieldUpdateOperationsInput | boolean
  }

  export type TypeCreateInput = {
    typeName: string
    ageGroups?: TypeCreateageGroupsInput | string[]
    sex?: string | null
    subTypes?: TypeCreatesubTypesInput | string[]
    isArchived?: boolean
    beneficiaryTypes?: BeneficiaryTypesCreateNestedManyWithoutTypeInput
  }

  export type TypeUncheckedCreateInput = {
    typeId?: number
    typeName: string
    ageGroups?: TypeCreateageGroupsInput | string[]
    sex?: string | null
    subTypes?: TypeCreatesubTypesInput | string[]
    isArchived?: boolean
    beneficiaryTypes?: BeneficiaryTypesUncheckedCreateNestedManyWithoutTypeInput
  }

  export type TypeUpdateInput = {
    typeName?: StringFieldUpdateOperationsInput | string
    ageGroups?: TypeUpdateageGroupsInput | string[]
    sex?: NullableStringFieldUpdateOperationsInput | string | null
    subTypes?: TypeUpdatesubTypesInput | string[]
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    beneficiaryTypes?: BeneficiaryTypesUpdateManyWithoutTypeNestedInput
  }

  export type TypeUncheckedUpdateInput = {
    typeId?: IntFieldUpdateOperationsInput | number
    typeName?: StringFieldUpdateOperationsInput | string
    ageGroups?: TypeUpdateageGroupsInput | string[]
    sex?: NullableStringFieldUpdateOperationsInput | string | null
    subTypes?: TypeUpdatesubTypesInput | string[]
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    beneficiaryTypes?: BeneficiaryTypesUncheckedUpdateManyWithoutTypeNestedInput
  }

  export type TypeCreateManyInput = {
    typeId?: number
    typeName: string
    ageGroups?: TypeCreateageGroupsInput | string[]
    sex?: string | null
    subTypes?: TypeCreatesubTypesInput | string[]
    isArchived?: boolean
  }

  export type TypeUpdateManyMutationInput = {
    typeName?: StringFieldUpdateOperationsInput | string
    ageGroups?: TypeUpdateageGroupsInput | string[]
    sex?: NullableStringFieldUpdateOperationsInput | string | null
    subTypes?: TypeUpdatesubTypesInput | string[]
    isArchived?: BoolFieldUpdateOperationsInput | boolean
  }

  export type TypeUncheckedUpdateManyInput = {
    typeId?: IntFieldUpdateOperationsInput | number
    typeName?: StringFieldUpdateOperationsInput | string
    ageGroups?: TypeUpdateageGroupsInput | string[]
    sex?: NullableStringFieldUpdateOperationsInput | string | null
    subTypes?: TypeUpdatesubTypesInput | string[]
    isArchived?: BoolFieldUpdateOperationsInput | boolean
  }

  export type BeneficiaryTypesCreateInput = {
    beneficiary: BeneficiaryCreateNestedOneWithoutBeneficiaryTypesInput
    type: TypeCreateNestedOneWithoutBeneficiaryTypesInput
  }

  export type BeneficiaryTypesUncheckedCreateInput = {
    beneficiaryId: number
    typeId: number
  }

  export type BeneficiaryTypesUpdateInput = {
    beneficiary?: BeneficiaryUpdateOneRequiredWithoutBeneficiaryTypesNestedInput
    type?: TypeUpdateOneRequiredWithoutBeneficiaryTypesNestedInput
  }

  export type BeneficiaryTypesUncheckedUpdateInput = {
    beneficiaryId?: IntFieldUpdateOperationsInput | number
    typeId?: IntFieldUpdateOperationsInput | number
  }

  export type BeneficiaryTypesCreateManyInput = {
    beneficiaryId: number
    typeId: number
  }

  export type BeneficiaryTypesUpdateManyMutationInput = {

  }

  export type BeneficiaryTypesUncheckedUpdateManyInput = {
    beneficiaryId?: IntFieldUpdateOperationsInput | number
    typeId?: IntFieldUpdateOperationsInput | number
  }

  export type ActivityCreateInput = {
    title: string
    description?: string | null
    activityDate: Date | string
    createdAt?: Date | string
    isArchived?: boolean
    filename?: string | null
    filepath?: string | null
    creator: UserCreateNestedOneWithoutActivitiesCreatedInput
    participants?: ActivityParticipationCreateNestedManyWithoutActivityInput
    documentations?: ActivityDocumentationCreateNestedManyWithoutActivityInput
  }

  export type ActivityUncheckedCreateInput = {
    activityId?: number
    title: string
    description?: string | null
    activityDate: Date | string
    createdBy: number
    createdAt?: Date | string
    isArchived?: boolean
    filename?: string | null
    filepath?: string | null
    participants?: ActivityParticipationUncheckedCreateNestedManyWithoutActivityInput
    documentations?: ActivityDocumentationUncheckedCreateNestedManyWithoutActivityInput
  }

  export type ActivityUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    activityDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    filename?: NullableStringFieldUpdateOperationsInput | string | null
    filepath?: NullableStringFieldUpdateOperationsInput | string | null
    creator?: UserUpdateOneRequiredWithoutActivitiesCreatedNestedInput
    participants?: ActivityParticipationUpdateManyWithoutActivityNestedInput
    documentations?: ActivityDocumentationUpdateManyWithoutActivityNestedInput
  }

  export type ActivityUncheckedUpdateInput = {
    activityId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    activityDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    filename?: NullableStringFieldUpdateOperationsInput | string | null
    filepath?: NullableStringFieldUpdateOperationsInput | string | null
    participants?: ActivityParticipationUncheckedUpdateManyWithoutActivityNestedInput
    documentations?: ActivityDocumentationUncheckedUpdateManyWithoutActivityNestedInput
  }

  export type ActivityCreateManyInput = {
    activityId?: number
    title: string
    description?: string | null
    activityDate: Date | string
    createdBy: number
    createdAt?: Date | string
    isArchived?: boolean
    filename?: string | null
    filepath?: string | null
  }

  export type ActivityUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    activityDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    filename?: NullableStringFieldUpdateOperationsInput | string | null
    filepath?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ActivityUncheckedUpdateManyInput = {
    activityId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    activityDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    filename?: NullableStringFieldUpdateOperationsInput | string | null
    filepath?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ActivityDocumentationCreateInput = {
    filename: string
    filepath: string
    uploadedAt?: Date | string
    activity: ActivityCreateNestedOneWithoutDocumentationsInput
  }

  export type ActivityDocumentationUncheckedCreateInput = {
    documentationId?: number
    activityId: number
    filename: string
    filepath: string
    uploadedAt?: Date | string
  }

  export type ActivityDocumentationUpdateInput = {
    filename?: StringFieldUpdateOperationsInput | string
    filepath?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    activity?: ActivityUpdateOneRequiredWithoutDocumentationsNestedInput
  }

  export type ActivityDocumentationUncheckedUpdateInput = {
    documentationId?: IntFieldUpdateOperationsInput | number
    activityId?: IntFieldUpdateOperationsInput | number
    filename?: StringFieldUpdateOperationsInput | string
    filepath?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActivityDocumentationCreateManyInput = {
    documentationId?: number
    activityId: number
    filename: string
    filepath: string
    uploadedAt?: Date | string
  }

  export type ActivityDocumentationUpdateManyMutationInput = {
    filename?: StringFieldUpdateOperationsInput | string
    filepath?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActivityDocumentationUncheckedUpdateManyInput = {
    documentationId?: IntFieldUpdateOperationsInput | number
    activityId?: IntFieldUpdateOperationsInput | number
    filename?: StringFieldUpdateOperationsInput | string
    filepath?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActivityParticipationCreateInput = {
    attended?: boolean
    beneficiaryFirstName: string
    beneficiaryMiddleName?: string | null
    beneficiaryLastName: string
    beneficiarySuffix?: string | null
    beneficiaryBirthdate: Date | string
    beneficiarySex: string
    beneficiaryJob?: string | null
    beneficiaryBarangay: string
    beneficiaryHealthStation: string
    beneficiaryPrimaryType: string
    beneficiaryCivilStatus: string
    beneficiaryContactNumber?: string | null
    beneficiaryTypes: string
    isArchived?: boolean
    activity: ActivityCreateNestedOneWithoutParticipantsInput
    beneficiary: BeneficiaryCreateNestedOneWithoutActivityParticipationInput
  }

  export type ActivityParticipationUncheckedCreateInput = {
    activityId: number
    beneficiaryId: number
    attended?: boolean
    beneficiaryFirstName: string
    beneficiaryMiddleName?: string | null
    beneficiaryLastName: string
    beneficiarySuffix?: string | null
    beneficiaryBirthdate: Date | string
    beneficiarySex: string
    beneficiaryJob?: string | null
    beneficiaryBarangay: string
    beneficiaryHealthStation: string
    beneficiaryPrimaryType: string
    beneficiaryCivilStatus: string
    beneficiaryContactNumber?: string | null
    beneficiaryTypes: string
    isArchived?: boolean
  }

  export type ActivityParticipationUpdateInput = {
    attended?: BoolFieldUpdateOperationsInput | boolean
    beneficiaryFirstName?: StringFieldUpdateOperationsInput | string
    beneficiaryMiddleName?: NullableStringFieldUpdateOperationsInput | string | null
    beneficiaryLastName?: StringFieldUpdateOperationsInput | string
    beneficiarySuffix?: NullableStringFieldUpdateOperationsInput | string | null
    beneficiaryBirthdate?: DateTimeFieldUpdateOperationsInput | Date | string
    beneficiarySex?: StringFieldUpdateOperationsInput | string
    beneficiaryJob?: NullableStringFieldUpdateOperationsInput | string | null
    beneficiaryBarangay?: StringFieldUpdateOperationsInput | string
    beneficiaryHealthStation?: StringFieldUpdateOperationsInput | string
    beneficiaryPrimaryType?: StringFieldUpdateOperationsInput | string
    beneficiaryCivilStatus?: StringFieldUpdateOperationsInput | string
    beneficiaryContactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    beneficiaryTypes?: StringFieldUpdateOperationsInput | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    activity?: ActivityUpdateOneRequiredWithoutParticipantsNestedInput
    beneficiary?: BeneficiaryUpdateOneRequiredWithoutActivityParticipationNestedInput
  }

  export type ActivityParticipationUncheckedUpdateInput = {
    activityId?: IntFieldUpdateOperationsInput | number
    beneficiaryId?: IntFieldUpdateOperationsInput | number
    attended?: BoolFieldUpdateOperationsInput | boolean
    beneficiaryFirstName?: StringFieldUpdateOperationsInput | string
    beneficiaryMiddleName?: NullableStringFieldUpdateOperationsInput | string | null
    beneficiaryLastName?: StringFieldUpdateOperationsInput | string
    beneficiarySuffix?: NullableStringFieldUpdateOperationsInput | string | null
    beneficiaryBirthdate?: DateTimeFieldUpdateOperationsInput | Date | string
    beneficiarySex?: StringFieldUpdateOperationsInput | string
    beneficiaryJob?: NullableStringFieldUpdateOperationsInput | string | null
    beneficiaryBarangay?: StringFieldUpdateOperationsInput | string
    beneficiaryHealthStation?: StringFieldUpdateOperationsInput | string
    beneficiaryPrimaryType?: StringFieldUpdateOperationsInput | string
    beneficiaryCivilStatus?: StringFieldUpdateOperationsInput | string
    beneficiaryContactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    beneficiaryTypes?: StringFieldUpdateOperationsInput | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ActivityParticipationCreateManyInput = {
    activityId: number
    beneficiaryId: number
    attended?: boolean
    beneficiaryFirstName: string
    beneficiaryMiddleName?: string | null
    beneficiaryLastName: string
    beneficiarySuffix?: string | null
    beneficiaryBirthdate: Date | string
    beneficiarySex: string
    beneficiaryJob?: string | null
    beneficiaryBarangay: string
    beneficiaryHealthStation: string
    beneficiaryPrimaryType: string
    beneficiaryCivilStatus: string
    beneficiaryContactNumber?: string | null
    beneficiaryTypes: string
    isArchived?: boolean
  }

  export type ActivityParticipationUpdateManyMutationInput = {
    attended?: BoolFieldUpdateOperationsInput | boolean
    beneficiaryFirstName?: StringFieldUpdateOperationsInput | string
    beneficiaryMiddleName?: NullableStringFieldUpdateOperationsInput | string | null
    beneficiaryLastName?: StringFieldUpdateOperationsInput | string
    beneficiarySuffix?: NullableStringFieldUpdateOperationsInput | string | null
    beneficiaryBirthdate?: DateTimeFieldUpdateOperationsInput | Date | string
    beneficiarySex?: StringFieldUpdateOperationsInput | string
    beneficiaryJob?: NullableStringFieldUpdateOperationsInput | string | null
    beneficiaryBarangay?: StringFieldUpdateOperationsInput | string
    beneficiaryHealthStation?: StringFieldUpdateOperationsInput | string
    beneficiaryPrimaryType?: StringFieldUpdateOperationsInput | string
    beneficiaryCivilStatus?: StringFieldUpdateOperationsInput | string
    beneficiaryContactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    beneficiaryTypes?: StringFieldUpdateOperationsInput | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ActivityParticipationUncheckedUpdateManyInput = {
    activityId?: IntFieldUpdateOperationsInput | number
    beneficiaryId?: IntFieldUpdateOperationsInput | number
    attended?: BoolFieldUpdateOperationsInput | boolean
    beneficiaryFirstName?: StringFieldUpdateOperationsInput | string
    beneficiaryMiddleName?: NullableStringFieldUpdateOperationsInput | string | null
    beneficiaryLastName?: StringFieldUpdateOperationsInput | string
    beneficiarySuffix?: NullableStringFieldUpdateOperationsInput | string | null
    beneficiaryBirthdate?: DateTimeFieldUpdateOperationsInput | Date | string
    beneficiarySex?: StringFieldUpdateOperationsInput | string
    beneficiaryJob?: NullableStringFieldUpdateOperationsInput | string | null
    beneficiaryBarangay?: StringFieldUpdateOperationsInput | string
    beneficiaryHealthStation?: StringFieldUpdateOperationsInput | string
    beneficiaryPrimaryType?: StringFieldUpdateOperationsInput | string
    beneficiaryCivilStatus?: StringFieldUpdateOperationsInput | string
    beneficiaryContactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    beneficiaryTypes?: StringFieldUpdateOperationsInput | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ReportCreateInput = {
    type: string
    month: string
    year: number
    dueDate: Date | string
    isArchived?: boolean
    files?: FileAttachmentCreateNestedManyWithoutReportInput
    feedbacks?: FeedbackCreateNestedManyWithoutReportInput
    submissions?: SubmissionCreateNestedManyWithoutReportInput
    user: UserCreateNestedOneWithoutReportsInput
  }

  export type ReportUncheckedCreateInput = {
    reportId?: number
    type: string
    month: string
    year: number
    userId: number
    dueDate: Date | string
    isArchived?: boolean
    files?: FileAttachmentUncheckedCreateNestedManyWithoutReportInput
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutReportInput
    submissions?: SubmissionUncheckedCreateNestedManyWithoutReportInput
  }

  export type ReportUpdateInput = {
    type?: StringFieldUpdateOperationsInput | string
    month?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    files?: FileAttachmentUpdateManyWithoutReportNestedInput
    feedbacks?: FeedbackUpdateManyWithoutReportNestedInput
    submissions?: SubmissionUpdateManyWithoutReportNestedInput
    user?: UserUpdateOneRequiredWithoutReportsNestedInput
  }

  export type ReportUncheckedUpdateInput = {
    reportId?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    month?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    files?: FileAttachmentUncheckedUpdateManyWithoutReportNestedInput
    feedbacks?: FeedbackUncheckedUpdateManyWithoutReportNestedInput
    submissions?: SubmissionUncheckedUpdateManyWithoutReportNestedInput
  }

  export type ReportCreateManyInput = {
    reportId?: number
    type: string
    month: string
    year: number
    userId: number
    dueDate: Date | string
    isArchived?: boolean
  }

  export type ReportUpdateManyMutationInput = {
    type?: StringFieldUpdateOperationsInput | string
    month?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ReportUncheckedUpdateManyInput = {
    reportId?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    month?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
  }

  export type FileAttachmentCreateInput = {
    filePath: string
    fileType: string
    fileName: string
    report: ReportCreateNestedOneWithoutFilesInput
    submission: SubmissionCreateNestedOneWithoutFilesInput
  }

  export type FileAttachmentUncheckedCreateInput = {
    fileId?: number
    reportId: number
    submissionId: number
    filePath: string
    fileType: string
    fileName: string
  }

  export type FileAttachmentUpdateInput = {
    filePath?: StringFieldUpdateOperationsInput | string
    fileType?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    report?: ReportUpdateOneRequiredWithoutFilesNestedInput
    submission?: SubmissionUpdateOneRequiredWithoutFilesNestedInput
  }

  export type FileAttachmentUncheckedUpdateInput = {
    fileId?: IntFieldUpdateOperationsInput | number
    reportId?: IntFieldUpdateOperationsInput | number
    submissionId?: IntFieldUpdateOperationsInput | number
    filePath?: StringFieldUpdateOperationsInput | string
    fileType?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
  }

  export type FileAttachmentCreateManyInput = {
    fileId?: number
    reportId: number
    submissionId: number
    filePath: string
    fileType: string
    fileName: string
  }

  export type FileAttachmentUpdateManyMutationInput = {
    filePath?: StringFieldUpdateOperationsInput | string
    fileType?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
  }

  export type FileAttachmentUncheckedUpdateManyInput = {
    fileId?: IntFieldUpdateOperationsInput | number
    reportId?: IntFieldUpdateOperationsInput | number
    submissionId?: IntFieldUpdateOperationsInput | number
    filePath?: StringFieldUpdateOperationsInput | string
    fileType?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
  }

  export type FeedbackCreateInput = {
    content: string
    createdAt?: Date | string
    report: ReportCreateNestedOneWithoutFeedbacksInput
    user: UserCreateNestedOneWithoutFeedbacksInput
    submission?: SubmissionCreateNestedOneWithoutFeedbacksInput
  }

  export type FeedbackUncheckedCreateInput = {
    feedbackId?: number
    reportId: number
    createdBy: number
    content: string
    createdAt?: Date | string
    submissionId?: number | null
  }

  export type FeedbackUpdateInput = {
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    report?: ReportUpdateOneRequiredWithoutFeedbacksNestedInput
    user?: UserUpdateOneRequiredWithoutFeedbacksNestedInput
    submission?: SubmissionUpdateOneWithoutFeedbacksNestedInput
  }

  export type FeedbackUncheckedUpdateInput = {
    feedbackId?: IntFieldUpdateOperationsInput | number
    reportId?: IntFieldUpdateOperationsInput | number
    createdBy?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submissionId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type FeedbackCreateManyInput = {
    feedbackId?: number
    reportId: number
    createdBy: number
    content: string
    createdAt?: Date | string
    submissionId?: number | null
  }

  export type FeedbackUpdateManyMutationInput = {
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedbackUncheckedUpdateManyInput = {
    feedbackId?: IntFieldUpdateOperationsInput | number
    reportId?: IntFieldUpdateOperationsInput | number
    createdBy?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submissionId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type SubmissionCreateInput = {
    status?: string
    submissionDate?: Date | string
    files?: FileAttachmentCreateNestedManyWithoutSubmissionInput
    feedbacks?: FeedbackCreateNestedManyWithoutSubmissionInput
    report: ReportCreateNestedOneWithoutSubmissionsInput
    user: UserCreateNestedOneWithoutSubmissionsInput
  }

  export type SubmissionUncheckedCreateInput = {
    submissionId?: number
    reportId: number
    userId: number
    status?: string
    submissionDate?: Date | string
    files?: FileAttachmentUncheckedCreateNestedManyWithoutSubmissionInput
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutSubmissionInput
  }

  export type SubmissionUpdateInput = {
    status?: StringFieldUpdateOperationsInput | string
    submissionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    files?: FileAttachmentUpdateManyWithoutSubmissionNestedInput
    feedbacks?: FeedbackUpdateManyWithoutSubmissionNestedInput
    report?: ReportUpdateOneRequiredWithoutSubmissionsNestedInput
    user?: UserUpdateOneRequiredWithoutSubmissionsNestedInput
  }

  export type SubmissionUncheckedUpdateInput = {
    submissionId?: IntFieldUpdateOperationsInput | number
    reportId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    submissionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    files?: FileAttachmentUncheckedUpdateManyWithoutSubmissionNestedInput
    feedbacks?: FeedbackUncheckedUpdateManyWithoutSubmissionNestedInput
  }

  export type SubmissionCreateManyInput = {
    submissionId?: number
    reportId: number
    userId: number
    status?: string
    submissionDate?: Date | string
  }

  export type SubmissionUpdateManyMutationInput = {
    status?: StringFieldUpdateOperationsInput | string
    submissionDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SubmissionUncheckedUpdateManyInput = {
    submissionId?: IntFieldUpdateOperationsInput | number
    reportId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    submissionDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type NotificationCreateInput = {
    title: string
    message: string
    createdAt?: Date | string
    read?: boolean
    type: string
    user: UserCreateNestedOneWithoutNotificationsInput
  }

  export type NotificationUncheckedCreateInput = {
    id?: number
    userId: number
    title: string
    message: string
    createdAt?: Date | string
    read?: boolean
    type: string
  }

  export type NotificationUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    read?: BoolFieldUpdateOperationsInput | boolean
    type?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutNotificationsNestedInput
  }

  export type NotificationUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    read?: BoolFieldUpdateOperationsInput | boolean
    type?: StringFieldUpdateOperationsInput | string
  }

  export type NotificationCreateManyInput = {
    id?: number
    userId: number
    title: string
    message: string
    createdAt?: Date | string
    read?: boolean
    type: string
  }

  export type NotificationUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    read?: BoolFieldUpdateOperationsInput | boolean
    type?: StringFieldUpdateOperationsInput | string
  }

  export type NotificationUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    read?: BoolFieldUpdateOperationsInput | boolean
    type?: StringFieldUpdateOperationsInput | string
  }

  export type EventCreateInput = {
    title: string
    start: Date | string
    end: Date | string
    allDay: boolean
    createdAt?: Date | string
    isArchived?: boolean
    user: UserCreateNestedOneWithoutEventsInput
  }

  export type EventUncheckedCreateInput = {
    eventId?: number
    title: string
    start: Date | string
    end: Date | string
    allDay: boolean
    createdBy: number
    createdAt?: Date | string
    isArchived?: boolean
  }

  export type EventUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    start?: DateTimeFieldUpdateOperationsInput | Date | string
    end?: DateTimeFieldUpdateOperationsInput | Date | string
    allDay?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutEventsNestedInput
  }

  export type EventUncheckedUpdateInput = {
    eventId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    start?: DateTimeFieldUpdateOperationsInput | Date | string
    end?: DateTimeFieldUpdateOperationsInput | Date | string
    allDay?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
  }

  export type EventCreateManyInput = {
    eventId?: number
    title: string
    start: Date | string
    end: Date | string
    allDay: boolean
    createdBy: number
    createdAt?: Date | string
    isArchived?: boolean
  }

  export type EventUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    start?: DateTimeFieldUpdateOperationsInput | Date | string
    end?: DateTimeFieldUpdateOperationsInput | Date | string
    allDay?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
  }

  export type EventUncheckedUpdateManyInput = {
    eventId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    start?: DateTimeFieldUpdateOperationsInput | Date | string
    end?: DateTimeFieldUpdateOperationsInput | Date | string
    allDay?: BoolFieldUpdateOperationsInput | boolean
    createdBy?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type ActivityListRelationFilter = {
    every?: ActivityWhereInput
    some?: ActivityWhereInput
    none?: ActivityWhereInput
  }

  export type ReportListRelationFilter = {
    every?: ReportWhereInput
    some?: ReportWhereInput
    none?: ReportWhereInput
  }

  export type FeedbackListRelationFilter = {
    every?: FeedbackWhereInput
    some?: FeedbackWhereInput
    none?: FeedbackWhereInput
  }

  export type NotificationListRelationFilter = {
    every?: NotificationWhereInput
    some?: NotificationWhereInput
    none?: NotificationWhereInput
  }

  export type EventListRelationFilter = {
    every?: EventWhereInput
    some?: EventWhereInput
    none?: EventWhereInput
  }

  export type SubmissionListRelationFilter = {
    every?: SubmissionWhereInput
    some?: SubmissionWhereInput
    none?: SubmissionWhereInput
  }

  export type ActivityOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ReportOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FeedbackOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NotificationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type EventOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SubmissionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    user_id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    role?: SortOrder
    sex?: SortOrder
    barangay?: SortOrder
    isArchived?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    user_id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    user_id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    role?: SortOrder
    sex?: SortOrder
    barangay?: SortOrder
    isArchived?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    user_id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    role?: SortOrder
    sex?: SortOrder
    barangay?: SortOrder
    isArchived?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    user_id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type ActivityParticipationListRelationFilter = {
    every?: ActivityParticipationWhereInput
    some?: ActivityParticipationWhereInput
    none?: ActivityParticipationWhereInput
  }

  export type BeneficiaryTypesListRelationFilter = {
    every?: BeneficiaryTypesWhereInput
    some?: BeneficiaryTypesWhereInput
    none?: BeneficiaryTypesWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ActivityParticipationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BeneficiaryTypesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BeneficiaryCountOrderByAggregateInput = {
    beneficiaryId?: SortOrder
    firstName?: SortOrder
    middleName?: SortOrder
    lastName?: SortOrder
    suffix?: SortOrder
    birthdate?: SortOrder
    age?: SortOrder
    sex?: SortOrder
    job?: SortOrder
    barangay?: SortOrder
    healthStation?: SortOrder
    ageGroup?: SortOrder
    subType?: SortOrder
    civilStatus?: SortOrder
    contactNumber?: SortOrder
    isArchived?: SortOrder
  }

  export type BeneficiaryAvgOrderByAggregateInput = {
    beneficiaryId?: SortOrder
  }

  export type BeneficiaryMaxOrderByAggregateInput = {
    beneficiaryId?: SortOrder
    firstName?: SortOrder
    middleName?: SortOrder
    lastName?: SortOrder
    suffix?: SortOrder
    birthdate?: SortOrder
    age?: SortOrder
    sex?: SortOrder
    job?: SortOrder
    barangay?: SortOrder
    healthStation?: SortOrder
    ageGroup?: SortOrder
    subType?: SortOrder
    civilStatus?: SortOrder
    contactNumber?: SortOrder
    isArchived?: SortOrder
  }

  export type BeneficiaryMinOrderByAggregateInput = {
    beneficiaryId?: SortOrder
    firstName?: SortOrder
    middleName?: SortOrder
    lastName?: SortOrder
    suffix?: SortOrder
    birthdate?: SortOrder
    age?: SortOrder
    sex?: SortOrder
    job?: SortOrder
    barangay?: SortOrder
    healthStation?: SortOrder
    ageGroup?: SortOrder
    subType?: SortOrder
    civilStatus?: SortOrder
    contactNumber?: SortOrder
    isArchived?: SortOrder
  }

  export type BeneficiarySumOrderByAggregateInput = {
    beneficiaryId?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringNullableListFilter<$PrismaModel = never> = {
    equals?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    has?: string | StringFieldRefInput<$PrismaModel> | null
    hasEvery?: string[] | ListStringFieldRefInput<$PrismaModel>
    hasSome?: string[] | ListStringFieldRefInput<$PrismaModel>
    isEmpty?: boolean
  }

  export type TypeCountOrderByAggregateInput = {
    typeId?: SortOrder
    typeName?: SortOrder
    ageGroups?: SortOrder
    sex?: SortOrder
    subTypes?: SortOrder
    isArchived?: SortOrder
  }

  export type TypeAvgOrderByAggregateInput = {
    typeId?: SortOrder
  }

  export type TypeMaxOrderByAggregateInput = {
    typeId?: SortOrder
    typeName?: SortOrder
    sex?: SortOrder
    isArchived?: SortOrder
  }

  export type TypeMinOrderByAggregateInput = {
    typeId?: SortOrder
    typeName?: SortOrder
    sex?: SortOrder
    isArchived?: SortOrder
  }

  export type TypeSumOrderByAggregateInput = {
    typeId?: SortOrder
  }

  export type BeneficiaryRelationFilter = {
    is?: BeneficiaryWhereInput
    isNot?: BeneficiaryWhereInput
  }

  export type TypeRelationFilter = {
    is?: TypeWhereInput
    isNot?: TypeWhereInput
  }

  export type BeneficiaryTypesBeneficiaryIdTypeIdCompoundUniqueInput = {
    beneficiaryId: number
    typeId: number
  }

  export type BeneficiaryTypesCountOrderByAggregateInput = {
    beneficiaryId?: SortOrder
    typeId?: SortOrder
  }

  export type BeneficiaryTypesAvgOrderByAggregateInput = {
    beneficiaryId?: SortOrder
    typeId?: SortOrder
  }

  export type BeneficiaryTypesMaxOrderByAggregateInput = {
    beneficiaryId?: SortOrder
    typeId?: SortOrder
  }

  export type BeneficiaryTypesMinOrderByAggregateInput = {
    beneficiaryId?: SortOrder
    typeId?: SortOrder
  }

  export type BeneficiaryTypesSumOrderByAggregateInput = {
    beneficiaryId?: SortOrder
    typeId?: SortOrder
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type ActivityDocumentationListRelationFilter = {
    every?: ActivityDocumentationWhereInput
    some?: ActivityDocumentationWhereInput
    none?: ActivityDocumentationWhereInput
  }

  export type ActivityDocumentationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ActivityCountOrderByAggregateInput = {
    activityId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    activityDate?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    isArchived?: SortOrder
    filename?: SortOrder
    filepath?: SortOrder
  }

  export type ActivityAvgOrderByAggregateInput = {
    activityId?: SortOrder
    createdBy?: SortOrder
  }

  export type ActivityMaxOrderByAggregateInput = {
    activityId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    activityDate?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    isArchived?: SortOrder
    filename?: SortOrder
    filepath?: SortOrder
  }

  export type ActivityMinOrderByAggregateInput = {
    activityId?: SortOrder
    title?: SortOrder
    description?: SortOrder
    activityDate?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    isArchived?: SortOrder
    filename?: SortOrder
    filepath?: SortOrder
  }

  export type ActivitySumOrderByAggregateInput = {
    activityId?: SortOrder
    createdBy?: SortOrder
  }

  export type ActivityRelationFilter = {
    is?: ActivityWhereInput
    isNot?: ActivityWhereInput
  }

  export type ActivityDocumentationCountOrderByAggregateInput = {
    documentationId?: SortOrder
    activityId?: SortOrder
    filename?: SortOrder
    filepath?: SortOrder
    uploadedAt?: SortOrder
  }

  export type ActivityDocumentationAvgOrderByAggregateInput = {
    documentationId?: SortOrder
    activityId?: SortOrder
  }

  export type ActivityDocumentationMaxOrderByAggregateInput = {
    documentationId?: SortOrder
    activityId?: SortOrder
    filename?: SortOrder
    filepath?: SortOrder
    uploadedAt?: SortOrder
  }

  export type ActivityDocumentationMinOrderByAggregateInput = {
    documentationId?: SortOrder
    activityId?: SortOrder
    filename?: SortOrder
    filepath?: SortOrder
    uploadedAt?: SortOrder
  }

  export type ActivityDocumentationSumOrderByAggregateInput = {
    documentationId?: SortOrder
    activityId?: SortOrder
  }

  export type ActivityParticipationActivityIdBeneficiaryIdCompoundUniqueInput = {
    activityId: number
    beneficiaryId: number
  }

  export type ActivityParticipationCountOrderByAggregateInput = {
    activityId?: SortOrder
    beneficiaryId?: SortOrder
    attended?: SortOrder
    beneficiaryFirstName?: SortOrder
    beneficiaryMiddleName?: SortOrder
    beneficiaryLastName?: SortOrder
    beneficiarySuffix?: SortOrder
    beneficiaryBirthdate?: SortOrder
    beneficiarySex?: SortOrder
    beneficiaryJob?: SortOrder
    beneficiaryBarangay?: SortOrder
    beneficiaryHealthStation?: SortOrder
    beneficiaryPrimaryType?: SortOrder
    beneficiaryCivilStatus?: SortOrder
    beneficiaryContactNumber?: SortOrder
    beneficiaryTypes?: SortOrder
    isArchived?: SortOrder
  }

  export type ActivityParticipationAvgOrderByAggregateInput = {
    activityId?: SortOrder
    beneficiaryId?: SortOrder
  }

  export type ActivityParticipationMaxOrderByAggregateInput = {
    activityId?: SortOrder
    beneficiaryId?: SortOrder
    attended?: SortOrder
    beneficiaryFirstName?: SortOrder
    beneficiaryMiddleName?: SortOrder
    beneficiaryLastName?: SortOrder
    beneficiarySuffix?: SortOrder
    beneficiaryBirthdate?: SortOrder
    beneficiarySex?: SortOrder
    beneficiaryJob?: SortOrder
    beneficiaryBarangay?: SortOrder
    beneficiaryHealthStation?: SortOrder
    beneficiaryPrimaryType?: SortOrder
    beneficiaryCivilStatus?: SortOrder
    beneficiaryContactNumber?: SortOrder
    beneficiaryTypes?: SortOrder
    isArchived?: SortOrder
  }

  export type ActivityParticipationMinOrderByAggregateInput = {
    activityId?: SortOrder
    beneficiaryId?: SortOrder
    attended?: SortOrder
    beneficiaryFirstName?: SortOrder
    beneficiaryMiddleName?: SortOrder
    beneficiaryLastName?: SortOrder
    beneficiarySuffix?: SortOrder
    beneficiaryBirthdate?: SortOrder
    beneficiarySex?: SortOrder
    beneficiaryJob?: SortOrder
    beneficiaryBarangay?: SortOrder
    beneficiaryHealthStation?: SortOrder
    beneficiaryPrimaryType?: SortOrder
    beneficiaryCivilStatus?: SortOrder
    beneficiaryContactNumber?: SortOrder
    beneficiaryTypes?: SortOrder
    isArchived?: SortOrder
  }

  export type ActivityParticipationSumOrderByAggregateInput = {
    activityId?: SortOrder
    beneficiaryId?: SortOrder
  }

  export type FileAttachmentListRelationFilter = {
    every?: FileAttachmentWhereInput
    some?: FileAttachmentWhereInput
    none?: FileAttachmentWhereInput
  }

  export type FileAttachmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ReportCountOrderByAggregateInput = {
    reportId?: SortOrder
    type?: SortOrder
    month?: SortOrder
    year?: SortOrder
    userId?: SortOrder
    dueDate?: SortOrder
    isArchived?: SortOrder
  }

  export type ReportAvgOrderByAggregateInput = {
    reportId?: SortOrder
    year?: SortOrder
    userId?: SortOrder
  }

  export type ReportMaxOrderByAggregateInput = {
    reportId?: SortOrder
    type?: SortOrder
    month?: SortOrder
    year?: SortOrder
    userId?: SortOrder
    dueDate?: SortOrder
    isArchived?: SortOrder
  }

  export type ReportMinOrderByAggregateInput = {
    reportId?: SortOrder
    type?: SortOrder
    month?: SortOrder
    year?: SortOrder
    userId?: SortOrder
    dueDate?: SortOrder
    isArchived?: SortOrder
  }

  export type ReportSumOrderByAggregateInput = {
    reportId?: SortOrder
    year?: SortOrder
    userId?: SortOrder
  }

  export type ReportRelationFilter = {
    is?: ReportWhereInput
    isNot?: ReportWhereInput
  }

  export type SubmissionRelationFilter = {
    is?: SubmissionWhereInput
    isNot?: SubmissionWhereInput
  }

  export type FileAttachmentCountOrderByAggregateInput = {
    fileId?: SortOrder
    reportId?: SortOrder
    submissionId?: SortOrder
    filePath?: SortOrder
    fileType?: SortOrder
    fileName?: SortOrder
  }

  export type FileAttachmentAvgOrderByAggregateInput = {
    fileId?: SortOrder
    reportId?: SortOrder
    submissionId?: SortOrder
  }

  export type FileAttachmentMaxOrderByAggregateInput = {
    fileId?: SortOrder
    reportId?: SortOrder
    submissionId?: SortOrder
    filePath?: SortOrder
    fileType?: SortOrder
    fileName?: SortOrder
  }

  export type FileAttachmentMinOrderByAggregateInput = {
    fileId?: SortOrder
    reportId?: SortOrder
    submissionId?: SortOrder
    filePath?: SortOrder
    fileType?: SortOrder
    fileName?: SortOrder
  }

  export type FileAttachmentSumOrderByAggregateInput = {
    fileId?: SortOrder
    reportId?: SortOrder
    submissionId?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type SubmissionNullableRelationFilter = {
    is?: SubmissionWhereInput | null
    isNot?: SubmissionWhereInput | null
  }

  export type FeedbackCountOrderByAggregateInput = {
    feedbackId?: SortOrder
    reportId?: SortOrder
    createdBy?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    submissionId?: SortOrder
  }

  export type FeedbackAvgOrderByAggregateInput = {
    feedbackId?: SortOrder
    reportId?: SortOrder
    createdBy?: SortOrder
    submissionId?: SortOrder
  }

  export type FeedbackMaxOrderByAggregateInput = {
    feedbackId?: SortOrder
    reportId?: SortOrder
    createdBy?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    submissionId?: SortOrder
  }

  export type FeedbackMinOrderByAggregateInput = {
    feedbackId?: SortOrder
    reportId?: SortOrder
    createdBy?: SortOrder
    content?: SortOrder
    createdAt?: SortOrder
    submissionId?: SortOrder
  }

  export type FeedbackSumOrderByAggregateInput = {
    feedbackId?: SortOrder
    reportId?: SortOrder
    createdBy?: SortOrder
    submissionId?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type SubmissionCountOrderByAggregateInput = {
    submissionId?: SortOrder
    reportId?: SortOrder
    userId?: SortOrder
    status?: SortOrder
    submissionDate?: SortOrder
  }

  export type SubmissionAvgOrderByAggregateInput = {
    submissionId?: SortOrder
    reportId?: SortOrder
    userId?: SortOrder
  }

  export type SubmissionMaxOrderByAggregateInput = {
    submissionId?: SortOrder
    reportId?: SortOrder
    userId?: SortOrder
    status?: SortOrder
    submissionDate?: SortOrder
  }

  export type SubmissionMinOrderByAggregateInput = {
    submissionId?: SortOrder
    reportId?: SortOrder
    userId?: SortOrder
    status?: SortOrder
    submissionDate?: SortOrder
  }

  export type SubmissionSumOrderByAggregateInput = {
    submissionId?: SortOrder
    reportId?: SortOrder
    userId?: SortOrder
  }

  export type NotificationCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
    read?: SortOrder
    type?: SortOrder
  }

  export type NotificationAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type NotificationMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
    read?: SortOrder
    type?: SortOrder
  }

  export type NotificationMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    title?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
    read?: SortOrder
    type?: SortOrder
  }

  export type NotificationSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type EventCountOrderByAggregateInput = {
    eventId?: SortOrder
    title?: SortOrder
    start?: SortOrder
    end?: SortOrder
    allDay?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    isArchived?: SortOrder
  }

  export type EventAvgOrderByAggregateInput = {
    eventId?: SortOrder
    createdBy?: SortOrder
  }

  export type EventMaxOrderByAggregateInput = {
    eventId?: SortOrder
    title?: SortOrder
    start?: SortOrder
    end?: SortOrder
    allDay?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    isArchived?: SortOrder
  }

  export type EventMinOrderByAggregateInput = {
    eventId?: SortOrder
    title?: SortOrder
    start?: SortOrder
    end?: SortOrder
    allDay?: SortOrder
    createdBy?: SortOrder
    createdAt?: SortOrder
    isArchived?: SortOrder
  }

  export type EventSumOrderByAggregateInput = {
    eventId?: SortOrder
    createdBy?: SortOrder
  }

  export type ActivityCreateNestedManyWithoutCreatorInput = {
    create?: XOR<ActivityCreateWithoutCreatorInput, ActivityUncheckedCreateWithoutCreatorInput> | ActivityCreateWithoutCreatorInput[] | ActivityUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: ActivityCreateOrConnectWithoutCreatorInput | ActivityCreateOrConnectWithoutCreatorInput[]
    createMany?: ActivityCreateManyCreatorInputEnvelope
    connect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
  }

  export type ReportCreateNestedManyWithoutUserInput = {
    create?: XOR<ReportCreateWithoutUserInput, ReportUncheckedCreateWithoutUserInput> | ReportCreateWithoutUserInput[] | ReportUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutUserInput | ReportCreateOrConnectWithoutUserInput[]
    createMany?: ReportCreateManyUserInputEnvelope
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
  }

  export type FeedbackCreateNestedManyWithoutUserInput = {
    create?: XOR<FeedbackCreateWithoutUserInput, FeedbackUncheckedCreateWithoutUserInput> | FeedbackCreateWithoutUserInput[] | FeedbackUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutUserInput | FeedbackCreateOrConnectWithoutUserInput[]
    createMany?: FeedbackCreateManyUserInputEnvelope
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
  }

  export type NotificationCreateNestedManyWithoutUserInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type EventCreateNestedManyWithoutUserInput = {
    create?: XOR<EventCreateWithoutUserInput, EventUncheckedCreateWithoutUserInput> | EventCreateWithoutUserInput[] | EventUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EventCreateOrConnectWithoutUserInput | EventCreateOrConnectWithoutUserInput[]
    createMany?: EventCreateManyUserInputEnvelope
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
  }

  export type SubmissionCreateNestedManyWithoutUserInput = {
    create?: XOR<SubmissionCreateWithoutUserInput, SubmissionUncheckedCreateWithoutUserInput> | SubmissionCreateWithoutUserInput[] | SubmissionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SubmissionCreateOrConnectWithoutUserInput | SubmissionCreateOrConnectWithoutUserInput[]
    createMany?: SubmissionCreateManyUserInputEnvelope
    connect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
  }

  export type ActivityUncheckedCreateNestedManyWithoutCreatorInput = {
    create?: XOR<ActivityCreateWithoutCreatorInput, ActivityUncheckedCreateWithoutCreatorInput> | ActivityCreateWithoutCreatorInput[] | ActivityUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: ActivityCreateOrConnectWithoutCreatorInput | ActivityCreateOrConnectWithoutCreatorInput[]
    createMany?: ActivityCreateManyCreatorInputEnvelope
    connect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
  }

  export type ReportUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ReportCreateWithoutUserInput, ReportUncheckedCreateWithoutUserInput> | ReportCreateWithoutUserInput[] | ReportUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutUserInput | ReportCreateOrConnectWithoutUserInput[]
    createMany?: ReportCreateManyUserInputEnvelope
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
  }

  export type FeedbackUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<FeedbackCreateWithoutUserInput, FeedbackUncheckedCreateWithoutUserInput> | FeedbackCreateWithoutUserInput[] | FeedbackUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutUserInput | FeedbackCreateOrConnectWithoutUserInput[]
    createMany?: FeedbackCreateManyUserInputEnvelope
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
  }

  export type NotificationUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type EventUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<EventCreateWithoutUserInput, EventUncheckedCreateWithoutUserInput> | EventCreateWithoutUserInput[] | EventUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EventCreateOrConnectWithoutUserInput | EventCreateOrConnectWithoutUserInput[]
    createMany?: EventCreateManyUserInputEnvelope
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
  }

  export type SubmissionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SubmissionCreateWithoutUserInput, SubmissionUncheckedCreateWithoutUserInput> | SubmissionCreateWithoutUserInput[] | SubmissionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SubmissionCreateOrConnectWithoutUserInput | SubmissionCreateOrConnectWithoutUserInput[]
    createMany?: SubmissionCreateManyUserInputEnvelope
    connect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type ActivityUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<ActivityCreateWithoutCreatorInput, ActivityUncheckedCreateWithoutCreatorInput> | ActivityCreateWithoutCreatorInput[] | ActivityUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: ActivityCreateOrConnectWithoutCreatorInput | ActivityCreateOrConnectWithoutCreatorInput[]
    upsert?: ActivityUpsertWithWhereUniqueWithoutCreatorInput | ActivityUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: ActivityCreateManyCreatorInputEnvelope
    set?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    disconnect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    delete?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    connect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    update?: ActivityUpdateWithWhereUniqueWithoutCreatorInput | ActivityUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: ActivityUpdateManyWithWhereWithoutCreatorInput | ActivityUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: ActivityScalarWhereInput | ActivityScalarWhereInput[]
  }

  export type ReportUpdateManyWithoutUserNestedInput = {
    create?: XOR<ReportCreateWithoutUserInput, ReportUncheckedCreateWithoutUserInput> | ReportCreateWithoutUserInput[] | ReportUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutUserInput | ReportCreateOrConnectWithoutUserInput[]
    upsert?: ReportUpsertWithWhereUniqueWithoutUserInput | ReportUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ReportCreateManyUserInputEnvelope
    set?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    disconnect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    delete?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    update?: ReportUpdateWithWhereUniqueWithoutUserInput | ReportUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ReportUpdateManyWithWhereWithoutUserInput | ReportUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ReportScalarWhereInput | ReportScalarWhereInput[]
  }

  export type FeedbackUpdateManyWithoutUserNestedInput = {
    create?: XOR<FeedbackCreateWithoutUserInput, FeedbackUncheckedCreateWithoutUserInput> | FeedbackCreateWithoutUserInput[] | FeedbackUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutUserInput | FeedbackCreateOrConnectWithoutUserInput[]
    upsert?: FeedbackUpsertWithWhereUniqueWithoutUserInput | FeedbackUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FeedbackCreateManyUserInputEnvelope
    set?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    disconnect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    delete?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    update?: FeedbackUpdateWithWhereUniqueWithoutUserInput | FeedbackUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FeedbackUpdateManyWithWhereWithoutUserInput | FeedbackUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FeedbackScalarWhereInput | FeedbackScalarWhereInput[]
  }

  export type NotificationUpdateManyWithoutUserNestedInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutUserInput | NotificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutUserInput | NotificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutUserInput | NotificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type EventUpdateManyWithoutUserNestedInput = {
    create?: XOR<EventCreateWithoutUserInput, EventUncheckedCreateWithoutUserInput> | EventCreateWithoutUserInput[] | EventUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EventCreateOrConnectWithoutUserInput | EventCreateOrConnectWithoutUserInput[]
    upsert?: EventUpsertWithWhereUniqueWithoutUserInput | EventUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: EventCreateManyUserInputEnvelope
    set?: EventWhereUniqueInput | EventWhereUniqueInput[]
    disconnect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    delete?: EventWhereUniqueInput | EventWhereUniqueInput[]
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    update?: EventUpdateWithWhereUniqueWithoutUserInput | EventUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: EventUpdateManyWithWhereWithoutUserInput | EventUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: EventScalarWhereInput | EventScalarWhereInput[]
  }

  export type SubmissionUpdateManyWithoutUserNestedInput = {
    create?: XOR<SubmissionCreateWithoutUserInput, SubmissionUncheckedCreateWithoutUserInput> | SubmissionCreateWithoutUserInput[] | SubmissionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SubmissionCreateOrConnectWithoutUserInput | SubmissionCreateOrConnectWithoutUserInput[]
    upsert?: SubmissionUpsertWithWhereUniqueWithoutUserInput | SubmissionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SubmissionCreateManyUserInputEnvelope
    set?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    disconnect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    delete?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    connect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    update?: SubmissionUpdateWithWhereUniqueWithoutUserInput | SubmissionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SubmissionUpdateManyWithWhereWithoutUserInput | SubmissionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SubmissionScalarWhereInput | SubmissionScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ActivityUncheckedUpdateManyWithoutCreatorNestedInput = {
    create?: XOR<ActivityCreateWithoutCreatorInput, ActivityUncheckedCreateWithoutCreatorInput> | ActivityCreateWithoutCreatorInput[] | ActivityUncheckedCreateWithoutCreatorInput[]
    connectOrCreate?: ActivityCreateOrConnectWithoutCreatorInput | ActivityCreateOrConnectWithoutCreatorInput[]
    upsert?: ActivityUpsertWithWhereUniqueWithoutCreatorInput | ActivityUpsertWithWhereUniqueWithoutCreatorInput[]
    createMany?: ActivityCreateManyCreatorInputEnvelope
    set?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    disconnect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    delete?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    connect?: ActivityWhereUniqueInput | ActivityWhereUniqueInput[]
    update?: ActivityUpdateWithWhereUniqueWithoutCreatorInput | ActivityUpdateWithWhereUniqueWithoutCreatorInput[]
    updateMany?: ActivityUpdateManyWithWhereWithoutCreatorInput | ActivityUpdateManyWithWhereWithoutCreatorInput[]
    deleteMany?: ActivityScalarWhereInput | ActivityScalarWhereInput[]
  }

  export type ReportUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ReportCreateWithoutUserInput, ReportUncheckedCreateWithoutUserInput> | ReportCreateWithoutUserInput[] | ReportUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutUserInput | ReportCreateOrConnectWithoutUserInput[]
    upsert?: ReportUpsertWithWhereUniqueWithoutUserInput | ReportUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ReportCreateManyUserInputEnvelope
    set?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    disconnect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    delete?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    update?: ReportUpdateWithWhereUniqueWithoutUserInput | ReportUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ReportUpdateManyWithWhereWithoutUserInput | ReportUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ReportScalarWhereInput | ReportScalarWhereInput[]
  }

  export type FeedbackUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<FeedbackCreateWithoutUserInput, FeedbackUncheckedCreateWithoutUserInput> | FeedbackCreateWithoutUserInput[] | FeedbackUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutUserInput | FeedbackCreateOrConnectWithoutUserInput[]
    upsert?: FeedbackUpsertWithWhereUniqueWithoutUserInput | FeedbackUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FeedbackCreateManyUserInputEnvelope
    set?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    disconnect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    delete?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    update?: FeedbackUpdateWithWhereUniqueWithoutUserInput | FeedbackUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FeedbackUpdateManyWithWhereWithoutUserInput | FeedbackUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FeedbackScalarWhereInput | FeedbackScalarWhereInput[]
  }

  export type NotificationUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutUserInput | NotificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutUserInput | NotificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutUserInput | NotificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type EventUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<EventCreateWithoutUserInput, EventUncheckedCreateWithoutUserInput> | EventCreateWithoutUserInput[] | EventUncheckedCreateWithoutUserInput[]
    connectOrCreate?: EventCreateOrConnectWithoutUserInput | EventCreateOrConnectWithoutUserInput[]
    upsert?: EventUpsertWithWhereUniqueWithoutUserInput | EventUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: EventCreateManyUserInputEnvelope
    set?: EventWhereUniqueInput | EventWhereUniqueInput[]
    disconnect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    delete?: EventWhereUniqueInput | EventWhereUniqueInput[]
    connect?: EventWhereUniqueInput | EventWhereUniqueInput[]
    update?: EventUpdateWithWhereUniqueWithoutUserInput | EventUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: EventUpdateManyWithWhereWithoutUserInput | EventUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: EventScalarWhereInput | EventScalarWhereInput[]
  }

  export type SubmissionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SubmissionCreateWithoutUserInput, SubmissionUncheckedCreateWithoutUserInput> | SubmissionCreateWithoutUserInput[] | SubmissionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SubmissionCreateOrConnectWithoutUserInput | SubmissionCreateOrConnectWithoutUserInput[]
    upsert?: SubmissionUpsertWithWhereUniqueWithoutUserInput | SubmissionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SubmissionCreateManyUserInputEnvelope
    set?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    disconnect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    delete?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    connect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    update?: SubmissionUpdateWithWhereUniqueWithoutUserInput | SubmissionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SubmissionUpdateManyWithWhereWithoutUserInput | SubmissionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SubmissionScalarWhereInput | SubmissionScalarWhereInput[]
  }

  export type ActivityParticipationCreateNestedManyWithoutBeneficiaryInput = {
    create?: XOR<ActivityParticipationCreateWithoutBeneficiaryInput, ActivityParticipationUncheckedCreateWithoutBeneficiaryInput> | ActivityParticipationCreateWithoutBeneficiaryInput[] | ActivityParticipationUncheckedCreateWithoutBeneficiaryInput[]
    connectOrCreate?: ActivityParticipationCreateOrConnectWithoutBeneficiaryInput | ActivityParticipationCreateOrConnectWithoutBeneficiaryInput[]
    createMany?: ActivityParticipationCreateManyBeneficiaryInputEnvelope
    connect?: ActivityParticipationWhereUniqueInput | ActivityParticipationWhereUniqueInput[]
  }

  export type BeneficiaryTypesCreateNestedManyWithoutBeneficiaryInput = {
    create?: XOR<BeneficiaryTypesCreateWithoutBeneficiaryInput, BeneficiaryTypesUncheckedCreateWithoutBeneficiaryInput> | BeneficiaryTypesCreateWithoutBeneficiaryInput[] | BeneficiaryTypesUncheckedCreateWithoutBeneficiaryInput[]
    connectOrCreate?: BeneficiaryTypesCreateOrConnectWithoutBeneficiaryInput | BeneficiaryTypesCreateOrConnectWithoutBeneficiaryInput[]
    createMany?: BeneficiaryTypesCreateManyBeneficiaryInputEnvelope
    connect?: BeneficiaryTypesWhereUniqueInput | BeneficiaryTypesWhereUniqueInput[]
  }

  export type ActivityParticipationUncheckedCreateNestedManyWithoutBeneficiaryInput = {
    create?: XOR<ActivityParticipationCreateWithoutBeneficiaryInput, ActivityParticipationUncheckedCreateWithoutBeneficiaryInput> | ActivityParticipationCreateWithoutBeneficiaryInput[] | ActivityParticipationUncheckedCreateWithoutBeneficiaryInput[]
    connectOrCreate?: ActivityParticipationCreateOrConnectWithoutBeneficiaryInput | ActivityParticipationCreateOrConnectWithoutBeneficiaryInput[]
    createMany?: ActivityParticipationCreateManyBeneficiaryInputEnvelope
    connect?: ActivityParticipationWhereUniqueInput | ActivityParticipationWhereUniqueInput[]
  }

  export type BeneficiaryTypesUncheckedCreateNestedManyWithoutBeneficiaryInput = {
    create?: XOR<BeneficiaryTypesCreateWithoutBeneficiaryInput, BeneficiaryTypesUncheckedCreateWithoutBeneficiaryInput> | BeneficiaryTypesCreateWithoutBeneficiaryInput[] | BeneficiaryTypesUncheckedCreateWithoutBeneficiaryInput[]
    connectOrCreate?: BeneficiaryTypesCreateOrConnectWithoutBeneficiaryInput | BeneficiaryTypesCreateOrConnectWithoutBeneficiaryInput[]
    createMany?: BeneficiaryTypesCreateManyBeneficiaryInputEnvelope
    connect?: BeneficiaryTypesWhereUniqueInput | BeneficiaryTypesWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type ActivityParticipationUpdateManyWithoutBeneficiaryNestedInput = {
    create?: XOR<ActivityParticipationCreateWithoutBeneficiaryInput, ActivityParticipationUncheckedCreateWithoutBeneficiaryInput> | ActivityParticipationCreateWithoutBeneficiaryInput[] | ActivityParticipationUncheckedCreateWithoutBeneficiaryInput[]
    connectOrCreate?: ActivityParticipationCreateOrConnectWithoutBeneficiaryInput | ActivityParticipationCreateOrConnectWithoutBeneficiaryInput[]
    upsert?: ActivityParticipationUpsertWithWhereUniqueWithoutBeneficiaryInput | ActivityParticipationUpsertWithWhereUniqueWithoutBeneficiaryInput[]
    createMany?: ActivityParticipationCreateManyBeneficiaryInputEnvelope
    set?: ActivityParticipationWhereUniqueInput | ActivityParticipationWhereUniqueInput[]
    disconnect?: ActivityParticipationWhereUniqueInput | ActivityParticipationWhereUniqueInput[]
    delete?: ActivityParticipationWhereUniqueInput | ActivityParticipationWhereUniqueInput[]
    connect?: ActivityParticipationWhereUniqueInput | ActivityParticipationWhereUniqueInput[]
    update?: ActivityParticipationUpdateWithWhereUniqueWithoutBeneficiaryInput | ActivityParticipationUpdateWithWhereUniqueWithoutBeneficiaryInput[]
    updateMany?: ActivityParticipationUpdateManyWithWhereWithoutBeneficiaryInput | ActivityParticipationUpdateManyWithWhereWithoutBeneficiaryInput[]
    deleteMany?: ActivityParticipationScalarWhereInput | ActivityParticipationScalarWhereInput[]
  }

  export type BeneficiaryTypesUpdateManyWithoutBeneficiaryNestedInput = {
    create?: XOR<BeneficiaryTypesCreateWithoutBeneficiaryInput, BeneficiaryTypesUncheckedCreateWithoutBeneficiaryInput> | BeneficiaryTypesCreateWithoutBeneficiaryInput[] | BeneficiaryTypesUncheckedCreateWithoutBeneficiaryInput[]
    connectOrCreate?: BeneficiaryTypesCreateOrConnectWithoutBeneficiaryInput | BeneficiaryTypesCreateOrConnectWithoutBeneficiaryInput[]
    upsert?: BeneficiaryTypesUpsertWithWhereUniqueWithoutBeneficiaryInput | BeneficiaryTypesUpsertWithWhereUniqueWithoutBeneficiaryInput[]
    createMany?: BeneficiaryTypesCreateManyBeneficiaryInputEnvelope
    set?: BeneficiaryTypesWhereUniqueInput | BeneficiaryTypesWhereUniqueInput[]
    disconnect?: BeneficiaryTypesWhereUniqueInput | BeneficiaryTypesWhereUniqueInput[]
    delete?: BeneficiaryTypesWhereUniqueInput | BeneficiaryTypesWhereUniqueInput[]
    connect?: BeneficiaryTypesWhereUniqueInput | BeneficiaryTypesWhereUniqueInput[]
    update?: BeneficiaryTypesUpdateWithWhereUniqueWithoutBeneficiaryInput | BeneficiaryTypesUpdateWithWhereUniqueWithoutBeneficiaryInput[]
    updateMany?: BeneficiaryTypesUpdateManyWithWhereWithoutBeneficiaryInput | BeneficiaryTypesUpdateManyWithWhereWithoutBeneficiaryInput[]
    deleteMany?: BeneficiaryTypesScalarWhereInput | BeneficiaryTypesScalarWhereInput[]
  }

  export type ActivityParticipationUncheckedUpdateManyWithoutBeneficiaryNestedInput = {
    create?: XOR<ActivityParticipationCreateWithoutBeneficiaryInput, ActivityParticipationUncheckedCreateWithoutBeneficiaryInput> | ActivityParticipationCreateWithoutBeneficiaryInput[] | ActivityParticipationUncheckedCreateWithoutBeneficiaryInput[]
    connectOrCreate?: ActivityParticipationCreateOrConnectWithoutBeneficiaryInput | ActivityParticipationCreateOrConnectWithoutBeneficiaryInput[]
    upsert?: ActivityParticipationUpsertWithWhereUniqueWithoutBeneficiaryInput | ActivityParticipationUpsertWithWhereUniqueWithoutBeneficiaryInput[]
    createMany?: ActivityParticipationCreateManyBeneficiaryInputEnvelope
    set?: ActivityParticipationWhereUniqueInput | ActivityParticipationWhereUniqueInput[]
    disconnect?: ActivityParticipationWhereUniqueInput | ActivityParticipationWhereUniqueInput[]
    delete?: ActivityParticipationWhereUniqueInput | ActivityParticipationWhereUniqueInput[]
    connect?: ActivityParticipationWhereUniqueInput | ActivityParticipationWhereUniqueInput[]
    update?: ActivityParticipationUpdateWithWhereUniqueWithoutBeneficiaryInput | ActivityParticipationUpdateWithWhereUniqueWithoutBeneficiaryInput[]
    updateMany?: ActivityParticipationUpdateManyWithWhereWithoutBeneficiaryInput | ActivityParticipationUpdateManyWithWhereWithoutBeneficiaryInput[]
    deleteMany?: ActivityParticipationScalarWhereInput | ActivityParticipationScalarWhereInput[]
  }

  export type BeneficiaryTypesUncheckedUpdateManyWithoutBeneficiaryNestedInput = {
    create?: XOR<BeneficiaryTypesCreateWithoutBeneficiaryInput, BeneficiaryTypesUncheckedCreateWithoutBeneficiaryInput> | BeneficiaryTypesCreateWithoutBeneficiaryInput[] | BeneficiaryTypesUncheckedCreateWithoutBeneficiaryInput[]
    connectOrCreate?: BeneficiaryTypesCreateOrConnectWithoutBeneficiaryInput | BeneficiaryTypesCreateOrConnectWithoutBeneficiaryInput[]
    upsert?: BeneficiaryTypesUpsertWithWhereUniqueWithoutBeneficiaryInput | BeneficiaryTypesUpsertWithWhereUniqueWithoutBeneficiaryInput[]
    createMany?: BeneficiaryTypesCreateManyBeneficiaryInputEnvelope
    set?: BeneficiaryTypesWhereUniqueInput | BeneficiaryTypesWhereUniqueInput[]
    disconnect?: BeneficiaryTypesWhereUniqueInput | BeneficiaryTypesWhereUniqueInput[]
    delete?: BeneficiaryTypesWhereUniqueInput | BeneficiaryTypesWhereUniqueInput[]
    connect?: BeneficiaryTypesWhereUniqueInput | BeneficiaryTypesWhereUniqueInput[]
    update?: BeneficiaryTypesUpdateWithWhereUniqueWithoutBeneficiaryInput | BeneficiaryTypesUpdateWithWhereUniqueWithoutBeneficiaryInput[]
    updateMany?: BeneficiaryTypesUpdateManyWithWhereWithoutBeneficiaryInput | BeneficiaryTypesUpdateManyWithWhereWithoutBeneficiaryInput[]
    deleteMany?: BeneficiaryTypesScalarWhereInput | BeneficiaryTypesScalarWhereInput[]
  }

  export type TypeCreateageGroupsInput = {
    set: string[]
  }

  export type TypeCreatesubTypesInput = {
    set: string[]
  }

  export type BeneficiaryTypesCreateNestedManyWithoutTypeInput = {
    create?: XOR<BeneficiaryTypesCreateWithoutTypeInput, BeneficiaryTypesUncheckedCreateWithoutTypeInput> | BeneficiaryTypesCreateWithoutTypeInput[] | BeneficiaryTypesUncheckedCreateWithoutTypeInput[]
    connectOrCreate?: BeneficiaryTypesCreateOrConnectWithoutTypeInput | BeneficiaryTypesCreateOrConnectWithoutTypeInput[]
    createMany?: BeneficiaryTypesCreateManyTypeInputEnvelope
    connect?: BeneficiaryTypesWhereUniqueInput | BeneficiaryTypesWhereUniqueInput[]
  }

  export type BeneficiaryTypesUncheckedCreateNestedManyWithoutTypeInput = {
    create?: XOR<BeneficiaryTypesCreateWithoutTypeInput, BeneficiaryTypesUncheckedCreateWithoutTypeInput> | BeneficiaryTypesCreateWithoutTypeInput[] | BeneficiaryTypesUncheckedCreateWithoutTypeInput[]
    connectOrCreate?: BeneficiaryTypesCreateOrConnectWithoutTypeInput | BeneficiaryTypesCreateOrConnectWithoutTypeInput[]
    createMany?: BeneficiaryTypesCreateManyTypeInputEnvelope
    connect?: BeneficiaryTypesWhereUniqueInput | BeneficiaryTypesWhereUniqueInput[]
  }

  export type TypeUpdateageGroupsInput = {
    set?: string[]
    push?: string | string[]
  }

  export type TypeUpdatesubTypesInput = {
    set?: string[]
    push?: string | string[]
  }

  export type BeneficiaryTypesUpdateManyWithoutTypeNestedInput = {
    create?: XOR<BeneficiaryTypesCreateWithoutTypeInput, BeneficiaryTypesUncheckedCreateWithoutTypeInput> | BeneficiaryTypesCreateWithoutTypeInput[] | BeneficiaryTypesUncheckedCreateWithoutTypeInput[]
    connectOrCreate?: BeneficiaryTypesCreateOrConnectWithoutTypeInput | BeneficiaryTypesCreateOrConnectWithoutTypeInput[]
    upsert?: BeneficiaryTypesUpsertWithWhereUniqueWithoutTypeInput | BeneficiaryTypesUpsertWithWhereUniqueWithoutTypeInput[]
    createMany?: BeneficiaryTypesCreateManyTypeInputEnvelope
    set?: BeneficiaryTypesWhereUniqueInput | BeneficiaryTypesWhereUniqueInput[]
    disconnect?: BeneficiaryTypesWhereUniqueInput | BeneficiaryTypesWhereUniqueInput[]
    delete?: BeneficiaryTypesWhereUniqueInput | BeneficiaryTypesWhereUniqueInput[]
    connect?: BeneficiaryTypesWhereUniqueInput | BeneficiaryTypesWhereUniqueInput[]
    update?: BeneficiaryTypesUpdateWithWhereUniqueWithoutTypeInput | BeneficiaryTypesUpdateWithWhereUniqueWithoutTypeInput[]
    updateMany?: BeneficiaryTypesUpdateManyWithWhereWithoutTypeInput | BeneficiaryTypesUpdateManyWithWhereWithoutTypeInput[]
    deleteMany?: BeneficiaryTypesScalarWhereInput | BeneficiaryTypesScalarWhereInput[]
  }

  export type BeneficiaryTypesUncheckedUpdateManyWithoutTypeNestedInput = {
    create?: XOR<BeneficiaryTypesCreateWithoutTypeInput, BeneficiaryTypesUncheckedCreateWithoutTypeInput> | BeneficiaryTypesCreateWithoutTypeInput[] | BeneficiaryTypesUncheckedCreateWithoutTypeInput[]
    connectOrCreate?: BeneficiaryTypesCreateOrConnectWithoutTypeInput | BeneficiaryTypesCreateOrConnectWithoutTypeInput[]
    upsert?: BeneficiaryTypesUpsertWithWhereUniqueWithoutTypeInput | BeneficiaryTypesUpsertWithWhereUniqueWithoutTypeInput[]
    createMany?: BeneficiaryTypesCreateManyTypeInputEnvelope
    set?: BeneficiaryTypesWhereUniqueInput | BeneficiaryTypesWhereUniqueInput[]
    disconnect?: BeneficiaryTypesWhereUniqueInput | BeneficiaryTypesWhereUniqueInput[]
    delete?: BeneficiaryTypesWhereUniqueInput | BeneficiaryTypesWhereUniqueInput[]
    connect?: BeneficiaryTypesWhereUniqueInput | BeneficiaryTypesWhereUniqueInput[]
    update?: BeneficiaryTypesUpdateWithWhereUniqueWithoutTypeInput | BeneficiaryTypesUpdateWithWhereUniqueWithoutTypeInput[]
    updateMany?: BeneficiaryTypesUpdateManyWithWhereWithoutTypeInput | BeneficiaryTypesUpdateManyWithWhereWithoutTypeInput[]
    deleteMany?: BeneficiaryTypesScalarWhereInput | BeneficiaryTypesScalarWhereInput[]
  }

  export type BeneficiaryCreateNestedOneWithoutBeneficiaryTypesInput = {
    create?: XOR<BeneficiaryCreateWithoutBeneficiaryTypesInput, BeneficiaryUncheckedCreateWithoutBeneficiaryTypesInput>
    connectOrCreate?: BeneficiaryCreateOrConnectWithoutBeneficiaryTypesInput
    connect?: BeneficiaryWhereUniqueInput
  }

  export type TypeCreateNestedOneWithoutBeneficiaryTypesInput = {
    create?: XOR<TypeCreateWithoutBeneficiaryTypesInput, TypeUncheckedCreateWithoutBeneficiaryTypesInput>
    connectOrCreate?: TypeCreateOrConnectWithoutBeneficiaryTypesInput
    connect?: TypeWhereUniqueInput
  }

  export type BeneficiaryUpdateOneRequiredWithoutBeneficiaryTypesNestedInput = {
    create?: XOR<BeneficiaryCreateWithoutBeneficiaryTypesInput, BeneficiaryUncheckedCreateWithoutBeneficiaryTypesInput>
    connectOrCreate?: BeneficiaryCreateOrConnectWithoutBeneficiaryTypesInput
    upsert?: BeneficiaryUpsertWithoutBeneficiaryTypesInput
    connect?: BeneficiaryWhereUniqueInput
    update?: XOR<XOR<BeneficiaryUpdateToOneWithWhereWithoutBeneficiaryTypesInput, BeneficiaryUpdateWithoutBeneficiaryTypesInput>, BeneficiaryUncheckedUpdateWithoutBeneficiaryTypesInput>
  }

  export type TypeUpdateOneRequiredWithoutBeneficiaryTypesNestedInput = {
    create?: XOR<TypeCreateWithoutBeneficiaryTypesInput, TypeUncheckedCreateWithoutBeneficiaryTypesInput>
    connectOrCreate?: TypeCreateOrConnectWithoutBeneficiaryTypesInput
    upsert?: TypeUpsertWithoutBeneficiaryTypesInput
    connect?: TypeWhereUniqueInput
    update?: XOR<XOR<TypeUpdateToOneWithWhereWithoutBeneficiaryTypesInput, TypeUpdateWithoutBeneficiaryTypesInput>, TypeUncheckedUpdateWithoutBeneficiaryTypesInput>
  }

  export type UserCreateNestedOneWithoutActivitiesCreatedInput = {
    create?: XOR<UserCreateWithoutActivitiesCreatedInput, UserUncheckedCreateWithoutActivitiesCreatedInput>
    connectOrCreate?: UserCreateOrConnectWithoutActivitiesCreatedInput
    connect?: UserWhereUniqueInput
  }

  export type ActivityParticipationCreateNestedManyWithoutActivityInput = {
    create?: XOR<ActivityParticipationCreateWithoutActivityInput, ActivityParticipationUncheckedCreateWithoutActivityInput> | ActivityParticipationCreateWithoutActivityInput[] | ActivityParticipationUncheckedCreateWithoutActivityInput[]
    connectOrCreate?: ActivityParticipationCreateOrConnectWithoutActivityInput | ActivityParticipationCreateOrConnectWithoutActivityInput[]
    createMany?: ActivityParticipationCreateManyActivityInputEnvelope
    connect?: ActivityParticipationWhereUniqueInput | ActivityParticipationWhereUniqueInput[]
  }

  export type ActivityDocumentationCreateNestedManyWithoutActivityInput = {
    create?: XOR<ActivityDocumentationCreateWithoutActivityInput, ActivityDocumentationUncheckedCreateWithoutActivityInput> | ActivityDocumentationCreateWithoutActivityInput[] | ActivityDocumentationUncheckedCreateWithoutActivityInput[]
    connectOrCreate?: ActivityDocumentationCreateOrConnectWithoutActivityInput | ActivityDocumentationCreateOrConnectWithoutActivityInput[]
    createMany?: ActivityDocumentationCreateManyActivityInputEnvelope
    connect?: ActivityDocumentationWhereUniqueInput | ActivityDocumentationWhereUniqueInput[]
  }

  export type ActivityParticipationUncheckedCreateNestedManyWithoutActivityInput = {
    create?: XOR<ActivityParticipationCreateWithoutActivityInput, ActivityParticipationUncheckedCreateWithoutActivityInput> | ActivityParticipationCreateWithoutActivityInput[] | ActivityParticipationUncheckedCreateWithoutActivityInput[]
    connectOrCreate?: ActivityParticipationCreateOrConnectWithoutActivityInput | ActivityParticipationCreateOrConnectWithoutActivityInput[]
    createMany?: ActivityParticipationCreateManyActivityInputEnvelope
    connect?: ActivityParticipationWhereUniqueInput | ActivityParticipationWhereUniqueInput[]
  }

  export type ActivityDocumentationUncheckedCreateNestedManyWithoutActivityInput = {
    create?: XOR<ActivityDocumentationCreateWithoutActivityInput, ActivityDocumentationUncheckedCreateWithoutActivityInput> | ActivityDocumentationCreateWithoutActivityInput[] | ActivityDocumentationUncheckedCreateWithoutActivityInput[]
    connectOrCreate?: ActivityDocumentationCreateOrConnectWithoutActivityInput | ActivityDocumentationCreateOrConnectWithoutActivityInput[]
    createMany?: ActivityDocumentationCreateManyActivityInputEnvelope
    connect?: ActivityDocumentationWhereUniqueInput | ActivityDocumentationWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutActivitiesCreatedNestedInput = {
    create?: XOR<UserCreateWithoutActivitiesCreatedInput, UserUncheckedCreateWithoutActivitiesCreatedInput>
    connectOrCreate?: UserCreateOrConnectWithoutActivitiesCreatedInput
    upsert?: UserUpsertWithoutActivitiesCreatedInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutActivitiesCreatedInput, UserUpdateWithoutActivitiesCreatedInput>, UserUncheckedUpdateWithoutActivitiesCreatedInput>
  }

  export type ActivityParticipationUpdateManyWithoutActivityNestedInput = {
    create?: XOR<ActivityParticipationCreateWithoutActivityInput, ActivityParticipationUncheckedCreateWithoutActivityInput> | ActivityParticipationCreateWithoutActivityInput[] | ActivityParticipationUncheckedCreateWithoutActivityInput[]
    connectOrCreate?: ActivityParticipationCreateOrConnectWithoutActivityInput | ActivityParticipationCreateOrConnectWithoutActivityInput[]
    upsert?: ActivityParticipationUpsertWithWhereUniqueWithoutActivityInput | ActivityParticipationUpsertWithWhereUniqueWithoutActivityInput[]
    createMany?: ActivityParticipationCreateManyActivityInputEnvelope
    set?: ActivityParticipationWhereUniqueInput | ActivityParticipationWhereUniqueInput[]
    disconnect?: ActivityParticipationWhereUniqueInput | ActivityParticipationWhereUniqueInput[]
    delete?: ActivityParticipationWhereUniqueInput | ActivityParticipationWhereUniqueInput[]
    connect?: ActivityParticipationWhereUniqueInput | ActivityParticipationWhereUniqueInput[]
    update?: ActivityParticipationUpdateWithWhereUniqueWithoutActivityInput | ActivityParticipationUpdateWithWhereUniqueWithoutActivityInput[]
    updateMany?: ActivityParticipationUpdateManyWithWhereWithoutActivityInput | ActivityParticipationUpdateManyWithWhereWithoutActivityInput[]
    deleteMany?: ActivityParticipationScalarWhereInput | ActivityParticipationScalarWhereInput[]
  }

  export type ActivityDocumentationUpdateManyWithoutActivityNestedInput = {
    create?: XOR<ActivityDocumentationCreateWithoutActivityInput, ActivityDocumentationUncheckedCreateWithoutActivityInput> | ActivityDocumentationCreateWithoutActivityInput[] | ActivityDocumentationUncheckedCreateWithoutActivityInput[]
    connectOrCreate?: ActivityDocumentationCreateOrConnectWithoutActivityInput | ActivityDocumentationCreateOrConnectWithoutActivityInput[]
    upsert?: ActivityDocumentationUpsertWithWhereUniqueWithoutActivityInput | ActivityDocumentationUpsertWithWhereUniqueWithoutActivityInput[]
    createMany?: ActivityDocumentationCreateManyActivityInputEnvelope
    set?: ActivityDocumentationWhereUniqueInput | ActivityDocumentationWhereUniqueInput[]
    disconnect?: ActivityDocumentationWhereUniqueInput | ActivityDocumentationWhereUniqueInput[]
    delete?: ActivityDocumentationWhereUniqueInput | ActivityDocumentationWhereUniqueInput[]
    connect?: ActivityDocumentationWhereUniqueInput | ActivityDocumentationWhereUniqueInput[]
    update?: ActivityDocumentationUpdateWithWhereUniqueWithoutActivityInput | ActivityDocumentationUpdateWithWhereUniqueWithoutActivityInput[]
    updateMany?: ActivityDocumentationUpdateManyWithWhereWithoutActivityInput | ActivityDocumentationUpdateManyWithWhereWithoutActivityInput[]
    deleteMany?: ActivityDocumentationScalarWhereInput | ActivityDocumentationScalarWhereInput[]
  }

  export type ActivityParticipationUncheckedUpdateManyWithoutActivityNestedInput = {
    create?: XOR<ActivityParticipationCreateWithoutActivityInput, ActivityParticipationUncheckedCreateWithoutActivityInput> | ActivityParticipationCreateWithoutActivityInput[] | ActivityParticipationUncheckedCreateWithoutActivityInput[]
    connectOrCreate?: ActivityParticipationCreateOrConnectWithoutActivityInput | ActivityParticipationCreateOrConnectWithoutActivityInput[]
    upsert?: ActivityParticipationUpsertWithWhereUniqueWithoutActivityInput | ActivityParticipationUpsertWithWhereUniqueWithoutActivityInput[]
    createMany?: ActivityParticipationCreateManyActivityInputEnvelope
    set?: ActivityParticipationWhereUniqueInput | ActivityParticipationWhereUniqueInput[]
    disconnect?: ActivityParticipationWhereUniqueInput | ActivityParticipationWhereUniqueInput[]
    delete?: ActivityParticipationWhereUniqueInput | ActivityParticipationWhereUniqueInput[]
    connect?: ActivityParticipationWhereUniqueInput | ActivityParticipationWhereUniqueInput[]
    update?: ActivityParticipationUpdateWithWhereUniqueWithoutActivityInput | ActivityParticipationUpdateWithWhereUniqueWithoutActivityInput[]
    updateMany?: ActivityParticipationUpdateManyWithWhereWithoutActivityInput | ActivityParticipationUpdateManyWithWhereWithoutActivityInput[]
    deleteMany?: ActivityParticipationScalarWhereInput | ActivityParticipationScalarWhereInput[]
  }

  export type ActivityDocumentationUncheckedUpdateManyWithoutActivityNestedInput = {
    create?: XOR<ActivityDocumentationCreateWithoutActivityInput, ActivityDocumentationUncheckedCreateWithoutActivityInput> | ActivityDocumentationCreateWithoutActivityInput[] | ActivityDocumentationUncheckedCreateWithoutActivityInput[]
    connectOrCreate?: ActivityDocumentationCreateOrConnectWithoutActivityInput | ActivityDocumentationCreateOrConnectWithoutActivityInput[]
    upsert?: ActivityDocumentationUpsertWithWhereUniqueWithoutActivityInput | ActivityDocumentationUpsertWithWhereUniqueWithoutActivityInput[]
    createMany?: ActivityDocumentationCreateManyActivityInputEnvelope
    set?: ActivityDocumentationWhereUniqueInput | ActivityDocumentationWhereUniqueInput[]
    disconnect?: ActivityDocumentationWhereUniqueInput | ActivityDocumentationWhereUniqueInput[]
    delete?: ActivityDocumentationWhereUniqueInput | ActivityDocumentationWhereUniqueInput[]
    connect?: ActivityDocumentationWhereUniqueInput | ActivityDocumentationWhereUniqueInput[]
    update?: ActivityDocumentationUpdateWithWhereUniqueWithoutActivityInput | ActivityDocumentationUpdateWithWhereUniqueWithoutActivityInput[]
    updateMany?: ActivityDocumentationUpdateManyWithWhereWithoutActivityInput | ActivityDocumentationUpdateManyWithWhereWithoutActivityInput[]
    deleteMany?: ActivityDocumentationScalarWhereInput | ActivityDocumentationScalarWhereInput[]
  }

  export type ActivityCreateNestedOneWithoutDocumentationsInput = {
    create?: XOR<ActivityCreateWithoutDocumentationsInput, ActivityUncheckedCreateWithoutDocumentationsInput>
    connectOrCreate?: ActivityCreateOrConnectWithoutDocumentationsInput
    connect?: ActivityWhereUniqueInput
  }

  export type ActivityUpdateOneRequiredWithoutDocumentationsNestedInput = {
    create?: XOR<ActivityCreateWithoutDocumentationsInput, ActivityUncheckedCreateWithoutDocumentationsInput>
    connectOrCreate?: ActivityCreateOrConnectWithoutDocumentationsInput
    upsert?: ActivityUpsertWithoutDocumentationsInput
    connect?: ActivityWhereUniqueInput
    update?: XOR<XOR<ActivityUpdateToOneWithWhereWithoutDocumentationsInput, ActivityUpdateWithoutDocumentationsInput>, ActivityUncheckedUpdateWithoutDocumentationsInput>
  }

  export type ActivityCreateNestedOneWithoutParticipantsInput = {
    create?: XOR<ActivityCreateWithoutParticipantsInput, ActivityUncheckedCreateWithoutParticipantsInput>
    connectOrCreate?: ActivityCreateOrConnectWithoutParticipantsInput
    connect?: ActivityWhereUniqueInput
  }

  export type BeneficiaryCreateNestedOneWithoutActivityParticipationInput = {
    create?: XOR<BeneficiaryCreateWithoutActivityParticipationInput, BeneficiaryUncheckedCreateWithoutActivityParticipationInput>
    connectOrCreate?: BeneficiaryCreateOrConnectWithoutActivityParticipationInput
    connect?: BeneficiaryWhereUniqueInput
  }

  export type ActivityUpdateOneRequiredWithoutParticipantsNestedInput = {
    create?: XOR<ActivityCreateWithoutParticipantsInput, ActivityUncheckedCreateWithoutParticipantsInput>
    connectOrCreate?: ActivityCreateOrConnectWithoutParticipantsInput
    upsert?: ActivityUpsertWithoutParticipantsInput
    connect?: ActivityWhereUniqueInput
    update?: XOR<XOR<ActivityUpdateToOneWithWhereWithoutParticipantsInput, ActivityUpdateWithoutParticipantsInput>, ActivityUncheckedUpdateWithoutParticipantsInput>
  }

  export type BeneficiaryUpdateOneRequiredWithoutActivityParticipationNestedInput = {
    create?: XOR<BeneficiaryCreateWithoutActivityParticipationInput, BeneficiaryUncheckedCreateWithoutActivityParticipationInput>
    connectOrCreate?: BeneficiaryCreateOrConnectWithoutActivityParticipationInput
    upsert?: BeneficiaryUpsertWithoutActivityParticipationInput
    connect?: BeneficiaryWhereUniqueInput
    update?: XOR<XOR<BeneficiaryUpdateToOneWithWhereWithoutActivityParticipationInput, BeneficiaryUpdateWithoutActivityParticipationInput>, BeneficiaryUncheckedUpdateWithoutActivityParticipationInput>
  }

  export type FileAttachmentCreateNestedManyWithoutReportInput = {
    create?: XOR<FileAttachmentCreateWithoutReportInput, FileAttachmentUncheckedCreateWithoutReportInput> | FileAttachmentCreateWithoutReportInput[] | FileAttachmentUncheckedCreateWithoutReportInput[]
    connectOrCreate?: FileAttachmentCreateOrConnectWithoutReportInput | FileAttachmentCreateOrConnectWithoutReportInput[]
    createMany?: FileAttachmentCreateManyReportInputEnvelope
    connect?: FileAttachmentWhereUniqueInput | FileAttachmentWhereUniqueInput[]
  }

  export type FeedbackCreateNestedManyWithoutReportInput = {
    create?: XOR<FeedbackCreateWithoutReportInput, FeedbackUncheckedCreateWithoutReportInput> | FeedbackCreateWithoutReportInput[] | FeedbackUncheckedCreateWithoutReportInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutReportInput | FeedbackCreateOrConnectWithoutReportInput[]
    createMany?: FeedbackCreateManyReportInputEnvelope
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
  }

  export type SubmissionCreateNestedManyWithoutReportInput = {
    create?: XOR<SubmissionCreateWithoutReportInput, SubmissionUncheckedCreateWithoutReportInput> | SubmissionCreateWithoutReportInput[] | SubmissionUncheckedCreateWithoutReportInput[]
    connectOrCreate?: SubmissionCreateOrConnectWithoutReportInput | SubmissionCreateOrConnectWithoutReportInput[]
    createMany?: SubmissionCreateManyReportInputEnvelope
    connect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutReportsInput = {
    create?: XOR<UserCreateWithoutReportsInput, UserUncheckedCreateWithoutReportsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReportsInput
    connect?: UserWhereUniqueInput
  }

  export type FileAttachmentUncheckedCreateNestedManyWithoutReportInput = {
    create?: XOR<FileAttachmentCreateWithoutReportInput, FileAttachmentUncheckedCreateWithoutReportInput> | FileAttachmentCreateWithoutReportInput[] | FileAttachmentUncheckedCreateWithoutReportInput[]
    connectOrCreate?: FileAttachmentCreateOrConnectWithoutReportInput | FileAttachmentCreateOrConnectWithoutReportInput[]
    createMany?: FileAttachmentCreateManyReportInputEnvelope
    connect?: FileAttachmentWhereUniqueInput | FileAttachmentWhereUniqueInput[]
  }

  export type FeedbackUncheckedCreateNestedManyWithoutReportInput = {
    create?: XOR<FeedbackCreateWithoutReportInput, FeedbackUncheckedCreateWithoutReportInput> | FeedbackCreateWithoutReportInput[] | FeedbackUncheckedCreateWithoutReportInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutReportInput | FeedbackCreateOrConnectWithoutReportInput[]
    createMany?: FeedbackCreateManyReportInputEnvelope
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
  }

  export type SubmissionUncheckedCreateNestedManyWithoutReportInput = {
    create?: XOR<SubmissionCreateWithoutReportInput, SubmissionUncheckedCreateWithoutReportInput> | SubmissionCreateWithoutReportInput[] | SubmissionUncheckedCreateWithoutReportInput[]
    connectOrCreate?: SubmissionCreateOrConnectWithoutReportInput | SubmissionCreateOrConnectWithoutReportInput[]
    createMany?: SubmissionCreateManyReportInputEnvelope
    connect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
  }

  export type FileAttachmentUpdateManyWithoutReportNestedInput = {
    create?: XOR<FileAttachmentCreateWithoutReportInput, FileAttachmentUncheckedCreateWithoutReportInput> | FileAttachmentCreateWithoutReportInput[] | FileAttachmentUncheckedCreateWithoutReportInput[]
    connectOrCreate?: FileAttachmentCreateOrConnectWithoutReportInput | FileAttachmentCreateOrConnectWithoutReportInput[]
    upsert?: FileAttachmentUpsertWithWhereUniqueWithoutReportInput | FileAttachmentUpsertWithWhereUniqueWithoutReportInput[]
    createMany?: FileAttachmentCreateManyReportInputEnvelope
    set?: FileAttachmentWhereUniqueInput | FileAttachmentWhereUniqueInput[]
    disconnect?: FileAttachmentWhereUniqueInput | FileAttachmentWhereUniqueInput[]
    delete?: FileAttachmentWhereUniqueInput | FileAttachmentWhereUniqueInput[]
    connect?: FileAttachmentWhereUniqueInput | FileAttachmentWhereUniqueInput[]
    update?: FileAttachmentUpdateWithWhereUniqueWithoutReportInput | FileAttachmentUpdateWithWhereUniqueWithoutReportInput[]
    updateMany?: FileAttachmentUpdateManyWithWhereWithoutReportInput | FileAttachmentUpdateManyWithWhereWithoutReportInput[]
    deleteMany?: FileAttachmentScalarWhereInput | FileAttachmentScalarWhereInput[]
  }

  export type FeedbackUpdateManyWithoutReportNestedInput = {
    create?: XOR<FeedbackCreateWithoutReportInput, FeedbackUncheckedCreateWithoutReportInput> | FeedbackCreateWithoutReportInput[] | FeedbackUncheckedCreateWithoutReportInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutReportInput | FeedbackCreateOrConnectWithoutReportInput[]
    upsert?: FeedbackUpsertWithWhereUniqueWithoutReportInput | FeedbackUpsertWithWhereUniqueWithoutReportInput[]
    createMany?: FeedbackCreateManyReportInputEnvelope
    set?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    disconnect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    delete?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    update?: FeedbackUpdateWithWhereUniqueWithoutReportInput | FeedbackUpdateWithWhereUniqueWithoutReportInput[]
    updateMany?: FeedbackUpdateManyWithWhereWithoutReportInput | FeedbackUpdateManyWithWhereWithoutReportInput[]
    deleteMany?: FeedbackScalarWhereInput | FeedbackScalarWhereInput[]
  }

  export type SubmissionUpdateManyWithoutReportNestedInput = {
    create?: XOR<SubmissionCreateWithoutReportInput, SubmissionUncheckedCreateWithoutReportInput> | SubmissionCreateWithoutReportInput[] | SubmissionUncheckedCreateWithoutReportInput[]
    connectOrCreate?: SubmissionCreateOrConnectWithoutReportInput | SubmissionCreateOrConnectWithoutReportInput[]
    upsert?: SubmissionUpsertWithWhereUniqueWithoutReportInput | SubmissionUpsertWithWhereUniqueWithoutReportInput[]
    createMany?: SubmissionCreateManyReportInputEnvelope
    set?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    disconnect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    delete?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    connect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    update?: SubmissionUpdateWithWhereUniqueWithoutReportInput | SubmissionUpdateWithWhereUniqueWithoutReportInput[]
    updateMany?: SubmissionUpdateManyWithWhereWithoutReportInput | SubmissionUpdateManyWithWhereWithoutReportInput[]
    deleteMany?: SubmissionScalarWhereInput | SubmissionScalarWhereInput[]
  }

  export type UserUpdateOneRequiredWithoutReportsNestedInput = {
    create?: XOR<UserCreateWithoutReportsInput, UserUncheckedCreateWithoutReportsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReportsInput
    upsert?: UserUpsertWithoutReportsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutReportsInput, UserUpdateWithoutReportsInput>, UserUncheckedUpdateWithoutReportsInput>
  }

  export type FileAttachmentUncheckedUpdateManyWithoutReportNestedInput = {
    create?: XOR<FileAttachmentCreateWithoutReportInput, FileAttachmentUncheckedCreateWithoutReportInput> | FileAttachmentCreateWithoutReportInput[] | FileAttachmentUncheckedCreateWithoutReportInput[]
    connectOrCreate?: FileAttachmentCreateOrConnectWithoutReportInput | FileAttachmentCreateOrConnectWithoutReportInput[]
    upsert?: FileAttachmentUpsertWithWhereUniqueWithoutReportInput | FileAttachmentUpsertWithWhereUniqueWithoutReportInput[]
    createMany?: FileAttachmentCreateManyReportInputEnvelope
    set?: FileAttachmentWhereUniqueInput | FileAttachmentWhereUniqueInput[]
    disconnect?: FileAttachmentWhereUniqueInput | FileAttachmentWhereUniqueInput[]
    delete?: FileAttachmentWhereUniqueInput | FileAttachmentWhereUniqueInput[]
    connect?: FileAttachmentWhereUniqueInput | FileAttachmentWhereUniqueInput[]
    update?: FileAttachmentUpdateWithWhereUniqueWithoutReportInput | FileAttachmentUpdateWithWhereUniqueWithoutReportInput[]
    updateMany?: FileAttachmentUpdateManyWithWhereWithoutReportInput | FileAttachmentUpdateManyWithWhereWithoutReportInput[]
    deleteMany?: FileAttachmentScalarWhereInput | FileAttachmentScalarWhereInput[]
  }

  export type FeedbackUncheckedUpdateManyWithoutReportNestedInput = {
    create?: XOR<FeedbackCreateWithoutReportInput, FeedbackUncheckedCreateWithoutReportInput> | FeedbackCreateWithoutReportInput[] | FeedbackUncheckedCreateWithoutReportInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutReportInput | FeedbackCreateOrConnectWithoutReportInput[]
    upsert?: FeedbackUpsertWithWhereUniqueWithoutReportInput | FeedbackUpsertWithWhereUniqueWithoutReportInput[]
    createMany?: FeedbackCreateManyReportInputEnvelope
    set?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    disconnect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    delete?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    update?: FeedbackUpdateWithWhereUniqueWithoutReportInput | FeedbackUpdateWithWhereUniqueWithoutReportInput[]
    updateMany?: FeedbackUpdateManyWithWhereWithoutReportInput | FeedbackUpdateManyWithWhereWithoutReportInput[]
    deleteMany?: FeedbackScalarWhereInput | FeedbackScalarWhereInput[]
  }

  export type SubmissionUncheckedUpdateManyWithoutReportNestedInput = {
    create?: XOR<SubmissionCreateWithoutReportInput, SubmissionUncheckedCreateWithoutReportInput> | SubmissionCreateWithoutReportInput[] | SubmissionUncheckedCreateWithoutReportInput[]
    connectOrCreate?: SubmissionCreateOrConnectWithoutReportInput | SubmissionCreateOrConnectWithoutReportInput[]
    upsert?: SubmissionUpsertWithWhereUniqueWithoutReportInput | SubmissionUpsertWithWhereUniqueWithoutReportInput[]
    createMany?: SubmissionCreateManyReportInputEnvelope
    set?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    disconnect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    delete?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    connect?: SubmissionWhereUniqueInput | SubmissionWhereUniqueInput[]
    update?: SubmissionUpdateWithWhereUniqueWithoutReportInput | SubmissionUpdateWithWhereUniqueWithoutReportInput[]
    updateMany?: SubmissionUpdateManyWithWhereWithoutReportInput | SubmissionUpdateManyWithWhereWithoutReportInput[]
    deleteMany?: SubmissionScalarWhereInput | SubmissionScalarWhereInput[]
  }

  export type ReportCreateNestedOneWithoutFilesInput = {
    create?: XOR<ReportCreateWithoutFilesInput, ReportUncheckedCreateWithoutFilesInput>
    connectOrCreate?: ReportCreateOrConnectWithoutFilesInput
    connect?: ReportWhereUniqueInput
  }

  export type SubmissionCreateNestedOneWithoutFilesInput = {
    create?: XOR<SubmissionCreateWithoutFilesInput, SubmissionUncheckedCreateWithoutFilesInput>
    connectOrCreate?: SubmissionCreateOrConnectWithoutFilesInput
    connect?: SubmissionWhereUniqueInput
  }

  export type ReportUpdateOneRequiredWithoutFilesNestedInput = {
    create?: XOR<ReportCreateWithoutFilesInput, ReportUncheckedCreateWithoutFilesInput>
    connectOrCreate?: ReportCreateOrConnectWithoutFilesInput
    upsert?: ReportUpsertWithoutFilesInput
    connect?: ReportWhereUniqueInput
    update?: XOR<XOR<ReportUpdateToOneWithWhereWithoutFilesInput, ReportUpdateWithoutFilesInput>, ReportUncheckedUpdateWithoutFilesInput>
  }

  export type SubmissionUpdateOneRequiredWithoutFilesNestedInput = {
    create?: XOR<SubmissionCreateWithoutFilesInput, SubmissionUncheckedCreateWithoutFilesInput>
    connectOrCreate?: SubmissionCreateOrConnectWithoutFilesInput
    upsert?: SubmissionUpsertWithoutFilesInput
    connect?: SubmissionWhereUniqueInput
    update?: XOR<XOR<SubmissionUpdateToOneWithWhereWithoutFilesInput, SubmissionUpdateWithoutFilesInput>, SubmissionUncheckedUpdateWithoutFilesInput>
  }

  export type ReportCreateNestedOneWithoutFeedbacksInput = {
    create?: XOR<ReportCreateWithoutFeedbacksInput, ReportUncheckedCreateWithoutFeedbacksInput>
    connectOrCreate?: ReportCreateOrConnectWithoutFeedbacksInput
    connect?: ReportWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutFeedbacksInput = {
    create?: XOR<UserCreateWithoutFeedbacksInput, UserUncheckedCreateWithoutFeedbacksInput>
    connectOrCreate?: UserCreateOrConnectWithoutFeedbacksInput
    connect?: UserWhereUniqueInput
  }

  export type SubmissionCreateNestedOneWithoutFeedbacksInput = {
    create?: XOR<SubmissionCreateWithoutFeedbacksInput, SubmissionUncheckedCreateWithoutFeedbacksInput>
    connectOrCreate?: SubmissionCreateOrConnectWithoutFeedbacksInput
    connect?: SubmissionWhereUniqueInput
  }

  export type ReportUpdateOneRequiredWithoutFeedbacksNestedInput = {
    create?: XOR<ReportCreateWithoutFeedbacksInput, ReportUncheckedCreateWithoutFeedbacksInput>
    connectOrCreate?: ReportCreateOrConnectWithoutFeedbacksInput
    upsert?: ReportUpsertWithoutFeedbacksInput
    connect?: ReportWhereUniqueInput
    update?: XOR<XOR<ReportUpdateToOneWithWhereWithoutFeedbacksInput, ReportUpdateWithoutFeedbacksInput>, ReportUncheckedUpdateWithoutFeedbacksInput>
  }

  export type UserUpdateOneRequiredWithoutFeedbacksNestedInput = {
    create?: XOR<UserCreateWithoutFeedbacksInput, UserUncheckedCreateWithoutFeedbacksInput>
    connectOrCreate?: UserCreateOrConnectWithoutFeedbacksInput
    upsert?: UserUpsertWithoutFeedbacksInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutFeedbacksInput, UserUpdateWithoutFeedbacksInput>, UserUncheckedUpdateWithoutFeedbacksInput>
  }

  export type SubmissionUpdateOneWithoutFeedbacksNestedInput = {
    create?: XOR<SubmissionCreateWithoutFeedbacksInput, SubmissionUncheckedCreateWithoutFeedbacksInput>
    connectOrCreate?: SubmissionCreateOrConnectWithoutFeedbacksInput
    upsert?: SubmissionUpsertWithoutFeedbacksInput
    disconnect?: SubmissionWhereInput | boolean
    delete?: SubmissionWhereInput | boolean
    connect?: SubmissionWhereUniqueInput
    update?: XOR<XOR<SubmissionUpdateToOneWithWhereWithoutFeedbacksInput, SubmissionUpdateWithoutFeedbacksInput>, SubmissionUncheckedUpdateWithoutFeedbacksInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type FileAttachmentCreateNestedManyWithoutSubmissionInput = {
    create?: XOR<FileAttachmentCreateWithoutSubmissionInput, FileAttachmentUncheckedCreateWithoutSubmissionInput> | FileAttachmentCreateWithoutSubmissionInput[] | FileAttachmentUncheckedCreateWithoutSubmissionInput[]
    connectOrCreate?: FileAttachmentCreateOrConnectWithoutSubmissionInput | FileAttachmentCreateOrConnectWithoutSubmissionInput[]
    createMany?: FileAttachmentCreateManySubmissionInputEnvelope
    connect?: FileAttachmentWhereUniqueInput | FileAttachmentWhereUniqueInput[]
  }

  export type FeedbackCreateNestedManyWithoutSubmissionInput = {
    create?: XOR<FeedbackCreateWithoutSubmissionInput, FeedbackUncheckedCreateWithoutSubmissionInput> | FeedbackCreateWithoutSubmissionInput[] | FeedbackUncheckedCreateWithoutSubmissionInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutSubmissionInput | FeedbackCreateOrConnectWithoutSubmissionInput[]
    createMany?: FeedbackCreateManySubmissionInputEnvelope
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
  }

  export type ReportCreateNestedOneWithoutSubmissionsInput = {
    create?: XOR<ReportCreateWithoutSubmissionsInput, ReportUncheckedCreateWithoutSubmissionsInput>
    connectOrCreate?: ReportCreateOrConnectWithoutSubmissionsInput
    connect?: ReportWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutSubmissionsInput = {
    create?: XOR<UserCreateWithoutSubmissionsInput, UserUncheckedCreateWithoutSubmissionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSubmissionsInput
    connect?: UserWhereUniqueInput
  }

  export type FileAttachmentUncheckedCreateNestedManyWithoutSubmissionInput = {
    create?: XOR<FileAttachmentCreateWithoutSubmissionInput, FileAttachmentUncheckedCreateWithoutSubmissionInput> | FileAttachmentCreateWithoutSubmissionInput[] | FileAttachmentUncheckedCreateWithoutSubmissionInput[]
    connectOrCreate?: FileAttachmentCreateOrConnectWithoutSubmissionInput | FileAttachmentCreateOrConnectWithoutSubmissionInput[]
    createMany?: FileAttachmentCreateManySubmissionInputEnvelope
    connect?: FileAttachmentWhereUniqueInput | FileAttachmentWhereUniqueInput[]
  }

  export type FeedbackUncheckedCreateNestedManyWithoutSubmissionInput = {
    create?: XOR<FeedbackCreateWithoutSubmissionInput, FeedbackUncheckedCreateWithoutSubmissionInput> | FeedbackCreateWithoutSubmissionInput[] | FeedbackUncheckedCreateWithoutSubmissionInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutSubmissionInput | FeedbackCreateOrConnectWithoutSubmissionInput[]
    createMany?: FeedbackCreateManySubmissionInputEnvelope
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
  }

  export type FileAttachmentUpdateManyWithoutSubmissionNestedInput = {
    create?: XOR<FileAttachmentCreateWithoutSubmissionInput, FileAttachmentUncheckedCreateWithoutSubmissionInput> | FileAttachmentCreateWithoutSubmissionInput[] | FileAttachmentUncheckedCreateWithoutSubmissionInput[]
    connectOrCreate?: FileAttachmentCreateOrConnectWithoutSubmissionInput | FileAttachmentCreateOrConnectWithoutSubmissionInput[]
    upsert?: FileAttachmentUpsertWithWhereUniqueWithoutSubmissionInput | FileAttachmentUpsertWithWhereUniqueWithoutSubmissionInput[]
    createMany?: FileAttachmentCreateManySubmissionInputEnvelope
    set?: FileAttachmentWhereUniqueInput | FileAttachmentWhereUniqueInput[]
    disconnect?: FileAttachmentWhereUniqueInput | FileAttachmentWhereUniqueInput[]
    delete?: FileAttachmentWhereUniqueInput | FileAttachmentWhereUniqueInput[]
    connect?: FileAttachmentWhereUniqueInput | FileAttachmentWhereUniqueInput[]
    update?: FileAttachmentUpdateWithWhereUniqueWithoutSubmissionInput | FileAttachmentUpdateWithWhereUniqueWithoutSubmissionInput[]
    updateMany?: FileAttachmentUpdateManyWithWhereWithoutSubmissionInput | FileAttachmentUpdateManyWithWhereWithoutSubmissionInput[]
    deleteMany?: FileAttachmentScalarWhereInput | FileAttachmentScalarWhereInput[]
  }

  export type FeedbackUpdateManyWithoutSubmissionNestedInput = {
    create?: XOR<FeedbackCreateWithoutSubmissionInput, FeedbackUncheckedCreateWithoutSubmissionInput> | FeedbackCreateWithoutSubmissionInput[] | FeedbackUncheckedCreateWithoutSubmissionInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutSubmissionInput | FeedbackCreateOrConnectWithoutSubmissionInput[]
    upsert?: FeedbackUpsertWithWhereUniqueWithoutSubmissionInput | FeedbackUpsertWithWhereUniqueWithoutSubmissionInput[]
    createMany?: FeedbackCreateManySubmissionInputEnvelope
    set?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    disconnect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    delete?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    update?: FeedbackUpdateWithWhereUniqueWithoutSubmissionInput | FeedbackUpdateWithWhereUniqueWithoutSubmissionInput[]
    updateMany?: FeedbackUpdateManyWithWhereWithoutSubmissionInput | FeedbackUpdateManyWithWhereWithoutSubmissionInput[]
    deleteMany?: FeedbackScalarWhereInput | FeedbackScalarWhereInput[]
  }

  export type ReportUpdateOneRequiredWithoutSubmissionsNestedInput = {
    create?: XOR<ReportCreateWithoutSubmissionsInput, ReportUncheckedCreateWithoutSubmissionsInput>
    connectOrCreate?: ReportCreateOrConnectWithoutSubmissionsInput
    upsert?: ReportUpsertWithoutSubmissionsInput
    connect?: ReportWhereUniqueInput
    update?: XOR<XOR<ReportUpdateToOneWithWhereWithoutSubmissionsInput, ReportUpdateWithoutSubmissionsInput>, ReportUncheckedUpdateWithoutSubmissionsInput>
  }

  export type UserUpdateOneRequiredWithoutSubmissionsNestedInput = {
    create?: XOR<UserCreateWithoutSubmissionsInput, UserUncheckedCreateWithoutSubmissionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSubmissionsInput
    upsert?: UserUpsertWithoutSubmissionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSubmissionsInput, UserUpdateWithoutSubmissionsInput>, UserUncheckedUpdateWithoutSubmissionsInput>
  }

  export type FileAttachmentUncheckedUpdateManyWithoutSubmissionNestedInput = {
    create?: XOR<FileAttachmentCreateWithoutSubmissionInput, FileAttachmentUncheckedCreateWithoutSubmissionInput> | FileAttachmentCreateWithoutSubmissionInput[] | FileAttachmentUncheckedCreateWithoutSubmissionInput[]
    connectOrCreate?: FileAttachmentCreateOrConnectWithoutSubmissionInput | FileAttachmentCreateOrConnectWithoutSubmissionInput[]
    upsert?: FileAttachmentUpsertWithWhereUniqueWithoutSubmissionInput | FileAttachmentUpsertWithWhereUniqueWithoutSubmissionInput[]
    createMany?: FileAttachmentCreateManySubmissionInputEnvelope
    set?: FileAttachmentWhereUniqueInput | FileAttachmentWhereUniqueInput[]
    disconnect?: FileAttachmentWhereUniqueInput | FileAttachmentWhereUniqueInput[]
    delete?: FileAttachmentWhereUniqueInput | FileAttachmentWhereUniqueInput[]
    connect?: FileAttachmentWhereUniqueInput | FileAttachmentWhereUniqueInput[]
    update?: FileAttachmentUpdateWithWhereUniqueWithoutSubmissionInput | FileAttachmentUpdateWithWhereUniqueWithoutSubmissionInput[]
    updateMany?: FileAttachmentUpdateManyWithWhereWithoutSubmissionInput | FileAttachmentUpdateManyWithWhereWithoutSubmissionInput[]
    deleteMany?: FileAttachmentScalarWhereInput | FileAttachmentScalarWhereInput[]
  }

  export type FeedbackUncheckedUpdateManyWithoutSubmissionNestedInput = {
    create?: XOR<FeedbackCreateWithoutSubmissionInput, FeedbackUncheckedCreateWithoutSubmissionInput> | FeedbackCreateWithoutSubmissionInput[] | FeedbackUncheckedCreateWithoutSubmissionInput[]
    connectOrCreate?: FeedbackCreateOrConnectWithoutSubmissionInput | FeedbackCreateOrConnectWithoutSubmissionInput[]
    upsert?: FeedbackUpsertWithWhereUniqueWithoutSubmissionInput | FeedbackUpsertWithWhereUniqueWithoutSubmissionInput[]
    createMany?: FeedbackCreateManySubmissionInputEnvelope
    set?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    disconnect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    delete?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    connect?: FeedbackWhereUniqueInput | FeedbackWhereUniqueInput[]
    update?: FeedbackUpdateWithWhereUniqueWithoutSubmissionInput | FeedbackUpdateWithWhereUniqueWithoutSubmissionInput[]
    updateMany?: FeedbackUpdateManyWithWhereWithoutSubmissionInput | FeedbackUpdateManyWithWhereWithoutSubmissionInput[]
    deleteMany?: FeedbackScalarWhereInput | FeedbackScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutNotificationsInput = {
    create?: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutNotificationsNestedInput = {
    create?: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsInput
    upsert?: UserUpsertWithoutNotificationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutNotificationsInput, UserUpdateWithoutNotificationsInput>, UserUncheckedUpdateWithoutNotificationsInput>
  }

  export type UserCreateNestedOneWithoutEventsInput = {
    create?: XOR<UserCreateWithoutEventsInput, UserUncheckedCreateWithoutEventsInput>
    connectOrCreate?: UserCreateOrConnectWithoutEventsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutEventsNestedInput = {
    create?: XOR<UserCreateWithoutEventsInput, UserUncheckedCreateWithoutEventsInput>
    connectOrCreate?: UserCreateOrConnectWithoutEventsInput
    upsert?: UserUpsertWithoutEventsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutEventsInput, UserUpdateWithoutEventsInput>, UserUncheckedUpdateWithoutEventsInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type ActivityCreateWithoutCreatorInput = {
    title: string
    description?: string | null
    activityDate: Date | string
    createdAt?: Date | string
    isArchived?: boolean
    filename?: string | null
    filepath?: string | null
    participants?: ActivityParticipationCreateNestedManyWithoutActivityInput
    documentations?: ActivityDocumentationCreateNestedManyWithoutActivityInput
  }

  export type ActivityUncheckedCreateWithoutCreatorInput = {
    activityId?: number
    title: string
    description?: string | null
    activityDate: Date | string
    createdAt?: Date | string
    isArchived?: boolean
    filename?: string | null
    filepath?: string | null
    participants?: ActivityParticipationUncheckedCreateNestedManyWithoutActivityInput
    documentations?: ActivityDocumentationUncheckedCreateNestedManyWithoutActivityInput
  }

  export type ActivityCreateOrConnectWithoutCreatorInput = {
    where: ActivityWhereUniqueInput
    create: XOR<ActivityCreateWithoutCreatorInput, ActivityUncheckedCreateWithoutCreatorInput>
  }

  export type ActivityCreateManyCreatorInputEnvelope = {
    data: ActivityCreateManyCreatorInput | ActivityCreateManyCreatorInput[]
    skipDuplicates?: boolean
  }

  export type ReportCreateWithoutUserInput = {
    type: string
    month: string
    year: number
    dueDate: Date | string
    isArchived?: boolean
    files?: FileAttachmentCreateNestedManyWithoutReportInput
    feedbacks?: FeedbackCreateNestedManyWithoutReportInput
    submissions?: SubmissionCreateNestedManyWithoutReportInput
  }

  export type ReportUncheckedCreateWithoutUserInput = {
    reportId?: number
    type: string
    month: string
    year: number
    dueDate: Date | string
    isArchived?: boolean
    files?: FileAttachmentUncheckedCreateNestedManyWithoutReportInput
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutReportInput
    submissions?: SubmissionUncheckedCreateNestedManyWithoutReportInput
  }

  export type ReportCreateOrConnectWithoutUserInput = {
    where: ReportWhereUniqueInput
    create: XOR<ReportCreateWithoutUserInput, ReportUncheckedCreateWithoutUserInput>
  }

  export type ReportCreateManyUserInputEnvelope = {
    data: ReportCreateManyUserInput | ReportCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type FeedbackCreateWithoutUserInput = {
    content: string
    createdAt?: Date | string
    report: ReportCreateNestedOneWithoutFeedbacksInput
    submission?: SubmissionCreateNestedOneWithoutFeedbacksInput
  }

  export type FeedbackUncheckedCreateWithoutUserInput = {
    feedbackId?: number
    reportId: number
    content: string
    createdAt?: Date | string
    submissionId?: number | null
  }

  export type FeedbackCreateOrConnectWithoutUserInput = {
    where: FeedbackWhereUniqueInput
    create: XOR<FeedbackCreateWithoutUserInput, FeedbackUncheckedCreateWithoutUserInput>
  }

  export type FeedbackCreateManyUserInputEnvelope = {
    data: FeedbackCreateManyUserInput | FeedbackCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type NotificationCreateWithoutUserInput = {
    title: string
    message: string
    createdAt?: Date | string
    read?: boolean
    type: string
  }

  export type NotificationUncheckedCreateWithoutUserInput = {
    id?: number
    title: string
    message: string
    createdAt?: Date | string
    read?: boolean
    type: string
  }

  export type NotificationCreateOrConnectWithoutUserInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
  }

  export type NotificationCreateManyUserInputEnvelope = {
    data: NotificationCreateManyUserInput | NotificationCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type EventCreateWithoutUserInput = {
    title: string
    start: Date | string
    end: Date | string
    allDay: boolean
    createdAt?: Date | string
    isArchived?: boolean
  }

  export type EventUncheckedCreateWithoutUserInput = {
    eventId?: number
    title: string
    start: Date | string
    end: Date | string
    allDay: boolean
    createdAt?: Date | string
    isArchived?: boolean
  }

  export type EventCreateOrConnectWithoutUserInput = {
    where: EventWhereUniqueInput
    create: XOR<EventCreateWithoutUserInput, EventUncheckedCreateWithoutUserInput>
  }

  export type EventCreateManyUserInputEnvelope = {
    data: EventCreateManyUserInput | EventCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type SubmissionCreateWithoutUserInput = {
    status?: string
    submissionDate?: Date | string
    files?: FileAttachmentCreateNestedManyWithoutSubmissionInput
    feedbacks?: FeedbackCreateNestedManyWithoutSubmissionInput
    report: ReportCreateNestedOneWithoutSubmissionsInput
  }

  export type SubmissionUncheckedCreateWithoutUserInput = {
    submissionId?: number
    reportId: number
    status?: string
    submissionDate?: Date | string
    files?: FileAttachmentUncheckedCreateNestedManyWithoutSubmissionInput
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutSubmissionInput
  }

  export type SubmissionCreateOrConnectWithoutUserInput = {
    where: SubmissionWhereUniqueInput
    create: XOR<SubmissionCreateWithoutUserInput, SubmissionUncheckedCreateWithoutUserInput>
  }

  export type SubmissionCreateManyUserInputEnvelope = {
    data: SubmissionCreateManyUserInput | SubmissionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ActivityUpsertWithWhereUniqueWithoutCreatorInput = {
    where: ActivityWhereUniqueInput
    update: XOR<ActivityUpdateWithoutCreatorInput, ActivityUncheckedUpdateWithoutCreatorInput>
    create: XOR<ActivityCreateWithoutCreatorInput, ActivityUncheckedCreateWithoutCreatorInput>
  }

  export type ActivityUpdateWithWhereUniqueWithoutCreatorInput = {
    where: ActivityWhereUniqueInput
    data: XOR<ActivityUpdateWithoutCreatorInput, ActivityUncheckedUpdateWithoutCreatorInput>
  }

  export type ActivityUpdateManyWithWhereWithoutCreatorInput = {
    where: ActivityScalarWhereInput
    data: XOR<ActivityUpdateManyMutationInput, ActivityUncheckedUpdateManyWithoutCreatorInput>
  }

  export type ActivityScalarWhereInput = {
    AND?: ActivityScalarWhereInput | ActivityScalarWhereInput[]
    OR?: ActivityScalarWhereInput[]
    NOT?: ActivityScalarWhereInput | ActivityScalarWhereInput[]
    activityId?: IntFilter<"Activity"> | number
    title?: StringFilter<"Activity"> | string
    description?: StringNullableFilter<"Activity"> | string | null
    activityDate?: DateTimeFilter<"Activity"> | Date | string
    createdBy?: IntFilter<"Activity"> | number
    createdAt?: DateTimeFilter<"Activity"> | Date | string
    isArchived?: BoolFilter<"Activity"> | boolean
    filename?: StringNullableFilter<"Activity"> | string | null
    filepath?: StringNullableFilter<"Activity"> | string | null
  }

  export type ReportUpsertWithWhereUniqueWithoutUserInput = {
    where: ReportWhereUniqueInput
    update: XOR<ReportUpdateWithoutUserInput, ReportUncheckedUpdateWithoutUserInput>
    create: XOR<ReportCreateWithoutUserInput, ReportUncheckedCreateWithoutUserInput>
  }

  export type ReportUpdateWithWhereUniqueWithoutUserInput = {
    where: ReportWhereUniqueInput
    data: XOR<ReportUpdateWithoutUserInput, ReportUncheckedUpdateWithoutUserInput>
  }

  export type ReportUpdateManyWithWhereWithoutUserInput = {
    where: ReportScalarWhereInput
    data: XOR<ReportUpdateManyMutationInput, ReportUncheckedUpdateManyWithoutUserInput>
  }

  export type ReportScalarWhereInput = {
    AND?: ReportScalarWhereInput | ReportScalarWhereInput[]
    OR?: ReportScalarWhereInput[]
    NOT?: ReportScalarWhereInput | ReportScalarWhereInput[]
    reportId?: IntFilter<"Report"> | number
    type?: StringFilter<"Report"> | string
    month?: StringFilter<"Report"> | string
    year?: IntFilter<"Report"> | number
    userId?: IntFilter<"Report"> | number
    dueDate?: DateTimeFilter<"Report"> | Date | string
    isArchived?: BoolFilter<"Report"> | boolean
  }

  export type FeedbackUpsertWithWhereUniqueWithoutUserInput = {
    where: FeedbackWhereUniqueInput
    update: XOR<FeedbackUpdateWithoutUserInput, FeedbackUncheckedUpdateWithoutUserInput>
    create: XOR<FeedbackCreateWithoutUserInput, FeedbackUncheckedCreateWithoutUserInput>
  }

  export type FeedbackUpdateWithWhereUniqueWithoutUserInput = {
    where: FeedbackWhereUniqueInput
    data: XOR<FeedbackUpdateWithoutUserInput, FeedbackUncheckedUpdateWithoutUserInput>
  }

  export type FeedbackUpdateManyWithWhereWithoutUserInput = {
    where: FeedbackScalarWhereInput
    data: XOR<FeedbackUpdateManyMutationInput, FeedbackUncheckedUpdateManyWithoutUserInput>
  }

  export type FeedbackScalarWhereInput = {
    AND?: FeedbackScalarWhereInput | FeedbackScalarWhereInput[]
    OR?: FeedbackScalarWhereInput[]
    NOT?: FeedbackScalarWhereInput | FeedbackScalarWhereInput[]
    feedbackId?: IntFilter<"Feedback"> | number
    reportId?: IntFilter<"Feedback"> | number
    createdBy?: IntFilter<"Feedback"> | number
    content?: StringFilter<"Feedback"> | string
    createdAt?: DateTimeFilter<"Feedback"> | Date | string
    submissionId?: IntNullableFilter<"Feedback"> | number | null
  }

  export type NotificationUpsertWithWhereUniqueWithoutUserInput = {
    where: NotificationWhereUniqueInput
    update: XOR<NotificationUpdateWithoutUserInput, NotificationUncheckedUpdateWithoutUserInput>
    create: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
  }

  export type NotificationUpdateWithWhereUniqueWithoutUserInput = {
    where: NotificationWhereUniqueInput
    data: XOR<NotificationUpdateWithoutUserInput, NotificationUncheckedUpdateWithoutUserInput>
  }

  export type NotificationUpdateManyWithWhereWithoutUserInput = {
    where: NotificationScalarWhereInput
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyWithoutUserInput>
  }

  export type NotificationScalarWhereInput = {
    AND?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    OR?: NotificationScalarWhereInput[]
    NOT?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    id?: IntFilter<"Notification"> | number
    userId?: IntFilter<"Notification"> | number
    title?: StringFilter<"Notification"> | string
    message?: StringFilter<"Notification"> | string
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    read?: BoolFilter<"Notification"> | boolean
    type?: StringFilter<"Notification"> | string
  }

  export type EventUpsertWithWhereUniqueWithoutUserInput = {
    where: EventWhereUniqueInput
    update: XOR<EventUpdateWithoutUserInput, EventUncheckedUpdateWithoutUserInput>
    create: XOR<EventCreateWithoutUserInput, EventUncheckedCreateWithoutUserInput>
  }

  export type EventUpdateWithWhereUniqueWithoutUserInput = {
    where: EventWhereUniqueInput
    data: XOR<EventUpdateWithoutUserInput, EventUncheckedUpdateWithoutUserInput>
  }

  export type EventUpdateManyWithWhereWithoutUserInput = {
    where: EventScalarWhereInput
    data: XOR<EventUpdateManyMutationInput, EventUncheckedUpdateManyWithoutUserInput>
  }

  export type EventScalarWhereInput = {
    AND?: EventScalarWhereInput | EventScalarWhereInput[]
    OR?: EventScalarWhereInput[]
    NOT?: EventScalarWhereInput | EventScalarWhereInput[]
    eventId?: IntFilter<"Event"> | number
    title?: StringFilter<"Event"> | string
    start?: DateTimeFilter<"Event"> | Date | string
    end?: DateTimeFilter<"Event"> | Date | string
    allDay?: BoolFilter<"Event"> | boolean
    createdBy?: IntFilter<"Event"> | number
    createdAt?: DateTimeFilter<"Event"> | Date | string
    isArchived?: BoolFilter<"Event"> | boolean
  }

  export type SubmissionUpsertWithWhereUniqueWithoutUserInput = {
    where: SubmissionWhereUniqueInput
    update: XOR<SubmissionUpdateWithoutUserInput, SubmissionUncheckedUpdateWithoutUserInput>
    create: XOR<SubmissionCreateWithoutUserInput, SubmissionUncheckedCreateWithoutUserInput>
  }

  export type SubmissionUpdateWithWhereUniqueWithoutUserInput = {
    where: SubmissionWhereUniqueInput
    data: XOR<SubmissionUpdateWithoutUserInput, SubmissionUncheckedUpdateWithoutUserInput>
  }

  export type SubmissionUpdateManyWithWhereWithoutUserInput = {
    where: SubmissionScalarWhereInput
    data: XOR<SubmissionUpdateManyMutationInput, SubmissionUncheckedUpdateManyWithoutUserInput>
  }

  export type SubmissionScalarWhereInput = {
    AND?: SubmissionScalarWhereInput | SubmissionScalarWhereInput[]
    OR?: SubmissionScalarWhereInput[]
    NOT?: SubmissionScalarWhereInput | SubmissionScalarWhereInput[]
    submissionId?: IntFilter<"Submission"> | number
    reportId?: IntFilter<"Submission"> | number
    userId?: IntFilter<"Submission"> | number
    status?: StringFilter<"Submission"> | string
    submissionDate?: DateTimeFilter<"Submission"> | Date | string
  }

  export type ActivityParticipationCreateWithoutBeneficiaryInput = {
    attended?: boolean
    beneficiaryFirstName: string
    beneficiaryMiddleName?: string | null
    beneficiaryLastName: string
    beneficiarySuffix?: string | null
    beneficiaryBirthdate: Date | string
    beneficiarySex: string
    beneficiaryJob?: string | null
    beneficiaryBarangay: string
    beneficiaryHealthStation: string
    beneficiaryPrimaryType: string
    beneficiaryCivilStatus: string
    beneficiaryContactNumber?: string | null
    beneficiaryTypes: string
    isArchived?: boolean
    activity: ActivityCreateNestedOneWithoutParticipantsInput
  }

  export type ActivityParticipationUncheckedCreateWithoutBeneficiaryInput = {
    activityId: number
    attended?: boolean
    beneficiaryFirstName: string
    beneficiaryMiddleName?: string | null
    beneficiaryLastName: string
    beneficiarySuffix?: string | null
    beneficiaryBirthdate: Date | string
    beneficiarySex: string
    beneficiaryJob?: string | null
    beneficiaryBarangay: string
    beneficiaryHealthStation: string
    beneficiaryPrimaryType: string
    beneficiaryCivilStatus: string
    beneficiaryContactNumber?: string | null
    beneficiaryTypes: string
    isArchived?: boolean
  }

  export type ActivityParticipationCreateOrConnectWithoutBeneficiaryInput = {
    where: ActivityParticipationWhereUniqueInput
    create: XOR<ActivityParticipationCreateWithoutBeneficiaryInput, ActivityParticipationUncheckedCreateWithoutBeneficiaryInput>
  }

  export type ActivityParticipationCreateManyBeneficiaryInputEnvelope = {
    data: ActivityParticipationCreateManyBeneficiaryInput | ActivityParticipationCreateManyBeneficiaryInput[]
    skipDuplicates?: boolean
  }

  export type BeneficiaryTypesCreateWithoutBeneficiaryInput = {
    type: TypeCreateNestedOneWithoutBeneficiaryTypesInput
  }

  export type BeneficiaryTypesUncheckedCreateWithoutBeneficiaryInput = {
    typeId: number
  }

  export type BeneficiaryTypesCreateOrConnectWithoutBeneficiaryInput = {
    where: BeneficiaryTypesWhereUniqueInput
    create: XOR<BeneficiaryTypesCreateWithoutBeneficiaryInput, BeneficiaryTypesUncheckedCreateWithoutBeneficiaryInput>
  }

  export type BeneficiaryTypesCreateManyBeneficiaryInputEnvelope = {
    data: BeneficiaryTypesCreateManyBeneficiaryInput | BeneficiaryTypesCreateManyBeneficiaryInput[]
    skipDuplicates?: boolean
  }

  export type ActivityParticipationUpsertWithWhereUniqueWithoutBeneficiaryInput = {
    where: ActivityParticipationWhereUniqueInput
    update: XOR<ActivityParticipationUpdateWithoutBeneficiaryInput, ActivityParticipationUncheckedUpdateWithoutBeneficiaryInput>
    create: XOR<ActivityParticipationCreateWithoutBeneficiaryInput, ActivityParticipationUncheckedCreateWithoutBeneficiaryInput>
  }

  export type ActivityParticipationUpdateWithWhereUniqueWithoutBeneficiaryInput = {
    where: ActivityParticipationWhereUniqueInput
    data: XOR<ActivityParticipationUpdateWithoutBeneficiaryInput, ActivityParticipationUncheckedUpdateWithoutBeneficiaryInput>
  }

  export type ActivityParticipationUpdateManyWithWhereWithoutBeneficiaryInput = {
    where: ActivityParticipationScalarWhereInput
    data: XOR<ActivityParticipationUpdateManyMutationInput, ActivityParticipationUncheckedUpdateManyWithoutBeneficiaryInput>
  }

  export type ActivityParticipationScalarWhereInput = {
    AND?: ActivityParticipationScalarWhereInput | ActivityParticipationScalarWhereInput[]
    OR?: ActivityParticipationScalarWhereInput[]
    NOT?: ActivityParticipationScalarWhereInput | ActivityParticipationScalarWhereInput[]
    activityId?: IntFilter<"ActivityParticipation"> | number
    beneficiaryId?: IntFilter<"ActivityParticipation"> | number
    attended?: BoolFilter<"ActivityParticipation"> | boolean
    beneficiaryFirstName?: StringFilter<"ActivityParticipation"> | string
    beneficiaryMiddleName?: StringNullableFilter<"ActivityParticipation"> | string | null
    beneficiaryLastName?: StringFilter<"ActivityParticipation"> | string
    beneficiarySuffix?: StringNullableFilter<"ActivityParticipation"> | string | null
    beneficiaryBirthdate?: DateTimeFilter<"ActivityParticipation"> | Date | string
    beneficiarySex?: StringFilter<"ActivityParticipation"> | string
    beneficiaryJob?: StringNullableFilter<"ActivityParticipation"> | string | null
    beneficiaryBarangay?: StringFilter<"ActivityParticipation"> | string
    beneficiaryHealthStation?: StringFilter<"ActivityParticipation"> | string
    beneficiaryPrimaryType?: StringFilter<"ActivityParticipation"> | string
    beneficiaryCivilStatus?: StringFilter<"ActivityParticipation"> | string
    beneficiaryContactNumber?: StringNullableFilter<"ActivityParticipation"> | string | null
    beneficiaryTypes?: StringFilter<"ActivityParticipation"> | string
    isArchived?: BoolFilter<"ActivityParticipation"> | boolean
  }

  export type BeneficiaryTypesUpsertWithWhereUniqueWithoutBeneficiaryInput = {
    where: BeneficiaryTypesWhereUniqueInput
    update: XOR<BeneficiaryTypesUpdateWithoutBeneficiaryInput, BeneficiaryTypesUncheckedUpdateWithoutBeneficiaryInput>
    create: XOR<BeneficiaryTypesCreateWithoutBeneficiaryInput, BeneficiaryTypesUncheckedCreateWithoutBeneficiaryInput>
  }

  export type BeneficiaryTypesUpdateWithWhereUniqueWithoutBeneficiaryInput = {
    where: BeneficiaryTypesWhereUniqueInput
    data: XOR<BeneficiaryTypesUpdateWithoutBeneficiaryInput, BeneficiaryTypesUncheckedUpdateWithoutBeneficiaryInput>
  }

  export type BeneficiaryTypesUpdateManyWithWhereWithoutBeneficiaryInput = {
    where: BeneficiaryTypesScalarWhereInput
    data: XOR<BeneficiaryTypesUpdateManyMutationInput, BeneficiaryTypesUncheckedUpdateManyWithoutBeneficiaryInput>
  }

  export type BeneficiaryTypesScalarWhereInput = {
    AND?: BeneficiaryTypesScalarWhereInput | BeneficiaryTypesScalarWhereInput[]
    OR?: BeneficiaryTypesScalarWhereInput[]
    NOT?: BeneficiaryTypesScalarWhereInput | BeneficiaryTypesScalarWhereInput[]
    beneficiaryId?: IntFilter<"BeneficiaryTypes"> | number
    typeId?: IntFilter<"BeneficiaryTypes"> | number
  }

  export type BeneficiaryTypesCreateWithoutTypeInput = {
    beneficiary: BeneficiaryCreateNestedOneWithoutBeneficiaryTypesInput
  }

  export type BeneficiaryTypesUncheckedCreateWithoutTypeInput = {
    beneficiaryId: number
  }

  export type BeneficiaryTypesCreateOrConnectWithoutTypeInput = {
    where: BeneficiaryTypesWhereUniqueInput
    create: XOR<BeneficiaryTypesCreateWithoutTypeInput, BeneficiaryTypesUncheckedCreateWithoutTypeInput>
  }

  export type BeneficiaryTypesCreateManyTypeInputEnvelope = {
    data: BeneficiaryTypesCreateManyTypeInput | BeneficiaryTypesCreateManyTypeInput[]
    skipDuplicates?: boolean
  }

  export type BeneficiaryTypesUpsertWithWhereUniqueWithoutTypeInput = {
    where: BeneficiaryTypesWhereUniqueInput
    update: XOR<BeneficiaryTypesUpdateWithoutTypeInput, BeneficiaryTypesUncheckedUpdateWithoutTypeInput>
    create: XOR<BeneficiaryTypesCreateWithoutTypeInput, BeneficiaryTypesUncheckedCreateWithoutTypeInput>
  }

  export type BeneficiaryTypesUpdateWithWhereUniqueWithoutTypeInput = {
    where: BeneficiaryTypesWhereUniqueInput
    data: XOR<BeneficiaryTypesUpdateWithoutTypeInput, BeneficiaryTypesUncheckedUpdateWithoutTypeInput>
  }

  export type BeneficiaryTypesUpdateManyWithWhereWithoutTypeInput = {
    where: BeneficiaryTypesScalarWhereInput
    data: XOR<BeneficiaryTypesUpdateManyMutationInput, BeneficiaryTypesUncheckedUpdateManyWithoutTypeInput>
  }

  export type BeneficiaryCreateWithoutBeneficiaryTypesInput = {
    firstName: string
    middleName?: string | null
    lastName: string
    suffix?: string | null
    birthdate: Date | string
    age?: string | null
    sex: string
    job?: string | null
    barangay: string
    healthStation: string
    ageGroup: string
    subType?: string | null
    civilStatus: string
    contactNumber?: string | null
    isArchived?: boolean
    activityParticipation?: ActivityParticipationCreateNestedManyWithoutBeneficiaryInput
  }

  export type BeneficiaryUncheckedCreateWithoutBeneficiaryTypesInput = {
    beneficiaryId?: number
    firstName: string
    middleName?: string | null
    lastName: string
    suffix?: string | null
    birthdate: Date | string
    age?: string | null
    sex: string
    job?: string | null
    barangay: string
    healthStation: string
    ageGroup: string
    subType?: string | null
    civilStatus: string
    contactNumber?: string | null
    isArchived?: boolean
    activityParticipation?: ActivityParticipationUncheckedCreateNestedManyWithoutBeneficiaryInput
  }

  export type BeneficiaryCreateOrConnectWithoutBeneficiaryTypesInput = {
    where: BeneficiaryWhereUniqueInput
    create: XOR<BeneficiaryCreateWithoutBeneficiaryTypesInput, BeneficiaryUncheckedCreateWithoutBeneficiaryTypesInput>
  }

  export type TypeCreateWithoutBeneficiaryTypesInput = {
    typeName: string
    ageGroups?: TypeCreateageGroupsInput | string[]
    sex?: string | null
    subTypes?: TypeCreatesubTypesInput | string[]
    isArchived?: boolean
  }

  export type TypeUncheckedCreateWithoutBeneficiaryTypesInput = {
    typeId?: number
    typeName: string
    ageGroups?: TypeCreateageGroupsInput | string[]
    sex?: string | null
    subTypes?: TypeCreatesubTypesInput | string[]
    isArchived?: boolean
  }

  export type TypeCreateOrConnectWithoutBeneficiaryTypesInput = {
    where: TypeWhereUniqueInput
    create: XOR<TypeCreateWithoutBeneficiaryTypesInput, TypeUncheckedCreateWithoutBeneficiaryTypesInput>
  }

  export type BeneficiaryUpsertWithoutBeneficiaryTypesInput = {
    update: XOR<BeneficiaryUpdateWithoutBeneficiaryTypesInput, BeneficiaryUncheckedUpdateWithoutBeneficiaryTypesInput>
    create: XOR<BeneficiaryCreateWithoutBeneficiaryTypesInput, BeneficiaryUncheckedCreateWithoutBeneficiaryTypesInput>
    where?: BeneficiaryWhereInput
  }

  export type BeneficiaryUpdateToOneWithWhereWithoutBeneficiaryTypesInput = {
    where?: BeneficiaryWhereInput
    data: XOR<BeneficiaryUpdateWithoutBeneficiaryTypesInput, BeneficiaryUncheckedUpdateWithoutBeneficiaryTypesInput>
  }

  export type BeneficiaryUpdateWithoutBeneficiaryTypesInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: StringFieldUpdateOperationsInput | string
    suffix?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: DateTimeFieldUpdateOperationsInput | Date | string
    age?: NullableStringFieldUpdateOperationsInput | string | null
    sex?: StringFieldUpdateOperationsInput | string
    job?: NullableStringFieldUpdateOperationsInput | string | null
    barangay?: StringFieldUpdateOperationsInput | string
    healthStation?: StringFieldUpdateOperationsInput | string
    ageGroup?: StringFieldUpdateOperationsInput | string
    subType?: NullableStringFieldUpdateOperationsInput | string | null
    civilStatus?: StringFieldUpdateOperationsInput | string
    contactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    activityParticipation?: ActivityParticipationUpdateManyWithoutBeneficiaryNestedInput
  }

  export type BeneficiaryUncheckedUpdateWithoutBeneficiaryTypesInput = {
    beneficiaryId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: StringFieldUpdateOperationsInput | string
    suffix?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: DateTimeFieldUpdateOperationsInput | Date | string
    age?: NullableStringFieldUpdateOperationsInput | string | null
    sex?: StringFieldUpdateOperationsInput | string
    job?: NullableStringFieldUpdateOperationsInput | string | null
    barangay?: StringFieldUpdateOperationsInput | string
    healthStation?: StringFieldUpdateOperationsInput | string
    ageGroup?: StringFieldUpdateOperationsInput | string
    subType?: NullableStringFieldUpdateOperationsInput | string | null
    civilStatus?: StringFieldUpdateOperationsInput | string
    contactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    activityParticipation?: ActivityParticipationUncheckedUpdateManyWithoutBeneficiaryNestedInput
  }

  export type TypeUpsertWithoutBeneficiaryTypesInput = {
    update: XOR<TypeUpdateWithoutBeneficiaryTypesInput, TypeUncheckedUpdateWithoutBeneficiaryTypesInput>
    create: XOR<TypeCreateWithoutBeneficiaryTypesInput, TypeUncheckedCreateWithoutBeneficiaryTypesInput>
    where?: TypeWhereInput
  }

  export type TypeUpdateToOneWithWhereWithoutBeneficiaryTypesInput = {
    where?: TypeWhereInput
    data: XOR<TypeUpdateWithoutBeneficiaryTypesInput, TypeUncheckedUpdateWithoutBeneficiaryTypesInput>
  }

  export type TypeUpdateWithoutBeneficiaryTypesInput = {
    typeName?: StringFieldUpdateOperationsInput | string
    ageGroups?: TypeUpdateageGroupsInput | string[]
    sex?: NullableStringFieldUpdateOperationsInput | string | null
    subTypes?: TypeUpdatesubTypesInput | string[]
    isArchived?: BoolFieldUpdateOperationsInput | boolean
  }

  export type TypeUncheckedUpdateWithoutBeneficiaryTypesInput = {
    typeId?: IntFieldUpdateOperationsInput | number
    typeName?: StringFieldUpdateOperationsInput | string
    ageGroups?: TypeUpdateageGroupsInput | string[]
    sex?: NullableStringFieldUpdateOperationsInput | string | null
    subTypes?: TypeUpdatesubTypesInput | string[]
    isArchived?: BoolFieldUpdateOperationsInput | boolean
  }

  export type UserCreateWithoutActivitiesCreatedInput = {
    username: string
    password: string
    firstName: string
    lastName: string
    role: string
    sex?: string
    barangay?: string
    isArchived?: boolean
    reports?: ReportCreateNestedManyWithoutUserInput
    feedbacks?: FeedbackCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    events?: EventCreateNestedManyWithoutUserInput
    submissions?: SubmissionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutActivitiesCreatedInput = {
    user_id?: number
    username: string
    password: string
    firstName: string
    lastName: string
    role: string
    sex?: string
    barangay?: string
    isArchived?: boolean
    reports?: ReportUncheckedCreateNestedManyWithoutUserInput
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    events?: EventUncheckedCreateNestedManyWithoutUserInput
    submissions?: SubmissionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutActivitiesCreatedInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutActivitiesCreatedInput, UserUncheckedCreateWithoutActivitiesCreatedInput>
  }

  export type ActivityParticipationCreateWithoutActivityInput = {
    attended?: boolean
    beneficiaryFirstName: string
    beneficiaryMiddleName?: string | null
    beneficiaryLastName: string
    beneficiarySuffix?: string | null
    beneficiaryBirthdate: Date | string
    beneficiarySex: string
    beneficiaryJob?: string | null
    beneficiaryBarangay: string
    beneficiaryHealthStation: string
    beneficiaryPrimaryType: string
    beneficiaryCivilStatus: string
    beneficiaryContactNumber?: string | null
    beneficiaryTypes: string
    isArchived?: boolean
    beneficiary: BeneficiaryCreateNestedOneWithoutActivityParticipationInput
  }

  export type ActivityParticipationUncheckedCreateWithoutActivityInput = {
    beneficiaryId: number
    attended?: boolean
    beneficiaryFirstName: string
    beneficiaryMiddleName?: string | null
    beneficiaryLastName: string
    beneficiarySuffix?: string | null
    beneficiaryBirthdate: Date | string
    beneficiarySex: string
    beneficiaryJob?: string | null
    beneficiaryBarangay: string
    beneficiaryHealthStation: string
    beneficiaryPrimaryType: string
    beneficiaryCivilStatus: string
    beneficiaryContactNumber?: string | null
    beneficiaryTypes: string
    isArchived?: boolean
  }

  export type ActivityParticipationCreateOrConnectWithoutActivityInput = {
    where: ActivityParticipationWhereUniqueInput
    create: XOR<ActivityParticipationCreateWithoutActivityInput, ActivityParticipationUncheckedCreateWithoutActivityInput>
  }

  export type ActivityParticipationCreateManyActivityInputEnvelope = {
    data: ActivityParticipationCreateManyActivityInput | ActivityParticipationCreateManyActivityInput[]
    skipDuplicates?: boolean
  }

  export type ActivityDocumentationCreateWithoutActivityInput = {
    filename: string
    filepath: string
    uploadedAt?: Date | string
  }

  export type ActivityDocumentationUncheckedCreateWithoutActivityInput = {
    documentationId?: number
    filename: string
    filepath: string
    uploadedAt?: Date | string
  }

  export type ActivityDocumentationCreateOrConnectWithoutActivityInput = {
    where: ActivityDocumentationWhereUniqueInput
    create: XOR<ActivityDocumentationCreateWithoutActivityInput, ActivityDocumentationUncheckedCreateWithoutActivityInput>
  }

  export type ActivityDocumentationCreateManyActivityInputEnvelope = {
    data: ActivityDocumentationCreateManyActivityInput | ActivityDocumentationCreateManyActivityInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutActivitiesCreatedInput = {
    update: XOR<UserUpdateWithoutActivitiesCreatedInput, UserUncheckedUpdateWithoutActivitiesCreatedInput>
    create: XOR<UserCreateWithoutActivitiesCreatedInput, UserUncheckedCreateWithoutActivitiesCreatedInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutActivitiesCreatedInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutActivitiesCreatedInput, UserUncheckedUpdateWithoutActivitiesCreatedInput>
  }

  export type UserUpdateWithoutActivitiesCreatedInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    sex?: StringFieldUpdateOperationsInput | string
    barangay?: StringFieldUpdateOperationsInput | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    reports?: ReportUpdateManyWithoutUserNestedInput
    feedbacks?: FeedbackUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    events?: EventUpdateManyWithoutUserNestedInput
    submissions?: SubmissionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutActivitiesCreatedInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    sex?: StringFieldUpdateOperationsInput | string
    barangay?: StringFieldUpdateOperationsInput | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    reports?: ReportUncheckedUpdateManyWithoutUserNestedInput
    feedbacks?: FeedbackUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    events?: EventUncheckedUpdateManyWithoutUserNestedInput
    submissions?: SubmissionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ActivityParticipationUpsertWithWhereUniqueWithoutActivityInput = {
    where: ActivityParticipationWhereUniqueInput
    update: XOR<ActivityParticipationUpdateWithoutActivityInput, ActivityParticipationUncheckedUpdateWithoutActivityInput>
    create: XOR<ActivityParticipationCreateWithoutActivityInput, ActivityParticipationUncheckedCreateWithoutActivityInput>
  }

  export type ActivityParticipationUpdateWithWhereUniqueWithoutActivityInput = {
    where: ActivityParticipationWhereUniqueInput
    data: XOR<ActivityParticipationUpdateWithoutActivityInput, ActivityParticipationUncheckedUpdateWithoutActivityInput>
  }

  export type ActivityParticipationUpdateManyWithWhereWithoutActivityInput = {
    where: ActivityParticipationScalarWhereInput
    data: XOR<ActivityParticipationUpdateManyMutationInput, ActivityParticipationUncheckedUpdateManyWithoutActivityInput>
  }

  export type ActivityDocumentationUpsertWithWhereUniqueWithoutActivityInput = {
    where: ActivityDocumentationWhereUniqueInput
    update: XOR<ActivityDocumentationUpdateWithoutActivityInput, ActivityDocumentationUncheckedUpdateWithoutActivityInput>
    create: XOR<ActivityDocumentationCreateWithoutActivityInput, ActivityDocumentationUncheckedCreateWithoutActivityInput>
  }

  export type ActivityDocumentationUpdateWithWhereUniqueWithoutActivityInput = {
    where: ActivityDocumentationWhereUniqueInput
    data: XOR<ActivityDocumentationUpdateWithoutActivityInput, ActivityDocumentationUncheckedUpdateWithoutActivityInput>
  }

  export type ActivityDocumentationUpdateManyWithWhereWithoutActivityInput = {
    where: ActivityDocumentationScalarWhereInput
    data: XOR<ActivityDocumentationUpdateManyMutationInput, ActivityDocumentationUncheckedUpdateManyWithoutActivityInput>
  }

  export type ActivityDocumentationScalarWhereInput = {
    AND?: ActivityDocumentationScalarWhereInput | ActivityDocumentationScalarWhereInput[]
    OR?: ActivityDocumentationScalarWhereInput[]
    NOT?: ActivityDocumentationScalarWhereInput | ActivityDocumentationScalarWhereInput[]
    documentationId?: IntFilter<"ActivityDocumentation"> | number
    activityId?: IntFilter<"ActivityDocumentation"> | number
    filename?: StringFilter<"ActivityDocumentation"> | string
    filepath?: StringFilter<"ActivityDocumentation"> | string
    uploadedAt?: DateTimeFilter<"ActivityDocumentation"> | Date | string
  }

  export type ActivityCreateWithoutDocumentationsInput = {
    title: string
    description?: string | null
    activityDate: Date | string
    createdAt?: Date | string
    isArchived?: boolean
    filename?: string | null
    filepath?: string | null
    creator: UserCreateNestedOneWithoutActivitiesCreatedInput
    participants?: ActivityParticipationCreateNestedManyWithoutActivityInput
  }

  export type ActivityUncheckedCreateWithoutDocumentationsInput = {
    activityId?: number
    title: string
    description?: string | null
    activityDate: Date | string
    createdBy: number
    createdAt?: Date | string
    isArchived?: boolean
    filename?: string | null
    filepath?: string | null
    participants?: ActivityParticipationUncheckedCreateNestedManyWithoutActivityInput
  }

  export type ActivityCreateOrConnectWithoutDocumentationsInput = {
    where: ActivityWhereUniqueInput
    create: XOR<ActivityCreateWithoutDocumentationsInput, ActivityUncheckedCreateWithoutDocumentationsInput>
  }

  export type ActivityUpsertWithoutDocumentationsInput = {
    update: XOR<ActivityUpdateWithoutDocumentationsInput, ActivityUncheckedUpdateWithoutDocumentationsInput>
    create: XOR<ActivityCreateWithoutDocumentationsInput, ActivityUncheckedCreateWithoutDocumentationsInput>
    where?: ActivityWhereInput
  }

  export type ActivityUpdateToOneWithWhereWithoutDocumentationsInput = {
    where?: ActivityWhereInput
    data: XOR<ActivityUpdateWithoutDocumentationsInput, ActivityUncheckedUpdateWithoutDocumentationsInput>
  }

  export type ActivityUpdateWithoutDocumentationsInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    activityDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    filename?: NullableStringFieldUpdateOperationsInput | string | null
    filepath?: NullableStringFieldUpdateOperationsInput | string | null
    creator?: UserUpdateOneRequiredWithoutActivitiesCreatedNestedInput
    participants?: ActivityParticipationUpdateManyWithoutActivityNestedInput
  }

  export type ActivityUncheckedUpdateWithoutDocumentationsInput = {
    activityId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    activityDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    filename?: NullableStringFieldUpdateOperationsInput | string | null
    filepath?: NullableStringFieldUpdateOperationsInput | string | null
    participants?: ActivityParticipationUncheckedUpdateManyWithoutActivityNestedInput
  }

  export type ActivityCreateWithoutParticipantsInput = {
    title: string
    description?: string | null
    activityDate: Date | string
    createdAt?: Date | string
    isArchived?: boolean
    filename?: string | null
    filepath?: string | null
    creator: UserCreateNestedOneWithoutActivitiesCreatedInput
    documentations?: ActivityDocumentationCreateNestedManyWithoutActivityInput
  }

  export type ActivityUncheckedCreateWithoutParticipantsInput = {
    activityId?: number
    title: string
    description?: string | null
    activityDate: Date | string
    createdBy: number
    createdAt?: Date | string
    isArchived?: boolean
    filename?: string | null
    filepath?: string | null
    documentations?: ActivityDocumentationUncheckedCreateNestedManyWithoutActivityInput
  }

  export type ActivityCreateOrConnectWithoutParticipantsInput = {
    where: ActivityWhereUniqueInput
    create: XOR<ActivityCreateWithoutParticipantsInput, ActivityUncheckedCreateWithoutParticipantsInput>
  }

  export type BeneficiaryCreateWithoutActivityParticipationInput = {
    firstName: string
    middleName?: string | null
    lastName: string
    suffix?: string | null
    birthdate: Date | string
    age?: string | null
    sex: string
    job?: string | null
    barangay: string
    healthStation: string
    ageGroup: string
    subType?: string | null
    civilStatus: string
    contactNumber?: string | null
    isArchived?: boolean
    beneficiaryTypes?: BeneficiaryTypesCreateNestedManyWithoutBeneficiaryInput
  }

  export type BeneficiaryUncheckedCreateWithoutActivityParticipationInput = {
    beneficiaryId?: number
    firstName: string
    middleName?: string | null
    lastName: string
    suffix?: string | null
    birthdate: Date | string
    age?: string | null
    sex: string
    job?: string | null
    barangay: string
    healthStation: string
    ageGroup: string
    subType?: string | null
    civilStatus: string
    contactNumber?: string | null
    isArchived?: boolean
    beneficiaryTypes?: BeneficiaryTypesUncheckedCreateNestedManyWithoutBeneficiaryInput
  }

  export type BeneficiaryCreateOrConnectWithoutActivityParticipationInput = {
    where: BeneficiaryWhereUniqueInput
    create: XOR<BeneficiaryCreateWithoutActivityParticipationInput, BeneficiaryUncheckedCreateWithoutActivityParticipationInput>
  }

  export type ActivityUpsertWithoutParticipantsInput = {
    update: XOR<ActivityUpdateWithoutParticipantsInput, ActivityUncheckedUpdateWithoutParticipantsInput>
    create: XOR<ActivityCreateWithoutParticipantsInput, ActivityUncheckedCreateWithoutParticipantsInput>
    where?: ActivityWhereInput
  }

  export type ActivityUpdateToOneWithWhereWithoutParticipantsInput = {
    where?: ActivityWhereInput
    data: XOR<ActivityUpdateWithoutParticipantsInput, ActivityUncheckedUpdateWithoutParticipantsInput>
  }

  export type ActivityUpdateWithoutParticipantsInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    activityDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    filename?: NullableStringFieldUpdateOperationsInput | string | null
    filepath?: NullableStringFieldUpdateOperationsInput | string | null
    creator?: UserUpdateOneRequiredWithoutActivitiesCreatedNestedInput
    documentations?: ActivityDocumentationUpdateManyWithoutActivityNestedInput
  }

  export type ActivityUncheckedUpdateWithoutParticipantsInput = {
    activityId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    activityDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    filename?: NullableStringFieldUpdateOperationsInput | string | null
    filepath?: NullableStringFieldUpdateOperationsInput | string | null
    documentations?: ActivityDocumentationUncheckedUpdateManyWithoutActivityNestedInput
  }

  export type BeneficiaryUpsertWithoutActivityParticipationInput = {
    update: XOR<BeneficiaryUpdateWithoutActivityParticipationInput, BeneficiaryUncheckedUpdateWithoutActivityParticipationInput>
    create: XOR<BeneficiaryCreateWithoutActivityParticipationInput, BeneficiaryUncheckedCreateWithoutActivityParticipationInput>
    where?: BeneficiaryWhereInput
  }

  export type BeneficiaryUpdateToOneWithWhereWithoutActivityParticipationInput = {
    where?: BeneficiaryWhereInput
    data: XOR<BeneficiaryUpdateWithoutActivityParticipationInput, BeneficiaryUncheckedUpdateWithoutActivityParticipationInput>
  }

  export type BeneficiaryUpdateWithoutActivityParticipationInput = {
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: StringFieldUpdateOperationsInput | string
    suffix?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: DateTimeFieldUpdateOperationsInput | Date | string
    age?: NullableStringFieldUpdateOperationsInput | string | null
    sex?: StringFieldUpdateOperationsInput | string
    job?: NullableStringFieldUpdateOperationsInput | string | null
    barangay?: StringFieldUpdateOperationsInput | string
    healthStation?: StringFieldUpdateOperationsInput | string
    ageGroup?: StringFieldUpdateOperationsInput | string
    subType?: NullableStringFieldUpdateOperationsInput | string | null
    civilStatus?: StringFieldUpdateOperationsInput | string
    contactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    beneficiaryTypes?: BeneficiaryTypesUpdateManyWithoutBeneficiaryNestedInput
  }

  export type BeneficiaryUncheckedUpdateWithoutActivityParticipationInput = {
    beneficiaryId?: IntFieldUpdateOperationsInput | number
    firstName?: StringFieldUpdateOperationsInput | string
    middleName?: NullableStringFieldUpdateOperationsInput | string | null
    lastName?: StringFieldUpdateOperationsInput | string
    suffix?: NullableStringFieldUpdateOperationsInput | string | null
    birthdate?: DateTimeFieldUpdateOperationsInput | Date | string
    age?: NullableStringFieldUpdateOperationsInput | string | null
    sex?: StringFieldUpdateOperationsInput | string
    job?: NullableStringFieldUpdateOperationsInput | string | null
    barangay?: StringFieldUpdateOperationsInput | string
    healthStation?: StringFieldUpdateOperationsInput | string
    ageGroup?: StringFieldUpdateOperationsInput | string
    subType?: NullableStringFieldUpdateOperationsInput | string | null
    civilStatus?: StringFieldUpdateOperationsInput | string
    contactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    beneficiaryTypes?: BeneficiaryTypesUncheckedUpdateManyWithoutBeneficiaryNestedInput
  }

  export type FileAttachmentCreateWithoutReportInput = {
    filePath: string
    fileType: string
    fileName: string
    submission: SubmissionCreateNestedOneWithoutFilesInput
  }

  export type FileAttachmentUncheckedCreateWithoutReportInput = {
    fileId?: number
    submissionId: number
    filePath: string
    fileType: string
    fileName: string
  }

  export type FileAttachmentCreateOrConnectWithoutReportInput = {
    where: FileAttachmentWhereUniqueInput
    create: XOR<FileAttachmentCreateWithoutReportInput, FileAttachmentUncheckedCreateWithoutReportInput>
  }

  export type FileAttachmentCreateManyReportInputEnvelope = {
    data: FileAttachmentCreateManyReportInput | FileAttachmentCreateManyReportInput[]
    skipDuplicates?: boolean
  }

  export type FeedbackCreateWithoutReportInput = {
    content: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutFeedbacksInput
    submission?: SubmissionCreateNestedOneWithoutFeedbacksInput
  }

  export type FeedbackUncheckedCreateWithoutReportInput = {
    feedbackId?: number
    createdBy: number
    content: string
    createdAt?: Date | string
    submissionId?: number | null
  }

  export type FeedbackCreateOrConnectWithoutReportInput = {
    where: FeedbackWhereUniqueInput
    create: XOR<FeedbackCreateWithoutReportInput, FeedbackUncheckedCreateWithoutReportInput>
  }

  export type FeedbackCreateManyReportInputEnvelope = {
    data: FeedbackCreateManyReportInput | FeedbackCreateManyReportInput[]
    skipDuplicates?: boolean
  }

  export type SubmissionCreateWithoutReportInput = {
    status?: string
    submissionDate?: Date | string
    files?: FileAttachmentCreateNestedManyWithoutSubmissionInput
    feedbacks?: FeedbackCreateNestedManyWithoutSubmissionInput
    user: UserCreateNestedOneWithoutSubmissionsInput
  }

  export type SubmissionUncheckedCreateWithoutReportInput = {
    submissionId?: number
    userId: number
    status?: string
    submissionDate?: Date | string
    files?: FileAttachmentUncheckedCreateNestedManyWithoutSubmissionInput
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutSubmissionInput
  }

  export type SubmissionCreateOrConnectWithoutReportInput = {
    where: SubmissionWhereUniqueInput
    create: XOR<SubmissionCreateWithoutReportInput, SubmissionUncheckedCreateWithoutReportInput>
  }

  export type SubmissionCreateManyReportInputEnvelope = {
    data: SubmissionCreateManyReportInput | SubmissionCreateManyReportInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutReportsInput = {
    username: string
    password: string
    firstName: string
    lastName: string
    role: string
    sex?: string
    barangay?: string
    isArchived?: boolean
    activitiesCreated?: ActivityCreateNestedManyWithoutCreatorInput
    feedbacks?: FeedbackCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    events?: EventCreateNestedManyWithoutUserInput
    submissions?: SubmissionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutReportsInput = {
    user_id?: number
    username: string
    password: string
    firstName: string
    lastName: string
    role: string
    sex?: string
    barangay?: string
    isArchived?: boolean
    activitiesCreated?: ActivityUncheckedCreateNestedManyWithoutCreatorInput
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    events?: EventUncheckedCreateNestedManyWithoutUserInput
    submissions?: SubmissionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutReportsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReportsInput, UserUncheckedCreateWithoutReportsInput>
  }

  export type FileAttachmentUpsertWithWhereUniqueWithoutReportInput = {
    where: FileAttachmentWhereUniqueInput
    update: XOR<FileAttachmentUpdateWithoutReportInput, FileAttachmentUncheckedUpdateWithoutReportInput>
    create: XOR<FileAttachmentCreateWithoutReportInput, FileAttachmentUncheckedCreateWithoutReportInput>
  }

  export type FileAttachmentUpdateWithWhereUniqueWithoutReportInput = {
    where: FileAttachmentWhereUniqueInput
    data: XOR<FileAttachmentUpdateWithoutReportInput, FileAttachmentUncheckedUpdateWithoutReportInput>
  }

  export type FileAttachmentUpdateManyWithWhereWithoutReportInput = {
    where: FileAttachmentScalarWhereInput
    data: XOR<FileAttachmentUpdateManyMutationInput, FileAttachmentUncheckedUpdateManyWithoutReportInput>
  }

  export type FileAttachmentScalarWhereInput = {
    AND?: FileAttachmentScalarWhereInput | FileAttachmentScalarWhereInput[]
    OR?: FileAttachmentScalarWhereInput[]
    NOT?: FileAttachmentScalarWhereInput | FileAttachmentScalarWhereInput[]
    fileId?: IntFilter<"FileAttachment"> | number
    reportId?: IntFilter<"FileAttachment"> | number
    submissionId?: IntFilter<"FileAttachment"> | number
    filePath?: StringFilter<"FileAttachment"> | string
    fileType?: StringFilter<"FileAttachment"> | string
    fileName?: StringFilter<"FileAttachment"> | string
  }

  export type FeedbackUpsertWithWhereUniqueWithoutReportInput = {
    where: FeedbackWhereUniqueInput
    update: XOR<FeedbackUpdateWithoutReportInput, FeedbackUncheckedUpdateWithoutReportInput>
    create: XOR<FeedbackCreateWithoutReportInput, FeedbackUncheckedCreateWithoutReportInput>
  }

  export type FeedbackUpdateWithWhereUniqueWithoutReportInput = {
    where: FeedbackWhereUniqueInput
    data: XOR<FeedbackUpdateWithoutReportInput, FeedbackUncheckedUpdateWithoutReportInput>
  }

  export type FeedbackUpdateManyWithWhereWithoutReportInput = {
    where: FeedbackScalarWhereInput
    data: XOR<FeedbackUpdateManyMutationInput, FeedbackUncheckedUpdateManyWithoutReportInput>
  }

  export type SubmissionUpsertWithWhereUniqueWithoutReportInput = {
    where: SubmissionWhereUniqueInput
    update: XOR<SubmissionUpdateWithoutReportInput, SubmissionUncheckedUpdateWithoutReportInput>
    create: XOR<SubmissionCreateWithoutReportInput, SubmissionUncheckedCreateWithoutReportInput>
  }

  export type SubmissionUpdateWithWhereUniqueWithoutReportInput = {
    where: SubmissionWhereUniqueInput
    data: XOR<SubmissionUpdateWithoutReportInput, SubmissionUncheckedUpdateWithoutReportInput>
  }

  export type SubmissionUpdateManyWithWhereWithoutReportInput = {
    where: SubmissionScalarWhereInput
    data: XOR<SubmissionUpdateManyMutationInput, SubmissionUncheckedUpdateManyWithoutReportInput>
  }

  export type UserUpsertWithoutReportsInput = {
    update: XOR<UserUpdateWithoutReportsInput, UserUncheckedUpdateWithoutReportsInput>
    create: XOR<UserCreateWithoutReportsInput, UserUncheckedCreateWithoutReportsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutReportsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutReportsInput, UserUncheckedUpdateWithoutReportsInput>
  }

  export type UserUpdateWithoutReportsInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    sex?: StringFieldUpdateOperationsInput | string
    barangay?: StringFieldUpdateOperationsInput | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    activitiesCreated?: ActivityUpdateManyWithoutCreatorNestedInput
    feedbacks?: FeedbackUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    events?: EventUpdateManyWithoutUserNestedInput
    submissions?: SubmissionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutReportsInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    sex?: StringFieldUpdateOperationsInput | string
    barangay?: StringFieldUpdateOperationsInput | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    activitiesCreated?: ActivityUncheckedUpdateManyWithoutCreatorNestedInput
    feedbacks?: FeedbackUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    events?: EventUncheckedUpdateManyWithoutUserNestedInput
    submissions?: SubmissionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ReportCreateWithoutFilesInput = {
    type: string
    month: string
    year: number
    dueDate: Date | string
    isArchived?: boolean
    feedbacks?: FeedbackCreateNestedManyWithoutReportInput
    submissions?: SubmissionCreateNestedManyWithoutReportInput
    user: UserCreateNestedOneWithoutReportsInput
  }

  export type ReportUncheckedCreateWithoutFilesInput = {
    reportId?: number
    type: string
    month: string
    year: number
    userId: number
    dueDate: Date | string
    isArchived?: boolean
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutReportInput
    submissions?: SubmissionUncheckedCreateNestedManyWithoutReportInput
  }

  export type ReportCreateOrConnectWithoutFilesInput = {
    where: ReportWhereUniqueInput
    create: XOR<ReportCreateWithoutFilesInput, ReportUncheckedCreateWithoutFilesInput>
  }

  export type SubmissionCreateWithoutFilesInput = {
    status?: string
    submissionDate?: Date | string
    feedbacks?: FeedbackCreateNestedManyWithoutSubmissionInput
    report: ReportCreateNestedOneWithoutSubmissionsInput
    user: UserCreateNestedOneWithoutSubmissionsInput
  }

  export type SubmissionUncheckedCreateWithoutFilesInput = {
    submissionId?: number
    reportId: number
    userId: number
    status?: string
    submissionDate?: Date | string
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutSubmissionInput
  }

  export type SubmissionCreateOrConnectWithoutFilesInput = {
    where: SubmissionWhereUniqueInput
    create: XOR<SubmissionCreateWithoutFilesInput, SubmissionUncheckedCreateWithoutFilesInput>
  }

  export type ReportUpsertWithoutFilesInput = {
    update: XOR<ReportUpdateWithoutFilesInput, ReportUncheckedUpdateWithoutFilesInput>
    create: XOR<ReportCreateWithoutFilesInput, ReportUncheckedCreateWithoutFilesInput>
    where?: ReportWhereInput
  }

  export type ReportUpdateToOneWithWhereWithoutFilesInput = {
    where?: ReportWhereInput
    data: XOR<ReportUpdateWithoutFilesInput, ReportUncheckedUpdateWithoutFilesInput>
  }

  export type ReportUpdateWithoutFilesInput = {
    type?: StringFieldUpdateOperationsInput | string
    month?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    feedbacks?: FeedbackUpdateManyWithoutReportNestedInput
    submissions?: SubmissionUpdateManyWithoutReportNestedInput
    user?: UserUpdateOneRequiredWithoutReportsNestedInput
  }

  export type ReportUncheckedUpdateWithoutFilesInput = {
    reportId?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    month?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    feedbacks?: FeedbackUncheckedUpdateManyWithoutReportNestedInput
    submissions?: SubmissionUncheckedUpdateManyWithoutReportNestedInput
  }

  export type SubmissionUpsertWithoutFilesInput = {
    update: XOR<SubmissionUpdateWithoutFilesInput, SubmissionUncheckedUpdateWithoutFilesInput>
    create: XOR<SubmissionCreateWithoutFilesInput, SubmissionUncheckedCreateWithoutFilesInput>
    where?: SubmissionWhereInput
  }

  export type SubmissionUpdateToOneWithWhereWithoutFilesInput = {
    where?: SubmissionWhereInput
    data: XOR<SubmissionUpdateWithoutFilesInput, SubmissionUncheckedUpdateWithoutFilesInput>
  }

  export type SubmissionUpdateWithoutFilesInput = {
    status?: StringFieldUpdateOperationsInput | string
    submissionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    feedbacks?: FeedbackUpdateManyWithoutSubmissionNestedInput
    report?: ReportUpdateOneRequiredWithoutSubmissionsNestedInput
    user?: UserUpdateOneRequiredWithoutSubmissionsNestedInput
  }

  export type SubmissionUncheckedUpdateWithoutFilesInput = {
    submissionId?: IntFieldUpdateOperationsInput | number
    reportId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    submissionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    feedbacks?: FeedbackUncheckedUpdateManyWithoutSubmissionNestedInput
  }

  export type ReportCreateWithoutFeedbacksInput = {
    type: string
    month: string
    year: number
    dueDate: Date | string
    isArchived?: boolean
    files?: FileAttachmentCreateNestedManyWithoutReportInput
    submissions?: SubmissionCreateNestedManyWithoutReportInput
    user: UserCreateNestedOneWithoutReportsInput
  }

  export type ReportUncheckedCreateWithoutFeedbacksInput = {
    reportId?: number
    type: string
    month: string
    year: number
    userId: number
    dueDate: Date | string
    isArchived?: boolean
    files?: FileAttachmentUncheckedCreateNestedManyWithoutReportInput
    submissions?: SubmissionUncheckedCreateNestedManyWithoutReportInput
  }

  export type ReportCreateOrConnectWithoutFeedbacksInput = {
    where: ReportWhereUniqueInput
    create: XOR<ReportCreateWithoutFeedbacksInput, ReportUncheckedCreateWithoutFeedbacksInput>
  }

  export type UserCreateWithoutFeedbacksInput = {
    username: string
    password: string
    firstName: string
    lastName: string
    role: string
    sex?: string
    barangay?: string
    isArchived?: boolean
    activitiesCreated?: ActivityCreateNestedManyWithoutCreatorInput
    reports?: ReportCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    events?: EventCreateNestedManyWithoutUserInput
    submissions?: SubmissionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutFeedbacksInput = {
    user_id?: number
    username: string
    password: string
    firstName: string
    lastName: string
    role: string
    sex?: string
    barangay?: string
    isArchived?: boolean
    activitiesCreated?: ActivityUncheckedCreateNestedManyWithoutCreatorInput
    reports?: ReportUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    events?: EventUncheckedCreateNestedManyWithoutUserInput
    submissions?: SubmissionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutFeedbacksInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFeedbacksInput, UserUncheckedCreateWithoutFeedbacksInput>
  }

  export type SubmissionCreateWithoutFeedbacksInput = {
    status?: string
    submissionDate?: Date | string
    files?: FileAttachmentCreateNestedManyWithoutSubmissionInput
    report: ReportCreateNestedOneWithoutSubmissionsInput
    user: UserCreateNestedOneWithoutSubmissionsInput
  }

  export type SubmissionUncheckedCreateWithoutFeedbacksInput = {
    submissionId?: number
    reportId: number
    userId: number
    status?: string
    submissionDate?: Date | string
    files?: FileAttachmentUncheckedCreateNestedManyWithoutSubmissionInput
  }

  export type SubmissionCreateOrConnectWithoutFeedbacksInput = {
    where: SubmissionWhereUniqueInput
    create: XOR<SubmissionCreateWithoutFeedbacksInput, SubmissionUncheckedCreateWithoutFeedbacksInput>
  }

  export type ReportUpsertWithoutFeedbacksInput = {
    update: XOR<ReportUpdateWithoutFeedbacksInput, ReportUncheckedUpdateWithoutFeedbacksInput>
    create: XOR<ReportCreateWithoutFeedbacksInput, ReportUncheckedCreateWithoutFeedbacksInput>
    where?: ReportWhereInput
  }

  export type ReportUpdateToOneWithWhereWithoutFeedbacksInput = {
    where?: ReportWhereInput
    data: XOR<ReportUpdateWithoutFeedbacksInput, ReportUncheckedUpdateWithoutFeedbacksInput>
  }

  export type ReportUpdateWithoutFeedbacksInput = {
    type?: StringFieldUpdateOperationsInput | string
    month?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    files?: FileAttachmentUpdateManyWithoutReportNestedInput
    submissions?: SubmissionUpdateManyWithoutReportNestedInput
    user?: UserUpdateOneRequiredWithoutReportsNestedInput
  }

  export type ReportUncheckedUpdateWithoutFeedbacksInput = {
    reportId?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    month?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    files?: FileAttachmentUncheckedUpdateManyWithoutReportNestedInput
    submissions?: SubmissionUncheckedUpdateManyWithoutReportNestedInput
  }

  export type UserUpsertWithoutFeedbacksInput = {
    update: XOR<UserUpdateWithoutFeedbacksInput, UserUncheckedUpdateWithoutFeedbacksInput>
    create: XOR<UserCreateWithoutFeedbacksInput, UserUncheckedCreateWithoutFeedbacksInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutFeedbacksInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutFeedbacksInput, UserUncheckedUpdateWithoutFeedbacksInput>
  }

  export type UserUpdateWithoutFeedbacksInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    sex?: StringFieldUpdateOperationsInput | string
    barangay?: StringFieldUpdateOperationsInput | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    activitiesCreated?: ActivityUpdateManyWithoutCreatorNestedInput
    reports?: ReportUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    events?: EventUpdateManyWithoutUserNestedInput
    submissions?: SubmissionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutFeedbacksInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    sex?: StringFieldUpdateOperationsInput | string
    barangay?: StringFieldUpdateOperationsInput | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    activitiesCreated?: ActivityUncheckedUpdateManyWithoutCreatorNestedInput
    reports?: ReportUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    events?: EventUncheckedUpdateManyWithoutUserNestedInput
    submissions?: SubmissionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type SubmissionUpsertWithoutFeedbacksInput = {
    update: XOR<SubmissionUpdateWithoutFeedbacksInput, SubmissionUncheckedUpdateWithoutFeedbacksInput>
    create: XOR<SubmissionCreateWithoutFeedbacksInput, SubmissionUncheckedCreateWithoutFeedbacksInput>
    where?: SubmissionWhereInput
  }

  export type SubmissionUpdateToOneWithWhereWithoutFeedbacksInput = {
    where?: SubmissionWhereInput
    data: XOR<SubmissionUpdateWithoutFeedbacksInput, SubmissionUncheckedUpdateWithoutFeedbacksInput>
  }

  export type SubmissionUpdateWithoutFeedbacksInput = {
    status?: StringFieldUpdateOperationsInput | string
    submissionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    files?: FileAttachmentUpdateManyWithoutSubmissionNestedInput
    report?: ReportUpdateOneRequiredWithoutSubmissionsNestedInput
    user?: UserUpdateOneRequiredWithoutSubmissionsNestedInput
  }

  export type SubmissionUncheckedUpdateWithoutFeedbacksInput = {
    submissionId?: IntFieldUpdateOperationsInput | number
    reportId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    submissionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    files?: FileAttachmentUncheckedUpdateManyWithoutSubmissionNestedInput
  }

  export type FileAttachmentCreateWithoutSubmissionInput = {
    filePath: string
    fileType: string
    fileName: string
    report: ReportCreateNestedOneWithoutFilesInput
  }

  export type FileAttachmentUncheckedCreateWithoutSubmissionInput = {
    fileId?: number
    reportId: number
    filePath: string
    fileType: string
    fileName: string
  }

  export type FileAttachmentCreateOrConnectWithoutSubmissionInput = {
    where: FileAttachmentWhereUniqueInput
    create: XOR<FileAttachmentCreateWithoutSubmissionInput, FileAttachmentUncheckedCreateWithoutSubmissionInput>
  }

  export type FileAttachmentCreateManySubmissionInputEnvelope = {
    data: FileAttachmentCreateManySubmissionInput | FileAttachmentCreateManySubmissionInput[]
    skipDuplicates?: boolean
  }

  export type FeedbackCreateWithoutSubmissionInput = {
    content: string
    createdAt?: Date | string
    report: ReportCreateNestedOneWithoutFeedbacksInput
    user: UserCreateNestedOneWithoutFeedbacksInput
  }

  export type FeedbackUncheckedCreateWithoutSubmissionInput = {
    feedbackId?: number
    reportId: number
    createdBy: number
    content: string
    createdAt?: Date | string
  }

  export type FeedbackCreateOrConnectWithoutSubmissionInput = {
    where: FeedbackWhereUniqueInput
    create: XOR<FeedbackCreateWithoutSubmissionInput, FeedbackUncheckedCreateWithoutSubmissionInput>
  }

  export type FeedbackCreateManySubmissionInputEnvelope = {
    data: FeedbackCreateManySubmissionInput | FeedbackCreateManySubmissionInput[]
    skipDuplicates?: boolean
  }

  export type ReportCreateWithoutSubmissionsInput = {
    type: string
    month: string
    year: number
    dueDate: Date | string
    isArchived?: boolean
    files?: FileAttachmentCreateNestedManyWithoutReportInput
    feedbacks?: FeedbackCreateNestedManyWithoutReportInput
    user: UserCreateNestedOneWithoutReportsInput
  }

  export type ReportUncheckedCreateWithoutSubmissionsInput = {
    reportId?: number
    type: string
    month: string
    year: number
    userId: number
    dueDate: Date | string
    isArchived?: boolean
    files?: FileAttachmentUncheckedCreateNestedManyWithoutReportInput
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutReportInput
  }

  export type ReportCreateOrConnectWithoutSubmissionsInput = {
    where: ReportWhereUniqueInput
    create: XOR<ReportCreateWithoutSubmissionsInput, ReportUncheckedCreateWithoutSubmissionsInput>
  }

  export type UserCreateWithoutSubmissionsInput = {
    username: string
    password: string
    firstName: string
    lastName: string
    role: string
    sex?: string
    barangay?: string
    isArchived?: boolean
    activitiesCreated?: ActivityCreateNestedManyWithoutCreatorInput
    reports?: ReportCreateNestedManyWithoutUserInput
    feedbacks?: FeedbackCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    events?: EventCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSubmissionsInput = {
    user_id?: number
    username: string
    password: string
    firstName: string
    lastName: string
    role: string
    sex?: string
    barangay?: string
    isArchived?: boolean
    activitiesCreated?: ActivityUncheckedCreateNestedManyWithoutCreatorInput
    reports?: ReportUncheckedCreateNestedManyWithoutUserInput
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    events?: EventUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSubmissionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSubmissionsInput, UserUncheckedCreateWithoutSubmissionsInput>
  }

  export type FileAttachmentUpsertWithWhereUniqueWithoutSubmissionInput = {
    where: FileAttachmentWhereUniqueInput
    update: XOR<FileAttachmentUpdateWithoutSubmissionInput, FileAttachmentUncheckedUpdateWithoutSubmissionInput>
    create: XOR<FileAttachmentCreateWithoutSubmissionInput, FileAttachmentUncheckedCreateWithoutSubmissionInput>
  }

  export type FileAttachmentUpdateWithWhereUniqueWithoutSubmissionInput = {
    where: FileAttachmentWhereUniqueInput
    data: XOR<FileAttachmentUpdateWithoutSubmissionInput, FileAttachmentUncheckedUpdateWithoutSubmissionInput>
  }

  export type FileAttachmentUpdateManyWithWhereWithoutSubmissionInput = {
    where: FileAttachmentScalarWhereInput
    data: XOR<FileAttachmentUpdateManyMutationInput, FileAttachmentUncheckedUpdateManyWithoutSubmissionInput>
  }

  export type FeedbackUpsertWithWhereUniqueWithoutSubmissionInput = {
    where: FeedbackWhereUniqueInput
    update: XOR<FeedbackUpdateWithoutSubmissionInput, FeedbackUncheckedUpdateWithoutSubmissionInput>
    create: XOR<FeedbackCreateWithoutSubmissionInput, FeedbackUncheckedCreateWithoutSubmissionInput>
  }

  export type FeedbackUpdateWithWhereUniqueWithoutSubmissionInput = {
    where: FeedbackWhereUniqueInput
    data: XOR<FeedbackUpdateWithoutSubmissionInput, FeedbackUncheckedUpdateWithoutSubmissionInput>
  }

  export type FeedbackUpdateManyWithWhereWithoutSubmissionInput = {
    where: FeedbackScalarWhereInput
    data: XOR<FeedbackUpdateManyMutationInput, FeedbackUncheckedUpdateManyWithoutSubmissionInput>
  }

  export type ReportUpsertWithoutSubmissionsInput = {
    update: XOR<ReportUpdateWithoutSubmissionsInput, ReportUncheckedUpdateWithoutSubmissionsInput>
    create: XOR<ReportCreateWithoutSubmissionsInput, ReportUncheckedCreateWithoutSubmissionsInput>
    where?: ReportWhereInput
  }

  export type ReportUpdateToOneWithWhereWithoutSubmissionsInput = {
    where?: ReportWhereInput
    data: XOR<ReportUpdateWithoutSubmissionsInput, ReportUncheckedUpdateWithoutSubmissionsInput>
  }

  export type ReportUpdateWithoutSubmissionsInput = {
    type?: StringFieldUpdateOperationsInput | string
    month?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    files?: FileAttachmentUpdateManyWithoutReportNestedInput
    feedbacks?: FeedbackUpdateManyWithoutReportNestedInput
    user?: UserUpdateOneRequiredWithoutReportsNestedInput
  }

  export type ReportUncheckedUpdateWithoutSubmissionsInput = {
    reportId?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    month?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    files?: FileAttachmentUncheckedUpdateManyWithoutReportNestedInput
    feedbacks?: FeedbackUncheckedUpdateManyWithoutReportNestedInput
  }

  export type UserUpsertWithoutSubmissionsInput = {
    update: XOR<UserUpdateWithoutSubmissionsInput, UserUncheckedUpdateWithoutSubmissionsInput>
    create: XOR<UserCreateWithoutSubmissionsInput, UserUncheckedCreateWithoutSubmissionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSubmissionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSubmissionsInput, UserUncheckedUpdateWithoutSubmissionsInput>
  }

  export type UserUpdateWithoutSubmissionsInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    sex?: StringFieldUpdateOperationsInput | string
    barangay?: StringFieldUpdateOperationsInput | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    activitiesCreated?: ActivityUpdateManyWithoutCreatorNestedInput
    reports?: ReportUpdateManyWithoutUserNestedInput
    feedbacks?: FeedbackUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    events?: EventUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSubmissionsInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    sex?: StringFieldUpdateOperationsInput | string
    barangay?: StringFieldUpdateOperationsInput | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    activitiesCreated?: ActivityUncheckedUpdateManyWithoutCreatorNestedInput
    reports?: ReportUncheckedUpdateManyWithoutUserNestedInput
    feedbacks?: FeedbackUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    events?: EventUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutNotificationsInput = {
    username: string
    password: string
    firstName: string
    lastName: string
    role: string
    sex?: string
    barangay?: string
    isArchived?: boolean
    activitiesCreated?: ActivityCreateNestedManyWithoutCreatorInput
    reports?: ReportCreateNestedManyWithoutUserInput
    feedbacks?: FeedbackCreateNestedManyWithoutUserInput
    events?: EventCreateNestedManyWithoutUserInput
    submissions?: SubmissionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutNotificationsInput = {
    user_id?: number
    username: string
    password: string
    firstName: string
    lastName: string
    role: string
    sex?: string
    barangay?: string
    isArchived?: boolean
    activitiesCreated?: ActivityUncheckedCreateNestedManyWithoutCreatorInput
    reports?: ReportUncheckedCreateNestedManyWithoutUserInput
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutUserInput
    events?: EventUncheckedCreateNestedManyWithoutUserInput
    submissions?: SubmissionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutNotificationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
  }

  export type UserUpsertWithoutNotificationsInput = {
    update: XOR<UserUpdateWithoutNotificationsInput, UserUncheckedUpdateWithoutNotificationsInput>
    create: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutNotificationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutNotificationsInput, UserUncheckedUpdateWithoutNotificationsInput>
  }

  export type UserUpdateWithoutNotificationsInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    sex?: StringFieldUpdateOperationsInput | string
    barangay?: StringFieldUpdateOperationsInput | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    activitiesCreated?: ActivityUpdateManyWithoutCreatorNestedInput
    reports?: ReportUpdateManyWithoutUserNestedInput
    feedbacks?: FeedbackUpdateManyWithoutUserNestedInput
    events?: EventUpdateManyWithoutUserNestedInput
    submissions?: SubmissionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutNotificationsInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    sex?: StringFieldUpdateOperationsInput | string
    barangay?: StringFieldUpdateOperationsInput | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    activitiesCreated?: ActivityUncheckedUpdateManyWithoutCreatorNestedInput
    reports?: ReportUncheckedUpdateManyWithoutUserNestedInput
    feedbacks?: FeedbackUncheckedUpdateManyWithoutUserNestedInput
    events?: EventUncheckedUpdateManyWithoutUserNestedInput
    submissions?: SubmissionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutEventsInput = {
    username: string
    password: string
    firstName: string
    lastName: string
    role: string
    sex?: string
    barangay?: string
    isArchived?: boolean
    activitiesCreated?: ActivityCreateNestedManyWithoutCreatorInput
    reports?: ReportCreateNestedManyWithoutUserInput
    feedbacks?: FeedbackCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    submissions?: SubmissionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutEventsInput = {
    user_id?: number
    username: string
    password: string
    firstName: string
    lastName: string
    role: string
    sex?: string
    barangay?: string
    isArchived?: boolean
    activitiesCreated?: ActivityUncheckedCreateNestedManyWithoutCreatorInput
    reports?: ReportUncheckedCreateNestedManyWithoutUserInput
    feedbacks?: FeedbackUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    submissions?: SubmissionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutEventsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutEventsInput, UserUncheckedCreateWithoutEventsInput>
  }

  export type UserUpsertWithoutEventsInput = {
    update: XOR<UserUpdateWithoutEventsInput, UserUncheckedUpdateWithoutEventsInput>
    create: XOR<UserCreateWithoutEventsInput, UserUncheckedCreateWithoutEventsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutEventsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutEventsInput, UserUncheckedUpdateWithoutEventsInput>
  }

  export type UserUpdateWithoutEventsInput = {
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    sex?: StringFieldUpdateOperationsInput | string
    barangay?: StringFieldUpdateOperationsInput | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    activitiesCreated?: ActivityUpdateManyWithoutCreatorNestedInput
    reports?: ReportUpdateManyWithoutUserNestedInput
    feedbacks?: FeedbackUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    submissions?: SubmissionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutEventsInput = {
    user_id?: IntFieldUpdateOperationsInput | number
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    sex?: StringFieldUpdateOperationsInput | string
    barangay?: StringFieldUpdateOperationsInput | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    activitiesCreated?: ActivityUncheckedUpdateManyWithoutCreatorNestedInput
    reports?: ReportUncheckedUpdateManyWithoutUserNestedInput
    feedbacks?: FeedbackUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    submissions?: SubmissionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ActivityCreateManyCreatorInput = {
    activityId?: number
    title: string
    description?: string | null
    activityDate: Date | string
    createdAt?: Date | string
    isArchived?: boolean
    filename?: string | null
    filepath?: string | null
  }

  export type ReportCreateManyUserInput = {
    reportId?: number
    type: string
    month: string
    year: number
    dueDate: Date | string
    isArchived?: boolean
  }

  export type FeedbackCreateManyUserInput = {
    feedbackId?: number
    reportId: number
    content: string
    createdAt?: Date | string
    submissionId?: number | null
  }

  export type NotificationCreateManyUserInput = {
    id?: number
    title: string
    message: string
    createdAt?: Date | string
    read?: boolean
    type: string
  }

  export type EventCreateManyUserInput = {
    eventId?: number
    title: string
    start: Date | string
    end: Date | string
    allDay: boolean
    createdAt?: Date | string
    isArchived?: boolean
  }

  export type SubmissionCreateManyUserInput = {
    submissionId?: number
    reportId: number
    status?: string
    submissionDate?: Date | string
  }

  export type ActivityUpdateWithoutCreatorInput = {
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    activityDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    filename?: NullableStringFieldUpdateOperationsInput | string | null
    filepath?: NullableStringFieldUpdateOperationsInput | string | null
    participants?: ActivityParticipationUpdateManyWithoutActivityNestedInput
    documentations?: ActivityDocumentationUpdateManyWithoutActivityNestedInput
  }

  export type ActivityUncheckedUpdateWithoutCreatorInput = {
    activityId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    activityDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    filename?: NullableStringFieldUpdateOperationsInput | string | null
    filepath?: NullableStringFieldUpdateOperationsInput | string | null
    participants?: ActivityParticipationUncheckedUpdateManyWithoutActivityNestedInput
    documentations?: ActivityDocumentationUncheckedUpdateManyWithoutActivityNestedInput
  }

  export type ActivityUncheckedUpdateManyWithoutCreatorInput = {
    activityId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    activityDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    filename?: NullableStringFieldUpdateOperationsInput | string | null
    filepath?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ReportUpdateWithoutUserInput = {
    type?: StringFieldUpdateOperationsInput | string
    month?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    files?: FileAttachmentUpdateManyWithoutReportNestedInput
    feedbacks?: FeedbackUpdateManyWithoutReportNestedInput
    submissions?: SubmissionUpdateManyWithoutReportNestedInput
  }

  export type ReportUncheckedUpdateWithoutUserInput = {
    reportId?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    month?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    files?: FileAttachmentUncheckedUpdateManyWithoutReportNestedInput
    feedbacks?: FeedbackUncheckedUpdateManyWithoutReportNestedInput
    submissions?: SubmissionUncheckedUpdateManyWithoutReportNestedInput
  }

  export type ReportUncheckedUpdateManyWithoutUserInput = {
    reportId?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    month?: StringFieldUpdateOperationsInput | string
    year?: IntFieldUpdateOperationsInput | number
    dueDate?: DateTimeFieldUpdateOperationsInput | Date | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
  }

  export type FeedbackUpdateWithoutUserInput = {
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    report?: ReportUpdateOneRequiredWithoutFeedbacksNestedInput
    submission?: SubmissionUpdateOneWithoutFeedbacksNestedInput
  }

  export type FeedbackUncheckedUpdateWithoutUserInput = {
    feedbackId?: IntFieldUpdateOperationsInput | number
    reportId?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submissionId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type FeedbackUncheckedUpdateManyWithoutUserInput = {
    feedbackId?: IntFieldUpdateOperationsInput | number
    reportId?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submissionId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type NotificationUpdateWithoutUserInput = {
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    read?: BoolFieldUpdateOperationsInput | boolean
    type?: StringFieldUpdateOperationsInput | string
  }

  export type NotificationUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    read?: BoolFieldUpdateOperationsInput | boolean
    type?: StringFieldUpdateOperationsInput | string
  }

  export type NotificationUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    read?: BoolFieldUpdateOperationsInput | boolean
    type?: StringFieldUpdateOperationsInput | string
  }

  export type EventUpdateWithoutUserInput = {
    title?: StringFieldUpdateOperationsInput | string
    start?: DateTimeFieldUpdateOperationsInput | Date | string
    end?: DateTimeFieldUpdateOperationsInput | Date | string
    allDay?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
  }

  export type EventUncheckedUpdateWithoutUserInput = {
    eventId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    start?: DateTimeFieldUpdateOperationsInput | Date | string
    end?: DateTimeFieldUpdateOperationsInput | Date | string
    allDay?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
  }

  export type EventUncheckedUpdateManyWithoutUserInput = {
    eventId?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    start?: DateTimeFieldUpdateOperationsInput | Date | string
    end?: DateTimeFieldUpdateOperationsInput | Date | string
    allDay?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
  }

  export type SubmissionUpdateWithoutUserInput = {
    status?: StringFieldUpdateOperationsInput | string
    submissionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    files?: FileAttachmentUpdateManyWithoutSubmissionNestedInput
    feedbacks?: FeedbackUpdateManyWithoutSubmissionNestedInput
    report?: ReportUpdateOneRequiredWithoutSubmissionsNestedInput
  }

  export type SubmissionUncheckedUpdateWithoutUserInput = {
    submissionId?: IntFieldUpdateOperationsInput | number
    reportId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    submissionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    files?: FileAttachmentUncheckedUpdateManyWithoutSubmissionNestedInput
    feedbacks?: FeedbackUncheckedUpdateManyWithoutSubmissionNestedInput
  }

  export type SubmissionUncheckedUpdateManyWithoutUserInput = {
    submissionId?: IntFieldUpdateOperationsInput | number
    reportId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    submissionDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActivityParticipationCreateManyBeneficiaryInput = {
    activityId: number
    attended?: boolean
    beneficiaryFirstName: string
    beneficiaryMiddleName?: string | null
    beneficiaryLastName: string
    beneficiarySuffix?: string | null
    beneficiaryBirthdate: Date | string
    beneficiarySex: string
    beneficiaryJob?: string | null
    beneficiaryBarangay: string
    beneficiaryHealthStation: string
    beneficiaryPrimaryType: string
    beneficiaryCivilStatus: string
    beneficiaryContactNumber?: string | null
    beneficiaryTypes: string
    isArchived?: boolean
  }

  export type BeneficiaryTypesCreateManyBeneficiaryInput = {
    typeId: number
  }

  export type ActivityParticipationUpdateWithoutBeneficiaryInput = {
    attended?: BoolFieldUpdateOperationsInput | boolean
    beneficiaryFirstName?: StringFieldUpdateOperationsInput | string
    beneficiaryMiddleName?: NullableStringFieldUpdateOperationsInput | string | null
    beneficiaryLastName?: StringFieldUpdateOperationsInput | string
    beneficiarySuffix?: NullableStringFieldUpdateOperationsInput | string | null
    beneficiaryBirthdate?: DateTimeFieldUpdateOperationsInput | Date | string
    beneficiarySex?: StringFieldUpdateOperationsInput | string
    beneficiaryJob?: NullableStringFieldUpdateOperationsInput | string | null
    beneficiaryBarangay?: StringFieldUpdateOperationsInput | string
    beneficiaryHealthStation?: StringFieldUpdateOperationsInput | string
    beneficiaryPrimaryType?: StringFieldUpdateOperationsInput | string
    beneficiaryCivilStatus?: StringFieldUpdateOperationsInput | string
    beneficiaryContactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    beneficiaryTypes?: StringFieldUpdateOperationsInput | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    activity?: ActivityUpdateOneRequiredWithoutParticipantsNestedInput
  }

  export type ActivityParticipationUncheckedUpdateWithoutBeneficiaryInput = {
    activityId?: IntFieldUpdateOperationsInput | number
    attended?: BoolFieldUpdateOperationsInput | boolean
    beneficiaryFirstName?: StringFieldUpdateOperationsInput | string
    beneficiaryMiddleName?: NullableStringFieldUpdateOperationsInput | string | null
    beneficiaryLastName?: StringFieldUpdateOperationsInput | string
    beneficiarySuffix?: NullableStringFieldUpdateOperationsInput | string | null
    beneficiaryBirthdate?: DateTimeFieldUpdateOperationsInput | Date | string
    beneficiarySex?: StringFieldUpdateOperationsInput | string
    beneficiaryJob?: NullableStringFieldUpdateOperationsInput | string | null
    beneficiaryBarangay?: StringFieldUpdateOperationsInput | string
    beneficiaryHealthStation?: StringFieldUpdateOperationsInput | string
    beneficiaryPrimaryType?: StringFieldUpdateOperationsInput | string
    beneficiaryCivilStatus?: StringFieldUpdateOperationsInput | string
    beneficiaryContactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    beneficiaryTypes?: StringFieldUpdateOperationsInput | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ActivityParticipationUncheckedUpdateManyWithoutBeneficiaryInput = {
    activityId?: IntFieldUpdateOperationsInput | number
    attended?: BoolFieldUpdateOperationsInput | boolean
    beneficiaryFirstName?: StringFieldUpdateOperationsInput | string
    beneficiaryMiddleName?: NullableStringFieldUpdateOperationsInput | string | null
    beneficiaryLastName?: StringFieldUpdateOperationsInput | string
    beneficiarySuffix?: NullableStringFieldUpdateOperationsInput | string | null
    beneficiaryBirthdate?: DateTimeFieldUpdateOperationsInput | Date | string
    beneficiarySex?: StringFieldUpdateOperationsInput | string
    beneficiaryJob?: NullableStringFieldUpdateOperationsInput | string | null
    beneficiaryBarangay?: StringFieldUpdateOperationsInput | string
    beneficiaryHealthStation?: StringFieldUpdateOperationsInput | string
    beneficiaryPrimaryType?: StringFieldUpdateOperationsInput | string
    beneficiaryCivilStatus?: StringFieldUpdateOperationsInput | string
    beneficiaryContactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    beneficiaryTypes?: StringFieldUpdateOperationsInput | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
  }

  export type BeneficiaryTypesUpdateWithoutBeneficiaryInput = {
    type?: TypeUpdateOneRequiredWithoutBeneficiaryTypesNestedInput
  }

  export type BeneficiaryTypesUncheckedUpdateWithoutBeneficiaryInput = {
    typeId?: IntFieldUpdateOperationsInput | number
  }

  export type BeneficiaryTypesUncheckedUpdateManyWithoutBeneficiaryInput = {
    typeId?: IntFieldUpdateOperationsInput | number
  }

  export type BeneficiaryTypesCreateManyTypeInput = {
    beneficiaryId: number
  }

  export type BeneficiaryTypesUpdateWithoutTypeInput = {
    beneficiary?: BeneficiaryUpdateOneRequiredWithoutBeneficiaryTypesNestedInput
  }

  export type BeneficiaryTypesUncheckedUpdateWithoutTypeInput = {
    beneficiaryId?: IntFieldUpdateOperationsInput | number
  }

  export type BeneficiaryTypesUncheckedUpdateManyWithoutTypeInput = {
    beneficiaryId?: IntFieldUpdateOperationsInput | number
  }

  export type ActivityParticipationCreateManyActivityInput = {
    beneficiaryId: number
    attended?: boolean
    beneficiaryFirstName: string
    beneficiaryMiddleName?: string | null
    beneficiaryLastName: string
    beneficiarySuffix?: string | null
    beneficiaryBirthdate: Date | string
    beneficiarySex: string
    beneficiaryJob?: string | null
    beneficiaryBarangay: string
    beneficiaryHealthStation: string
    beneficiaryPrimaryType: string
    beneficiaryCivilStatus: string
    beneficiaryContactNumber?: string | null
    beneficiaryTypes: string
    isArchived?: boolean
  }

  export type ActivityDocumentationCreateManyActivityInput = {
    documentationId?: number
    filename: string
    filepath: string
    uploadedAt?: Date | string
  }

  export type ActivityParticipationUpdateWithoutActivityInput = {
    attended?: BoolFieldUpdateOperationsInput | boolean
    beneficiaryFirstName?: StringFieldUpdateOperationsInput | string
    beneficiaryMiddleName?: NullableStringFieldUpdateOperationsInput | string | null
    beneficiaryLastName?: StringFieldUpdateOperationsInput | string
    beneficiarySuffix?: NullableStringFieldUpdateOperationsInput | string | null
    beneficiaryBirthdate?: DateTimeFieldUpdateOperationsInput | Date | string
    beneficiarySex?: StringFieldUpdateOperationsInput | string
    beneficiaryJob?: NullableStringFieldUpdateOperationsInput | string | null
    beneficiaryBarangay?: StringFieldUpdateOperationsInput | string
    beneficiaryHealthStation?: StringFieldUpdateOperationsInput | string
    beneficiaryPrimaryType?: StringFieldUpdateOperationsInput | string
    beneficiaryCivilStatus?: StringFieldUpdateOperationsInput | string
    beneficiaryContactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    beneficiaryTypes?: StringFieldUpdateOperationsInput | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    beneficiary?: BeneficiaryUpdateOneRequiredWithoutActivityParticipationNestedInput
  }

  export type ActivityParticipationUncheckedUpdateWithoutActivityInput = {
    beneficiaryId?: IntFieldUpdateOperationsInput | number
    attended?: BoolFieldUpdateOperationsInput | boolean
    beneficiaryFirstName?: StringFieldUpdateOperationsInput | string
    beneficiaryMiddleName?: NullableStringFieldUpdateOperationsInput | string | null
    beneficiaryLastName?: StringFieldUpdateOperationsInput | string
    beneficiarySuffix?: NullableStringFieldUpdateOperationsInput | string | null
    beneficiaryBirthdate?: DateTimeFieldUpdateOperationsInput | Date | string
    beneficiarySex?: StringFieldUpdateOperationsInput | string
    beneficiaryJob?: NullableStringFieldUpdateOperationsInput | string | null
    beneficiaryBarangay?: StringFieldUpdateOperationsInput | string
    beneficiaryHealthStation?: StringFieldUpdateOperationsInput | string
    beneficiaryPrimaryType?: StringFieldUpdateOperationsInput | string
    beneficiaryCivilStatus?: StringFieldUpdateOperationsInput | string
    beneficiaryContactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    beneficiaryTypes?: StringFieldUpdateOperationsInput | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ActivityParticipationUncheckedUpdateManyWithoutActivityInput = {
    beneficiaryId?: IntFieldUpdateOperationsInput | number
    attended?: BoolFieldUpdateOperationsInput | boolean
    beneficiaryFirstName?: StringFieldUpdateOperationsInput | string
    beneficiaryMiddleName?: NullableStringFieldUpdateOperationsInput | string | null
    beneficiaryLastName?: StringFieldUpdateOperationsInput | string
    beneficiarySuffix?: NullableStringFieldUpdateOperationsInput | string | null
    beneficiaryBirthdate?: DateTimeFieldUpdateOperationsInput | Date | string
    beneficiarySex?: StringFieldUpdateOperationsInput | string
    beneficiaryJob?: NullableStringFieldUpdateOperationsInput | string | null
    beneficiaryBarangay?: StringFieldUpdateOperationsInput | string
    beneficiaryHealthStation?: StringFieldUpdateOperationsInput | string
    beneficiaryPrimaryType?: StringFieldUpdateOperationsInput | string
    beneficiaryCivilStatus?: StringFieldUpdateOperationsInput | string
    beneficiaryContactNumber?: NullableStringFieldUpdateOperationsInput | string | null
    beneficiaryTypes?: StringFieldUpdateOperationsInput | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ActivityDocumentationUpdateWithoutActivityInput = {
    filename?: StringFieldUpdateOperationsInput | string
    filepath?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActivityDocumentationUncheckedUpdateWithoutActivityInput = {
    documentationId?: IntFieldUpdateOperationsInput | number
    filename?: StringFieldUpdateOperationsInput | string
    filepath?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ActivityDocumentationUncheckedUpdateManyWithoutActivityInput = {
    documentationId?: IntFieldUpdateOperationsInput | number
    filename?: StringFieldUpdateOperationsInput | string
    filepath?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FileAttachmentCreateManyReportInput = {
    fileId?: number
    submissionId: number
    filePath: string
    fileType: string
    fileName: string
  }

  export type FeedbackCreateManyReportInput = {
    feedbackId?: number
    createdBy: number
    content: string
    createdAt?: Date | string
    submissionId?: number | null
  }

  export type SubmissionCreateManyReportInput = {
    submissionId?: number
    userId: number
    status?: string
    submissionDate?: Date | string
  }

  export type FileAttachmentUpdateWithoutReportInput = {
    filePath?: StringFieldUpdateOperationsInput | string
    fileType?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    submission?: SubmissionUpdateOneRequiredWithoutFilesNestedInput
  }

  export type FileAttachmentUncheckedUpdateWithoutReportInput = {
    fileId?: IntFieldUpdateOperationsInput | number
    submissionId?: IntFieldUpdateOperationsInput | number
    filePath?: StringFieldUpdateOperationsInput | string
    fileType?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
  }

  export type FileAttachmentUncheckedUpdateManyWithoutReportInput = {
    fileId?: IntFieldUpdateOperationsInput | number
    submissionId?: IntFieldUpdateOperationsInput | number
    filePath?: StringFieldUpdateOperationsInput | string
    fileType?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
  }

  export type FeedbackUpdateWithoutReportInput = {
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutFeedbacksNestedInput
    submission?: SubmissionUpdateOneWithoutFeedbacksNestedInput
  }

  export type FeedbackUncheckedUpdateWithoutReportInput = {
    feedbackId?: IntFieldUpdateOperationsInput | number
    createdBy?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submissionId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type FeedbackUncheckedUpdateManyWithoutReportInput = {
    feedbackId?: IntFieldUpdateOperationsInput | number
    createdBy?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    submissionId?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type SubmissionUpdateWithoutReportInput = {
    status?: StringFieldUpdateOperationsInput | string
    submissionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    files?: FileAttachmentUpdateManyWithoutSubmissionNestedInput
    feedbacks?: FeedbackUpdateManyWithoutSubmissionNestedInput
    user?: UserUpdateOneRequiredWithoutSubmissionsNestedInput
  }

  export type SubmissionUncheckedUpdateWithoutReportInput = {
    submissionId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    submissionDate?: DateTimeFieldUpdateOperationsInput | Date | string
    files?: FileAttachmentUncheckedUpdateManyWithoutSubmissionNestedInput
    feedbacks?: FeedbackUncheckedUpdateManyWithoutSubmissionNestedInput
  }

  export type SubmissionUncheckedUpdateManyWithoutReportInput = {
    submissionId?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    status?: StringFieldUpdateOperationsInput | string
    submissionDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FileAttachmentCreateManySubmissionInput = {
    fileId?: number
    reportId: number
    filePath: string
    fileType: string
    fileName: string
  }

  export type FeedbackCreateManySubmissionInput = {
    feedbackId?: number
    reportId: number
    createdBy: number
    content: string
    createdAt?: Date | string
  }

  export type FileAttachmentUpdateWithoutSubmissionInput = {
    filePath?: StringFieldUpdateOperationsInput | string
    fileType?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    report?: ReportUpdateOneRequiredWithoutFilesNestedInput
  }

  export type FileAttachmentUncheckedUpdateWithoutSubmissionInput = {
    fileId?: IntFieldUpdateOperationsInput | number
    reportId?: IntFieldUpdateOperationsInput | number
    filePath?: StringFieldUpdateOperationsInput | string
    fileType?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
  }

  export type FileAttachmentUncheckedUpdateManyWithoutSubmissionInput = {
    fileId?: IntFieldUpdateOperationsInput | number
    reportId?: IntFieldUpdateOperationsInput | number
    filePath?: StringFieldUpdateOperationsInput | string
    fileType?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
  }

  export type FeedbackUpdateWithoutSubmissionInput = {
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    report?: ReportUpdateOneRequiredWithoutFeedbacksNestedInput
    user?: UserUpdateOneRequiredWithoutFeedbacksNestedInput
  }

  export type FeedbackUncheckedUpdateWithoutSubmissionInput = {
    feedbackId?: IntFieldUpdateOperationsInput | number
    reportId?: IntFieldUpdateOperationsInput | number
    createdBy?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FeedbackUncheckedUpdateManyWithoutSubmissionInput = {
    feedbackId?: IntFieldUpdateOperationsInput | number
    reportId?: IntFieldUpdateOperationsInput | number
    createdBy?: IntFieldUpdateOperationsInput | number
    content?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BeneficiaryCountOutputTypeDefaultArgs instead
     */
    export type BeneficiaryCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BeneficiaryCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TypeCountOutputTypeDefaultArgs instead
     */
    export type TypeCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TypeCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ActivityCountOutputTypeDefaultArgs instead
     */
    export type ActivityCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ActivityCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ReportCountOutputTypeDefaultArgs instead
     */
    export type ReportCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ReportCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SubmissionCountOutputTypeDefaultArgs instead
     */
    export type SubmissionCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SubmissionCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BeneficiaryDefaultArgs instead
     */
    export type BeneficiaryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BeneficiaryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TypeDefaultArgs instead
     */
    export type TypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BeneficiaryTypesDefaultArgs instead
     */
    export type BeneficiaryTypesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BeneficiaryTypesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ActivityDefaultArgs instead
     */
    export type ActivityArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ActivityDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ActivityDocumentationDefaultArgs instead
     */
    export type ActivityDocumentationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ActivityDocumentationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ActivityParticipationDefaultArgs instead
     */
    export type ActivityParticipationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ActivityParticipationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ReportDefaultArgs instead
     */
    export type ReportArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ReportDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FileAttachmentDefaultArgs instead
     */
    export type FileAttachmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FileAttachmentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FeedbackDefaultArgs instead
     */
    export type FeedbackArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FeedbackDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SubmissionDefaultArgs instead
     */
    export type SubmissionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SubmissionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use NotificationDefaultArgs instead
     */
    export type NotificationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = NotificationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use EventDefaultArgs instead
     */
    export type EventArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = EventDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}